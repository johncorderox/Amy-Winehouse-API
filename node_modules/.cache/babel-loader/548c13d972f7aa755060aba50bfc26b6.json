{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar parseJson = require(\"json-parse-better-errors\");\n\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\nvar DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\n\nvar ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\n\nvar DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\nvar WebpackError = require(\"./WebpackError\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\n\nvar DllReferencePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  function DllReferencePlugin(options) {\n    _classCallCheck(this, DllReferencePlugin);\n\n    validateOptions(schema, options, \"Dll Reference Plugin\");\n    this.options = options;\n  }\n\n  _createClass(DllReferencePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n        compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());\n      });\n      compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", function (params, callback) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n\n          if (typeof manifest === \"string\") {\n            params.compilationDependencies.add(manifest);\n            compiler.inputFileSystem.readFile(manifest, function (err, result) {\n              if (err) return callback(err); // Catch errors parsing the manifest so that blank\n              // or malformed manifest files don't kill the process.\n\n              try {\n                params[\"dll reference \" + manifest] = parseJson(result.toString(\"utf-8\"));\n              } catch (e) {\n                // Store the error in the params so that it can\n                // be added as a compilation error later on.\n                var manifestPath = makePathsRelative(compiler.options.context, manifest);\n                params[\"dll reference parse error \" + manifest] = new DllManifestError(manifestPath, e.message);\n              }\n\n              return callback();\n            });\n            return;\n          }\n        }\n\n        return callback();\n      });\n      compiler.hooks.compile.tap(\"DllReferencePlugin\", function (params) {\n        var name = _this.options.name;\n        var sourceType = _this.options.sourceType;\n        var content = \"content\" in _this.options ? _this.options.content : undefined;\n\n        if (\"manifest\" in _this.options) {\n          var manifestParameter = _this.options.manifest;\n          var manifest;\n\n          if (typeof manifestParameter === \"string\") {\n            // If there was an error parsing the manifest\n            // file, exit now because the error will be added\n            // as a compilation error in the \"compilation\" hook.\n            if (params[\"dll reference parse error \" + manifestParameter]) {\n              return;\n            }\n\n            manifest =\n            /** @type {DllReferencePluginOptionsManifest} */\n            params[\"dll reference \" + manifestParameter];\n          } else {\n            manifest = manifestParameter;\n          }\n\n          if (manifest) {\n            if (!name) name = manifest.name;\n            if (!sourceType) sourceType = manifest.type;\n            if (!content) content = manifest.content;\n          }\n        }\n\n        var externals = {};\n        var source = \"dll-reference \" + name;\n        externals[source] = name;\n        var normalModuleFactory = params.normalModuleFactory;\n        new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n        new DelegatedModuleFactoryPlugin({\n          source: source,\n          type: _this.options.type,\n          scope: _this.options.scope,\n          context: _this.options.context || compiler.options.context,\n          content: content,\n          extensions: _this.options.extensions\n        }).apply(normalModuleFactory);\n      });\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, params) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n\n          if (typeof manifest === \"string\") {\n            // If there was an error parsing the manifest file, add the\n            // error as a compilation error to make the compilation fail.\n            var e = params[\"dll reference parse error \" + manifest];\n\n            if (e) {\n              compilation.errors.push(e);\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return DllReferencePlugin;\n}();\n\nvar DllManifestError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(DllManifestError, _WebpackError);\n\n  var _super = _createSuper(DllManifestError);\n\n  function DllManifestError(filename, message) {\n    var _this2;\n\n    _classCallCheck(this, DllManifestError);\n\n    _this2 = _super.call(this);\n    _this2.name = \"DllManifestError\";\n    _this2.message = \"Dll manifest \".concat(filename, \"\\n\").concat(message);\n    Error.captureStackTrace(_assertThisInitialized(_this2), _this2.constructor);\n    return _this2;\n  }\n\n  return DllManifestError;\n}(WebpackError);\n\nmodule.exports = DllReferencePlugin;","map":null,"metadata":{},"sourceType":"module"}