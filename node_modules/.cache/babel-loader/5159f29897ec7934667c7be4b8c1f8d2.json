{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ImportContextDependency = require(\"./ImportContextDependency\");\n\nvar ImportWeakDependency = require(\"./ImportWeakDependency\");\n\nvar ImportDependenciesBlock = require(\"./ImportDependenciesBlock\");\n\nvar ImportEagerDependency = require(\"./ImportEagerDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\n\nvar CommentCompilationWarning = require(\"../CommentCompilationWarning\");\n\nvar ImportParserPlugin = /*#__PURE__*/function () {\n  function ImportParserPlugin(options) {\n    _classCallCheck(this, ImportParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(ImportParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var _this = this;\n\n      parser.hooks.importCall.tap(\"ImportParserPlugin\", function (expr) {\n        if (expr.arguments.length !== 1) {\n          throw new Error(\"Incorrect number of arguments provided to 'import(module: string) -> Promise'.\");\n        }\n\n        var param = parser.evaluateExpression(expr.arguments[0]);\n        var chunkName = null;\n        var mode = \"lazy\";\n        var include = null;\n        var exclude = null;\n        var groupOptions = {};\n\n        var _parser$parseCommentO = parser.parseCommentOptions(expr.range),\n            importOptions = _parser$parseCommentO.options,\n            commentErrors = _parser$parseCommentO.errors;\n\n        if (commentErrors) {\n          var _iterator = _createForOfIteratorHelper(commentErrors),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var e = _step.value;\n              var comment = e.comment;\n              parser.state.module.warnings.push(new CommentCompilationWarning(\"Compilation error while processing magic comment(-s): /*\".concat(comment.value, \"*/: \").concat(e.message), parser.state.module, comment.loc));\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        if (importOptions) {\n          if (importOptions.webpackIgnore !== undefined) {\n            if (typeof importOptions.webpackIgnore !== \"boolean\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackIgnore` expected a boolean, but received: \".concat(importOptions.webpackIgnore, \".\"), expr.loc));\n            } else {\n              // Do not instrument `import()` if `webpackIgnore` is `true`\n              if (importOptions.webpackIgnore) {\n                return false;\n              }\n            }\n          }\n\n          if (importOptions.webpackChunkName !== undefined) {\n            if (typeof importOptions.webpackChunkName !== \"string\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackChunkName` expected a string, but received: \".concat(importOptions.webpackChunkName, \".\"), expr.loc));\n            } else {\n              chunkName = importOptions.webpackChunkName;\n            }\n          }\n\n          if (importOptions.webpackMode !== undefined) {\n            if (typeof importOptions.webpackMode !== \"string\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackMode` expected a string, but received: \".concat(importOptions.webpackMode, \".\"), expr.loc));\n            } else {\n              mode = importOptions.webpackMode;\n            }\n          }\n\n          if (importOptions.webpackPrefetch !== undefined) {\n            if (importOptions.webpackPrefetch === true) {\n              groupOptions.prefetchOrder = 0;\n            } else if (typeof importOptions.webpackPrefetch === \"number\") {\n              groupOptions.prefetchOrder = importOptions.webpackPrefetch;\n            } else {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackPrefetch` expected true or a number, but received: \".concat(importOptions.webpackPrefetch, \".\"), expr.loc));\n            }\n          }\n\n          if (importOptions.webpackPreload !== undefined) {\n            if (importOptions.webpackPreload === true) {\n              groupOptions.preloadOrder = 0;\n            } else if (typeof importOptions.webpackPreload === \"number\") {\n              groupOptions.preloadOrder = importOptions.webpackPreload;\n            } else {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackPreload` expected true or a number, but received: \".concat(importOptions.webpackPreload, \".\"), expr.loc));\n            }\n          }\n\n          if (importOptions.webpackInclude !== undefined) {\n            if (!importOptions.webpackInclude || importOptions.webpackInclude.constructor.name !== \"RegExp\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackInclude` expected a regular expression, but received: \".concat(importOptions.webpackInclude, \".\"), expr.loc));\n            } else {\n              include = new RegExp(importOptions.webpackInclude);\n            }\n          }\n\n          if (importOptions.webpackExclude !== undefined) {\n            if (!importOptions.webpackExclude || importOptions.webpackExclude.constructor.name !== \"RegExp\") {\n              parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackExclude` expected a regular expression, but received: \".concat(importOptions.webpackExclude, \".\"), expr.loc));\n            } else {\n              exclude = new RegExp(importOptions.webpackExclude);\n            }\n          }\n        }\n\n        if (param.isString()) {\n          if (mode !== \"lazy\" && mode !== \"eager\" && mode !== \"weak\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackMode` expected 'lazy', 'eager' or 'weak', but received: \".concat(mode, \".\"), expr.loc));\n          }\n\n          if (mode === \"eager\") {\n            var dep = new ImportEagerDependency(param.string, parser.state.module, expr.range);\n            parser.state.current.addDependency(dep);\n          } else if (mode === \"weak\") {\n            var _dep = new ImportWeakDependency(param.string, parser.state.module, expr.range);\n\n            parser.state.current.addDependency(_dep);\n          } else {\n            var depBlock = new ImportDependenciesBlock(param.string, expr.range, Object.assign(groupOptions, {\n              name: chunkName\n            }), parser.state.module, expr.loc, parser.state.module);\n            parser.state.current.addBlock(depBlock);\n          }\n\n          return true;\n        } else {\n          if (mode !== \"lazy\" && mode !== \"lazy-once\" && mode !== \"eager\" && mode !== \"weak\") {\n            parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, \"`webpackMode` expected 'lazy', 'lazy-once', 'eager' or 'weak', but received: \".concat(mode, \".\"), expr.loc));\n            mode = \"lazy\";\n          }\n\n          if (mode === \"weak\") {\n            mode = \"async-weak\";\n          }\n\n          var _dep2 = ContextDependencyHelpers.create(ImportContextDependency, expr.range, param, expr, _this.options, {\n            chunkName: chunkName,\n            groupOptions: groupOptions,\n            include: include,\n            exclude: exclude,\n            mode: mode,\n            namespaceObject: parser.state.module.buildMeta.strictHarmonyModule ? \"strict\" : true\n          }, parser);\n\n          if (!_dep2) return;\n          _dep2.loc = expr.loc;\n          _dep2.optional = !!parser.scope.inTry;\n          parser.state.current.addDependency(_dep2);\n          return true;\n        }\n      });\n    }\n  }]);\n\n  return ImportParserPlugin;\n}();\n\nmodule.exports = ImportParserPlugin;","map":null,"metadata":{},"sourceType":"module"}