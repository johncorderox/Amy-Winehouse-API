{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Naoyuki Kanezawa @nkzawa\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\n\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\nvar MultiModuleFactory = require(\"./MultiModuleFactory\");\n\nvar MultiEntryPlugin = require(\"./MultiEntryPlugin\");\n\nvar SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDynamic} EntryDynamic */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryStatic} EntryStatic */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar DynamicEntryPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {string} context the context path\n   * @param {EntryDynamic} entry the entry value\n   */\n  function DynamicEntryPlugin(context, entry) {\n    _classCallCheck(this, DynamicEntryPlugin);\n\n    this.context = context;\n    this.entry = entry;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(DynamicEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"DynamicEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var multiModuleFactory = new MultiModuleFactory();\n        compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"DynamicEntryPlugin\", function (compilation, callback) {\n        /**\n         * @param {string|string[]} entry entry value or array of entry values\n         * @param {string} name name of entry\n         * @returns {Promise<EntryStatic>} returns the promise resolving the Compilation#addEntry function\n         */\n        var addEntry = function addEntry(entry, name) {\n          var dep = DynamicEntryPlugin.createDependency(entry, name);\n          return new Promise(function (resolve, reject) {\n            compilation.addEntry(_this.context, dep, name, function (err) {\n              if (err) return reject(err);\n              resolve();\n            });\n          });\n        };\n\n        Promise.resolve(_this.entry()).then(function (entry) {\n          if (typeof entry === \"string\" || Array.isArray(entry)) {\n            addEntry(entry, \"main\").then(function () {\n              return callback();\n            }, callback);\n          } else if (_typeof(entry) === \"object\") {\n            Promise.all(Object.keys(entry).map(function (name) {\n              return addEntry(entry[name], name);\n            })).then(function () {\n              return callback();\n            }, callback);\n          }\n        });\n      });\n    }\n  }]);\n\n  return DynamicEntryPlugin;\n}();\n\nmodule.exports = DynamicEntryPlugin;\n/**\n * @param {string|string[]} entry entry value or array of entry paths\n * @param {string} name name of entry\n * @returns {SingleEntryDependency|MultiEntryDependency} returns dep\n */\n\nDynamicEntryPlugin.createDependency = function (entry, name) {\n  if (Array.isArray(entry)) {\n    return MultiEntryPlugin.createDependency(entry, name);\n  } else {\n    return SingleEntryPlugin.createDependency(entry, name);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}