{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar util = require(\"util\");\n\nvar SyncBailHook = require(\"./SyncBailHook\");\n\nfunction Tapable() {\n  var _this = this;\n\n  this._pluginCompat = new SyncBailHook([\"options\"]);\n\n  this._pluginCompat.tap({\n    name: \"Tapable camelCase\",\n    stage: 100\n  }, function (options) {\n    options.names.add(options.name.replace(/[- ]([a-z])/g, function (str, ch) {\n      return ch.toUpperCase();\n    }));\n  });\n\n  this._pluginCompat.tap({\n    name: \"Tapable this.hooks\",\n    stage: 200\n  }, function (options) {\n    var hook;\n\n    var _iterator = _createForOfIteratorHelper(options.names),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var name = _step.value;\n        hook = _this.hooks[name];\n\n        if (hook !== undefined) {\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (hook !== undefined) {\n      var tapOpt = {\n        name: options.fn.name || \"unnamed compat plugin\",\n        stage: options.stage || 0\n      };\n      if (options.async) hook.tapAsync(tapOpt, options.fn);else hook.tap(tapOpt, options.fn);\n      return true;\n    }\n  });\n}\n\nmodule.exports = Tapable;\n\nTapable.addCompatLayer = function addCompatLayer(instance) {\n  Tapable.call(instance);\n  instance.plugin = Tapable.prototype.plugin;\n  instance.apply = Tapable.prototype.apply;\n};\n\nTapable.prototype.plugin = util.deprecate(function plugin(name, fn) {\n  if (Array.isArray(name)) {\n    name.forEach(function (name) {\n      this.plugin(name, fn);\n    }, this);\n    return;\n  }\n\n  var result = this._pluginCompat.call({\n    name: name,\n    fn: fn,\n    names: new Set([name])\n  });\n\n  if (!result) {\n    throw new Error(\"Plugin could not be registered at '\".concat(name, \"'. Hook was not found.\\n\") + \"BREAKING CHANGE: There need to exist a hook at 'this.hooks'. \" + \"To create a compatibility layer for this hook, hook into 'this._pluginCompat'.\");\n  }\n}, \"Tapable.plugin is deprecated. Use new API on `.hooks` instead\");\nTapable.prototype.apply = util.deprecate(function apply() {\n  for (var i = 0; i < arguments.length; i++) {\n    arguments[i].apply(this);\n  }\n}, \"Tapable.apply is deprecated. Call apply on the plugin directly instead\");","map":null,"metadata":{},"sourceType":"module"}