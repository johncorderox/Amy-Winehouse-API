{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar createHash = require(\"./util/createHash\");\n\nvar ModuleFilenameHelpers = exports;\nModuleFilenameHelpers.ALL_LOADERS_RESOURCE = \"[all-loaders][resource]\";\nModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE = /\\[all-?loaders\\]\\[resource\\]/gi;\nModuleFilenameHelpers.LOADERS_RESOURCE = \"[loaders][resource]\";\nModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE = /\\[loaders\\]\\[resource\\]/gi;\nModuleFilenameHelpers.RESOURCE = \"[resource]\";\nModuleFilenameHelpers.REGEXP_RESOURCE = /\\[resource\\]/gi;\nModuleFilenameHelpers.ABSOLUTE_RESOURCE_PATH = \"[absolute-resource-path]\";\nModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH = /\\[abs(olute)?-?resource-?path\\]/gi;\nModuleFilenameHelpers.RESOURCE_PATH = \"[resource-path]\";\nModuleFilenameHelpers.REGEXP_RESOURCE_PATH = /\\[resource-?path\\]/gi;\nModuleFilenameHelpers.ALL_LOADERS = \"[all-loaders]\";\nModuleFilenameHelpers.REGEXP_ALL_LOADERS = /\\[all-?loaders\\]/gi;\nModuleFilenameHelpers.LOADERS = \"[loaders]\";\nModuleFilenameHelpers.REGEXP_LOADERS = /\\[loaders\\]/gi;\nModuleFilenameHelpers.QUERY = \"[query]\";\nModuleFilenameHelpers.REGEXP_QUERY = /\\[query\\]/gi;\nModuleFilenameHelpers.ID = \"[id]\";\nModuleFilenameHelpers.REGEXP_ID = /\\[id\\]/gi;\nModuleFilenameHelpers.HASH = \"[hash]\";\nModuleFilenameHelpers.REGEXP_HASH = /\\[hash\\]/gi;\nModuleFilenameHelpers.NAMESPACE = \"[namespace]\";\nModuleFilenameHelpers.REGEXP_NAMESPACE = /\\[namespace\\]/gi;\n\nvar getAfter = function getAfter(str, token) {\n  var idx = str.indexOf(token);\n  return idx < 0 ? \"\" : str.substr(idx);\n};\n\nvar getBefore = function getBefore(str, token) {\n  var idx = str.lastIndexOf(token);\n  return idx < 0 ? \"\" : str.substr(0, idx);\n};\n\nvar getHash = function getHash(str) {\n  var hash = createHash(\"md4\");\n  hash.update(str);\n  var digest =\n  /** @type {string} */\n  hash.digest(\"hex\");\n  return digest.substr(0, 4);\n};\n\nvar asRegExp = function asRegExp(test) {\n  if (typeof test === \"string\") {\n    test = new RegExp(\"^\" + test.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\"));\n  }\n\n  return test;\n};\n\nModuleFilenameHelpers.createFilename = function (module, options, requestShortener) {\n  var opts = Object.assign({\n    namespace: \"\",\n    moduleFilenameTemplate: \"\"\n  }, _typeof(options) === \"object\" ? options : {\n    moduleFilenameTemplate: options\n  });\n  var absoluteResourcePath;\n  var hash;\n  var identifier;\n  var moduleId;\n  var shortIdentifier;\n  if (module === undefined) module = \"\";\n\n  if (typeof module === \"string\") {\n    shortIdentifier = requestShortener.shorten(module);\n    identifier = shortIdentifier;\n    moduleId = \"\";\n    absoluteResourcePath = module.split(\"!\").pop();\n    hash = getHash(identifier);\n  } else {\n    shortIdentifier = module.readableIdentifier(requestShortener);\n    identifier = requestShortener.shorten(module.identifier());\n    moduleId = module.id;\n    absoluteResourcePath = module.identifier().split(\"!\").pop();\n    hash = getHash(identifier);\n  }\n\n  var resource = shortIdentifier.split(\"!\").pop();\n  var loaders = getBefore(shortIdentifier, \"!\");\n  var allLoaders = getBefore(identifier, \"!\");\n  var query = getAfter(resource, \"?\");\n  var resourcePath = resource.substr(0, resource.length - query.length);\n\n  if (typeof opts.moduleFilenameTemplate === \"function\") {\n    return opts.moduleFilenameTemplate({\n      identifier: identifier,\n      shortIdentifier: shortIdentifier,\n      resource: resource,\n      resourcePath: resourcePath,\n      absoluteResourcePath: absoluteResourcePath,\n      allLoaders: allLoaders,\n      query: query,\n      moduleId: moduleId,\n      hash: hash,\n      namespace: opts.namespace\n    });\n  }\n\n  return opts.moduleFilenameTemplate.replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE, identifier).replace(ModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE, shortIdentifier).replace(ModuleFilenameHelpers.REGEXP_RESOURCE, resource).replace(ModuleFilenameHelpers.REGEXP_RESOURCE_PATH, resourcePath).replace(ModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH, absoluteResourcePath).replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS, allLoaders).replace(ModuleFilenameHelpers.REGEXP_LOADERS, loaders).replace(ModuleFilenameHelpers.REGEXP_QUERY, query).replace(ModuleFilenameHelpers.REGEXP_ID, moduleId).replace(ModuleFilenameHelpers.REGEXP_HASH, hash).replace(ModuleFilenameHelpers.REGEXP_NAMESPACE, opts.namespace);\n};\n\nModuleFilenameHelpers.replaceDuplicates = function (array, fn, comparator) {\n  var countMap = Object.create(null);\n  var posMap = Object.create(null);\n  array.forEach(function (item, idx) {\n    countMap[item] = countMap[item] || [];\n    countMap[item].push(idx);\n    posMap[item] = 0;\n  });\n\n  if (comparator) {\n    Object.keys(countMap).forEach(function (item) {\n      countMap[item].sort(comparator);\n    });\n  }\n\n  return array.map(function (item, i) {\n    if (countMap[item].length > 1) {\n      if (comparator && countMap[item][0] === i) return item;\n      return fn(item, i, posMap[item]++);\n    } else {\n      return item;\n    }\n  });\n};\n\nModuleFilenameHelpers.matchPart = function (str, test) {\n  if (!test) return true;\n  test = asRegExp(test);\n\n  if (Array.isArray(test)) {\n    return test.map(asRegExp).some(function (regExp) {\n      return regExp.test(str);\n    });\n  } else {\n    return test.test(str);\n  }\n};\n\nModuleFilenameHelpers.matchObject = function (obj, str) {\n  if (obj.test) {\n    if (!ModuleFilenameHelpers.matchPart(str, obj.test)) {\n      return false;\n    }\n  }\n\n  if (obj.include) {\n    if (!ModuleFilenameHelpers.matchPart(str, obj.include)) {\n      return false;\n    }\n  }\n\n  if (obj.exclude) {\n    if (ModuleFilenameHelpers.matchPart(str, obj.exclude)) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}