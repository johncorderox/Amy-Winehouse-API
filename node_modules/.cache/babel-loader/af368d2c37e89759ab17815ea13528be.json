{"ast":null,"code":"import { traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section; // Once we hit our section every that is after needs to be shifted by the delta\n\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nexport function shrinkPaddedLEB128(ast, uint8Buffer) {\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n      /**\n       * Section size\n       */\n\n      {\n        var newu32Encoded = encodeU32(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}","map":null,"metadata":{},"sourceType":"module"}