{"ast":null,"code":"'use strict';\n\nvar _templateObject, _templateObject2;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar BB = require('bluebird');\n\nvar contentPath = require('./path');\n\nvar figgyPudding = require('figgy-pudding');\n\nvar fs = require('graceful-fs');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar pipe = BB.promisify(require('mississippi').pipe);\n\nvar ssri = require('ssri');\n\nvar Y = require('../util/y.js');\n\nvar lstatAsync = BB.promisify(fs.lstat);\nvar readFileAsync = BB.promisify(fs.readFile);\nvar ReadOpts = figgyPudding({\n  size: {}\n});\nmodule.exports = read;\n\nfunction read(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    return readFileAsync(cpath, null).then(function (data) {\n      if (typeof opts.size === 'number' && opts.size !== data.length) {\n        throw sizeError(opts.size, data.length);\n      } else if (ssri.checkData(data, sri)) {\n        return data;\n      } else {\n        throw integrityError(sri, cpath);\n      }\n    });\n  });\n}\n\nmodule.exports.sync = readSync;\n\nfunction readSync(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    var data = fs.readFileSync(cpath);\n\n    if (typeof opts.size === 'number' && opts.size !== data.length) {\n      throw sizeError(opts.size, data.length);\n    } else if (ssri.checkData(data, sri)) {\n      return data;\n    } else {\n      throw integrityError(sri, cpath);\n    }\n  });\n}\n\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\n\nfunction readStream(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  var stream = new PassThrough();\n  withContentSri(cache, integrity, function (cpath, sri) {\n    return lstatAsync(cpath).then(function (stat) {\n      return {\n        cpath: cpath,\n        sri: sri,\n        stat: stat\n      };\n    });\n  }).then(function (_ref) {\n    var cpath = _ref.cpath,\n        sri = _ref.sri,\n        stat = _ref.stat;\n    return pipe(fs.createReadStream(cpath), ssri.integrityStream({\n      integrity: sri,\n      size: opts.size\n    }), stream);\n  })[\"catch\"](function (err) {\n    stream.emit('error', err);\n  });\n  return stream;\n}\n\nvar copyFileAsync;\n\nif (fs.copyFile) {\n  module.exports.copy = copy;\n  module.exports.copy.sync = copySync;\n  copyFileAsync = BB.promisify(fs.copyFile);\n}\n\nfunction copy(cache, integrity, dest, opts) {\n  opts = ReadOpts(opts);\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    return copyFileAsync(cpath, dest);\n  });\n}\n\nfunction copySync(cache, integrity, dest, opts) {\n  opts = ReadOpts(opts);\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\n\nmodule.exports.hasContent = hasContent;\n\nfunction hasContent(cache, integrity) {\n  if (!integrity) {\n    return BB.resolve(false);\n  }\n\n  return withContentSri(cache, integrity, function (cpath, sri) {\n    return lstatAsync(cpath).then(function (stat) {\n      return {\n        size: stat.size,\n        sri: sri,\n        stat: stat\n      };\n    });\n  })[\"catch\"](function (err) {\n    if (err.code === 'ENOENT') {\n      return false;\n    }\n\n    if (err.code === 'EPERM') {\n      if (process.platform !== 'win32') {\n        throw err;\n      } else {\n        return false;\n      }\n    }\n  });\n}\n\nmodule.exports.hasContent.sync = hasContentSync;\n\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n\n  return withContentSriSync(cache, integrity, function (cpath, sri) {\n    try {\n      var stat = fs.lstatSync(cpath);\n      return {\n        size: stat.size,\n        sri: sri,\n        stat: stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n\n      if (err.code === 'EPERM') {\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n}\n\nfunction withContentSri(cache, integrity, fn) {\n  return BB[\"try\"](function () {\n    var sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n\n    var algo = sri.pickAlgorithm();\n    var digests = sri[algo];\n\n    if (digests.length <= 1) {\n      var cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      return BB.any(sri[sri.pickAlgorithm()].map(function (meta) {\n        return withContentSri(cache, meta, fn);\n      }, {\n        concurrency: 1\n      }))[\"catch\"](function (err) {\n        if ([].some.call(err, function (e) {\n          return e.code === 'ENOENT';\n        })) {\n          throw Object.assign(new Error('No matching content found for ' + sri.toString()), {\n            code: 'ENOENT'\n          });\n        } else {\n          throw err[0];\n        }\n      });\n    }\n  });\n}\n\nfunction withContentSriSync(cache, integrity, fn) {\n  var sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n\n  var algo = sri.pickAlgorithm();\n  var digests = sri[algo];\n\n  if (digests.length <= 1) {\n    var cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    var lastErr = null;\n\n    var _iterator = _createForOfIteratorHelper(sri[sri.pickAlgorithm()]),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var meta = _step.value;\n\n        try {\n          return withContentSriSync(cache, meta, fn);\n        } catch (err) {\n          lastErr = err;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (lastErr) {\n      throw lastErr;\n    }\n  }\n}\n\nfunction sizeError(expected, found) {\n  var err = new Error(Y(_templateObject || (_templateObject = _taggedTemplateLiteral([\"Bad data size: expected inserted data to be \", \" bytes, but got \", \" instead\"])), expected, found));\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction integrityError(sri, path) {\n  var err = new Error(Y(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Integrity verification failed for \", \" (\", \")\"])), sri, path));\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":null,"metadata":{},"sourceType":"module"}