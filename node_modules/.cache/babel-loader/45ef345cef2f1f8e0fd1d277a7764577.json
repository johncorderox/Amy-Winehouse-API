{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar path = require(\"path\");\n\nvar NormalModuleReplacementPlugin = /*#__PURE__*/function () {\n  function NormalModuleReplacementPlugin(resourceRegExp, newResource) {\n    _classCallCheck(this, NormalModuleReplacementPlugin);\n\n    this.resourceRegExp = resourceRegExp;\n    this.newResource = newResource;\n  }\n\n  _createClass(NormalModuleReplacementPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var resourceRegExp = this.resourceRegExp;\n      var newResource = this.newResource;\n      compiler.hooks.normalModuleFactory.tap(\"NormalModuleReplacementPlugin\", function (nmf) {\n        nmf.hooks.beforeResolve.tap(\"NormalModuleReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.request)) {\n            if (typeof newResource === \"function\") {\n              newResource(result);\n            } else {\n              result.request = newResource;\n            }\n          }\n\n          return result;\n        });\n        nmf.hooks.afterResolve.tap(\"NormalModuleReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.resource)) {\n            if (typeof newResource === \"function\") {\n              newResource(result);\n            } else {\n              result.resource = path.resolve(path.dirname(result.resource), newResource);\n            }\n          }\n\n          return result;\n        });\n      });\n    }\n  }]);\n\n  return NormalModuleReplacementPlugin;\n}();\n\nmodule.exports = NormalModuleReplacementPlugin;","map":null,"metadata":{},"sourceType":"module"}