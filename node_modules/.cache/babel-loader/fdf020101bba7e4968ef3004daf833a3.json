{"ast":null,"code":"'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  if (!ajv._opts.$data) {\n    console.warn('keyword select requires $data option');\n    return ajv;\n  }\n\n  var metaSchemaRef = util.metaSchemaRef(ajv);\n  var compiledCaseSchemas = [];\n  defFunc.definition = {\n    validate: function v(schema, data, parentSchema) {\n      if (parentSchema.selectCases === undefined) throw new Error('keyword \"selectCases\" is absent');\n      var compiled = getCompiledSchemas(parentSchema, false);\n      var validate = compiled.cases[schema];\n      if (validate === undefined) validate = compiled[\"default\"];\n      if (typeof validate == 'boolean') return validate;\n      var valid = validate(data);\n      if (!valid) v.errors = validate.errors;\n      return valid;\n    },\n    $data: true,\n    metaSchema: {\n      type: ['string', 'number', 'boolean', 'null']\n    }\n  };\n  ajv.addKeyword('select', defFunc.definition);\n  ajv.addKeyword('selectCases', {\n    compile: function compile(schemas, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n\n      for (var value in schemas) {\n        compiled.cases[value] = compileOrBoolean(schemas[value]);\n      }\n\n      return function () {\n        return true;\n      };\n    },\n    valid: true,\n    metaSchema: {\n      type: 'object',\n      additionalProperties: metaSchemaRef\n    }\n  });\n  ajv.addKeyword('selectDefault', {\n    compile: function compile(schema, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      compiled[\"default\"] = compileOrBoolean(schema);\n      return function () {\n        return true;\n      };\n    },\n    valid: true,\n    metaSchema: metaSchemaRef\n  });\n  return ajv;\n\n  function getCompiledSchemas(parentSchema, create) {\n    var compiled;\n    compiledCaseSchemas.some(function (c) {\n      if (c.parentSchema === parentSchema) {\n        compiled = c;\n        return true;\n      }\n    });\n\n    if (!compiled && create !== false) {\n      compiled = {\n        parentSchema: parentSchema,\n        cases: {},\n        \"default\": true\n      };\n      compiledCaseSchemas.push(compiled);\n    }\n\n    return compiled;\n  }\n\n  function compileOrBoolean(schema) {\n    return typeof schema == 'boolean' ? schema : ajv.compile(schema);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}