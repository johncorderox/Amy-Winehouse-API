{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Template = require(\"../Template\");\n\nvar WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nvar ReadFileCompileWasmTemplatePlugin = /*#__PURE__*/function () {\n  function ReadFileCompileWasmTemplatePlugin(options) {\n    _classCallCheck(this, ReadFileCompileWasmTemplatePlugin);\n\n    this.options = options || {};\n  }\n\n  _createClass(ReadFileCompileWasmTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"ReadFileCompileWasmTemplatePlugin\", function (compilation) {\n        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {\n          return Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", \"try {\", Template.indent([\"readFile(join(__dirname, \".concat(path, \"), function(err, buffer){\"), Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return Promise.resolve(buffer); }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n        };\n\n        var plugin = new WasmMainTemplatePlugin(Object.assign({\n          generateLoadBinaryCode: generateLoadBinaryCode,\n          supportsStreaming: false\n        }, _this.options));\n        plugin.apply(compilation.mainTemplate);\n      });\n    }\n  }]);\n\n  return ReadFileCompileWasmTemplatePlugin;\n}();\n\nmodule.exports = ReadFileCompileWasmTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}