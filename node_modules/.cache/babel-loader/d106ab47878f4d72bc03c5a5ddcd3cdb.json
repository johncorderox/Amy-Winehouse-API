{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar RequireIncludeDependency = require(\"./RequireIncludeDependency\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function RequireIncludeDependencyParserPlugin() {\n    _classCallCheck(this, RequireIncludeDependencyParserPlugin);\n  }\n\n  _createClass(RequireIncludeDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call[\"for\"](\"require.include\").tap(\"RequireIncludeDependencyParserPlugin\", function (expr) {\n        if (expr.arguments.length !== 1) return;\n        var param = parser.evaluateExpression(expr.arguments[0]);\n        if (!param.isString()) return;\n        var dep = new RequireIncludeDependency(param.string, expr.range);\n        dep.loc = expr.loc;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n    }\n  }]);\n\n  return RequireIncludeDependencyParserPlugin;\n}();","map":null,"metadata":{},"sourceType":"module"}