{"ast":null,"code":"function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _sliceIterator(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _slicedToArray(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    return _sliceIterator(arr, i);\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { signatures } from \"./signatures\";\nimport { traverse } from \"./traverse\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nexport function isAnonymous(ident) {\n  return ident.raw === \"\";\n}\nexport function getSectionMetadata(ast, name) {\n  var section;\n  traverse(ast, {\n    SectionMetadata: function (_SectionMetadata) {\n      function SectionMetadata(_x) {\n        return _SectionMetadata.apply(this, arguments);\n      }\n\n      SectionMetadata.toString = function () {\n        return _SectionMetadata.toString();\n      };\n\n      return SectionMetadata;\n    }(function (_ref) {\n      var node = _ref.node;\n\n      if (node.section === name) {\n        section = node;\n      }\n    })\n  });\n  return section;\n}\nexport function getSectionMetadatas(ast, name) {\n  var sections = [];\n  traverse(ast, {\n    SectionMetadata: function (_SectionMetadata2) {\n      function SectionMetadata(_x2) {\n        return _SectionMetadata2.apply(this, arguments);\n      }\n\n      SectionMetadata.toString = function () {\n        return _SectionMetadata2.toString();\n      };\n\n      return SectionMetadata;\n    }(function (_ref2) {\n      var node = _ref2.node;\n\n      if (node.section === name) {\n        sections.push(node);\n      }\n    })\n  });\n  return sections;\n}\nexport function sortSectionMetadata(m) {\n  if (m.metadata == null) {\n    console.warn(\"sortSectionMetadata: no metadata to sort\");\n    return;\n  } // $FlowIgnore\n\n\n  m.metadata.sections.sort(function (a, b) {\n    var aId = constants.sections[a.section];\n    var bId = constants.sections[b.section];\n\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n\n    return aId - bId;\n  });\n}\nexport function orderedInsertNode(m, n) {\n  assertHasLoc(n);\n  var didInsert = false;\n\n  if (n.type === \"ModuleExport\") {\n    m.fields.push(n);\n    return;\n  }\n\n  m.fields = m.fields.reduce(function (acc, field) {\n    var fieldEndCol = Infinity;\n\n    if (field.loc != null) {\n      // $FlowIgnore\n      fieldEndCol = field.loc.end.column;\n    } // $FlowIgnore: assertHasLoc ensures that\n\n\n    if (didInsert === false && n.loc.start.column < fieldEndCol) {\n      didInsert = true;\n      acc.push(n);\n    }\n\n    acc.push(field);\n    return acc;\n  }, []); // Handles empty modules or n is the last element\n\n  if (didInsert === false) {\n    m.fields.push(n);\n  }\n}\nexport function assertHasLoc(n) {\n  if (n.loc == null || n.loc.start == null || n.loc.end == null) {\n    throw new Error(\"Internal failure: node (\".concat(JSON.stringify(n.type), \") has no location information\"));\n  }\n}\nexport function getEndOfSection(s) {\n  assertHasLoc(s.size);\n  return s.startOffset + s.size.value + ( // $FlowIgnore\n  s.size.loc.end.column - s.size.loc.start.column);\n}\nexport function shiftLoc(node, delta) {\n  // $FlowIgnore\n  node.loc.start.column += delta; // $FlowIgnore\n\n  node.loc.end.column += delta;\n}\nexport function shiftSection(ast, node, delta) {\n  if (node.type !== \"SectionMetadata\") {\n    throw new Error(\"Can not shift node \" + JSON.stringify(node.type));\n  }\n\n  node.startOffset += delta;\n\n  if (_typeof(node.size.loc) === \"object\") {\n    shiftLoc(node.size, delta);\n  } // Custom sections doesn't have vectorOfSize\n\n\n  if (_typeof(node.vectorOfSize) === \"object\" && _typeof(node.vectorOfSize.loc) === \"object\") {\n    shiftLoc(node.vectorOfSize, delta);\n  }\n\n  var sectionName = node.section; // shift node locations within that section\n\n  traverse(ast, {\n    Node: function Node(_ref3) {\n      var node = _ref3.node;\n      var section = getSectionForNode(node);\n\n      if (section === sectionName && _typeof(node.loc) === \"object\") {\n        shiftLoc(node, delta);\n      }\n    }\n  });\n}\nexport function signatureForOpcode(object, name) {\n  var opcodeName = name;\n\n  if (object !== undefined && object !== \"\") {\n    opcodeName = object + \".\" + name;\n  }\n\n  var sign = signatures[opcodeName];\n\n  if (sign == undefined) {\n    // TODO: Uncomment this when br_table and others has been done\n    //throw new Error(\"Invalid opcode: \"+opcodeName);\n    return [object, object];\n  }\n\n  return sign[0];\n}\nexport function getUniqueNameGenerator() {\n  var inc = {};\n  return function () {\n    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"temp\";\n\n    if (!(prefix in inc)) {\n      inc[prefix] = 0;\n    } else {\n      inc[prefix] = inc[prefix] + 1;\n    }\n\n    return prefix + \"_\" + inc[prefix];\n  };\n}\nexport function getStartByteOffset(n) {\n  // $FlowIgnore\n  if (typeof n.loc === \"undefined\" || typeof n.loc.start === \"undefined\") {\n    throw new Error( // $FlowIgnore\n    \"Can not get byte offset without loc informations, node: \" + String(n.id));\n  }\n\n  return n.loc.start.column;\n}\nexport function getEndByteOffset(n) {\n  // $FlowIgnore\n  if (typeof n.loc === \"undefined\" || typeof n.loc.end === \"undefined\") {\n    throw new Error(\"Can not get byte offset without loc informations, node: \" + n.type);\n  }\n\n  return n.loc.end.column;\n}\nexport function getFunctionBeginingByteOffset(n) {\n  if (!(n.body.length > 0)) {\n    throw new Error('n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var _n$body = _slicedToArray(n.body, 1),\n      firstInstruction = _n$body[0];\n\n  return getStartByteOffset(firstInstruction);\n}\nexport function getEndBlockByteOffset(n) {\n  // $FlowIgnore\n  if (!(n.instr.length > 0 || n.body.length > 0)) {\n    throw new Error('n.instr.length > 0 || n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var lastInstruction;\n\n  if (n.instr) {\n    // $FlowIgnore\n    lastInstruction = n.instr[n.instr.length - 1];\n  }\n\n  if (n.body) {\n    // $FlowIgnore\n    lastInstruction = n.body[n.body.length - 1];\n  }\n\n  if (!(_typeof(lastInstruction) === \"object\")) {\n    throw new Error('typeof lastInstruction === \"object\"' + \" error: \" + (undefined || \"unknown\"));\n  } // $FlowIgnore\n\n\n  return getStartByteOffset(lastInstruction);\n}\nexport function getStartBlockByteOffset(n) {\n  // $FlowIgnore\n  if (!(n.instr.length > 0 || n.body.length > 0)) {\n    throw new Error('n.instr.length > 0 || n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var fistInstruction;\n\n  if (n.instr) {\n    // $FlowIgnore\n    var _n$instr = _slicedToArray(n.instr, 1);\n\n    fistInstruction = _n$instr[0];\n  }\n\n  if (n.body) {\n    // $FlowIgnore\n    var _n$body2 = _slicedToArray(n.body, 1);\n\n    fistInstruction = _n$body2[0];\n  }\n\n  if (!(_typeof(fistInstruction) === \"object\")) {\n    throw new Error('typeof fistInstruction === \"object\"' + \" error: \" + (undefined || \"unknown\"));\n  } // $FlowIgnore\n\n\n  return getStartByteOffset(fistInstruction);\n}","map":null,"metadata":{},"sourceType":"module"}