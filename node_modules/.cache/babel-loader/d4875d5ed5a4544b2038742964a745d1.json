{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // TODO(sven): add flow in here\n\n\nimport { isSignature, isNumberLiteral } from \"@webassemblyjs/ast\";\nexport function moduleContextFromModuleAST(m) {\n  var moduleContext = new ModuleContext();\n\n  if (!(m.type === \"Module\")) {\n    throw new Error('m.type === \"Module\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  m.fields.forEach(function (field) {\n    switch (field.type) {\n      case \"Start\":\n        {\n          moduleContext.setStart(field.index);\n          break;\n        }\n\n      case \"TypeInstruction\":\n        {\n          moduleContext.addType(field);\n          break;\n        }\n\n      case \"Func\":\n        {\n          moduleContext.addFunction(field);\n          break;\n        }\n\n      case \"Global\":\n        {\n          moduleContext.defineGlobal(field);\n          break;\n        }\n\n      case \"ModuleImport\":\n        {\n          switch (field.descr.type) {\n            case \"GlobalType\":\n              {\n                moduleContext.importGlobal(field.descr.valtype, field.descr.mutability);\n                break;\n              }\n\n            case \"Memory\":\n              {\n                moduleContext.addMemory(field.descr.limits.min, field.descr.limits.max);\n                break;\n              }\n\n            case \"FuncImportDescr\":\n              {\n                moduleContext.importFunction(field.descr);\n                break;\n              }\n\n            case \"Table\":\n              {\n                // FIXME(sven): not implemented yet\n                break;\n              }\n\n            default:\n              throw new Error(\"Unsupported ModuleImport of type \" + JSON.stringify(field.descr.type));\n          }\n\n          break;\n        }\n\n      case \"Memory\":\n        {\n          moduleContext.addMemory(field.limits.min, field.limits.max);\n          break;\n        }\n    }\n  });\n  return moduleContext;\n}\n/**\n * Module context for type checking\n */\n\nexport var ModuleContext = /*#__PURE__*/function () {\n  function ModuleContext() {\n    _classCallCheck(this, ModuleContext);\n\n    this.funcs = [];\n    this.funcsOffsetByIdentifier = [];\n    this.types = [];\n    this.globals = [];\n    this.globalsOffsetByIdentifier = [];\n    this.mems = []; // Current stack frame\n\n    this.locals = [];\n    this.labels = [];\n    this[\"return\"] = [];\n    this.debugName = \"unknown\";\n    this.start = null;\n  }\n  /**\n   * Set start segment\n   */\n\n\n  _createClass(ModuleContext, [{\n    key: \"setStart\",\n    value: function setStart(index) {\n      this.start = index.value;\n    }\n    /**\n     * Get start function\n     */\n\n  }, {\n    key: \"getStart\",\n    value: function getStart() {\n      return this.start;\n    }\n    /**\n     * Reset the active stack frame\n     */\n\n  }, {\n    key: \"newContext\",\n    value: function newContext(debugName, expectedResult) {\n      this.locals = [];\n      this.labels = [expectedResult];\n      this[\"return\"] = expectedResult;\n      this.debugName = debugName;\n    }\n    /**\n     * Functions\n     */\n\n  }, {\n    key: \"addFunction\",\n    value: function addFunction(func\n    /*: Func*/\n    ) {\n      // eslint-disable-next-line prefer-const\n      var _ref = func.signature || {},\n          _ref$params = _ref.params,\n          args = _ref$params === void 0 ? [] : _ref$params,\n          _ref$results = _ref.results,\n          result = _ref$results === void 0 ? [] : _ref$results;\n\n      args = args.map(function (arg) {\n        return arg.valtype;\n      });\n      this.funcs.push({\n        args: args,\n        result: result\n      });\n\n      if (typeof func.name !== \"undefined\") {\n        this.funcsOffsetByIdentifier[func.name.value] = this.funcs.length - 1;\n      }\n    }\n  }, {\n    key: \"importFunction\",\n    value: function importFunction(funcimport) {\n      if (isSignature(funcimport.signature)) {\n        // eslint-disable-next-line prefer-const\n        var _funcimport$signature = funcimport.signature,\n            args = _funcimport$signature.params,\n            result = _funcimport$signature.results;\n        args = args.map(function (arg) {\n          return arg.valtype;\n        });\n        this.funcs.push({\n          args: args,\n          result: result\n        });\n      } else {\n        if (!isNumberLiteral(funcimport.signature)) {\n          throw new Error('isNumberLiteral(funcimport.signature)' + \" error: \" + (undefined || \"unknown\"));\n        }\n\n        var typeId = funcimport.signature.value;\n\n        if (!this.hasType(typeId)) {\n          throw new Error('this.hasType(typeId)' + \" error: \" + (undefined || \"unknown\"));\n        }\n\n        var signature = this.getType(typeId);\n        this.funcs.push({\n          args: signature.params.map(function (arg) {\n            return arg.valtype;\n          }),\n          result: signature.results\n        });\n      }\n\n      if (typeof funcimport.id !== \"undefined\") {\n        // imports are first, we can assume their index in the array\n        this.funcsOffsetByIdentifier[funcimport.id.value] = this.funcs.length - 1;\n      }\n    }\n  }, {\n    key: \"hasFunction\",\n    value: function hasFunction(index) {\n      return typeof this.getFunction(index) !== \"undefined\";\n    }\n  }, {\n    key: \"getFunction\",\n    value: function getFunction(index) {\n      if (typeof index !== \"number\") {\n        throw new Error(\"getFunction only supported for number index\");\n      }\n\n      return this.funcs[index];\n    }\n  }, {\n    key: \"getFunctionOffsetByIdentifier\",\n    value: function getFunctionOffsetByIdentifier(name) {\n      if (!(typeof name === \"string\")) {\n        throw new Error('typeof name === \"string\"' + \" error: \" + (undefined || \"unknown\"));\n      }\n\n      return this.funcsOffsetByIdentifier[name];\n    }\n    /**\n     * Labels\n     */\n\n  }, {\n    key: \"addLabel\",\n    value: function addLabel(result) {\n      this.labels.unshift(result);\n    }\n  }, {\n    key: \"hasLabel\",\n    value: function hasLabel(index) {\n      return this.labels.length > index && index >= 0;\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(index) {\n      return this.labels[index];\n    }\n  }, {\n    key: \"popLabel\",\n    value: function popLabel() {\n      this.labels.shift();\n    }\n    /**\n     * Locals\n     */\n\n  }, {\n    key: \"hasLocal\",\n    value: function hasLocal(index) {\n      return typeof this.getLocal(index) !== \"undefined\";\n    }\n  }, {\n    key: \"getLocal\",\n    value: function getLocal(index) {\n      return this.locals[index];\n    }\n  }, {\n    key: \"addLocal\",\n    value: function addLocal(type) {\n      this.locals.push(type);\n    }\n    /**\n     * Types\n     */\n\n  }, {\n    key: \"addType\",\n    value: function addType(type) {\n      if (!(type.functype.type === \"Signature\")) {\n        throw new Error('type.functype.type === \"Signature\"' + \" error: \" + (undefined || \"unknown\"));\n      }\n\n      this.types.push(type.functype);\n    }\n  }, {\n    key: \"hasType\",\n    value: function hasType(index) {\n      return this.types[index] !== undefined;\n    }\n  }, {\n    key: \"getType\",\n    value: function getType(index) {\n      return this.types[index];\n    }\n    /**\n     * Globals\n     */\n\n  }, {\n    key: \"hasGlobal\",\n    value: function hasGlobal(index) {\n      return this.globals.length > index && index >= 0;\n    }\n  }, {\n    key: \"getGlobal\",\n    value: function getGlobal(index) {\n      return this.globals[index].type;\n    }\n  }, {\n    key: \"getGlobalOffsetByIdentifier\",\n    value: function getGlobalOffsetByIdentifier(name) {\n      if (!(typeof name === \"string\")) {\n        throw new Error('typeof name === \"string\"' + \" error: \" + (undefined || \"unknown\"));\n      }\n\n      return this.globalsOffsetByIdentifier[name];\n    }\n  }, {\n    key: \"defineGlobal\",\n    value: function defineGlobal(global\n    /*: Global*/\n    ) {\n      var type = global.globalType.valtype;\n      var mutability = global.globalType.mutability;\n      this.globals.push({\n        type: type,\n        mutability: mutability\n      });\n\n      if (typeof global.name !== \"undefined\") {\n        this.globalsOffsetByIdentifier[global.name.value] = this.globals.length - 1;\n      }\n    }\n  }, {\n    key: \"importGlobal\",\n    value: function importGlobal(type, mutability) {\n      this.globals.push({\n        type: type,\n        mutability: mutability\n      });\n    }\n  }, {\n    key: \"isMutableGlobal\",\n    value: function isMutableGlobal(index) {\n      return this.globals[index].mutability === \"var\";\n    }\n  }, {\n    key: \"isImmutableGlobal\",\n    value: function isImmutableGlobal(index) {\n      return this.globals[index].mutability === \"const\";\n    }\n    /**\n     * Memories\n     */\n\n  }, {\n    key: \"hasMemory\",\n    value: function hasMemory(index) {\n      return this.mems.length > index && index >= 0;\n    }\n  }, {\n    key: \"addMemory\",\n    value: function addMemory(min, max) {\n      this.mems.push({\n        min: min,\n        max: max\n      });\n    }\n  }, {\n    key: \"getMemory\",\n    value: function getMemory(index) {\n      return this.mems[index];\n    }\n  }]);\n\n  return ModuleContext;\n}();","map":null,"metadata":{},"sourceType":"module"}