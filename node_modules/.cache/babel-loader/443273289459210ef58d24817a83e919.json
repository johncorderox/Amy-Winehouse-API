{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar AbstractMethodError = require(\"../AbstractMethodError\");\n\nvar BULK_SIZE = 1000;\n\nvar Hash = /*#__PURE__*/function () {\n  function Hash() {\n    _classCallCheck(this, Hash);\n  }\n\n  _createClass(Hash, [{\n    key: \"update\",\n    value:\n    /**\n     * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n     * @param {string|Buffer} data data\n     * @param {string=} inputEncoding data encoding\n     * @returns {this} updated hash\n     */\n    function update(data, inputEncoding) {\n      throw new AbstractMethodError();\n    }\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      throw new AbstractMethodError();\n    }\n  }]);\n\n  return Hash;\n}();\n\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nvar BulkUpdateDecorator = /*#__PURE__*/function (_Hash) {\n  _inherits(BulkUpdateDecorator, _Hash);\n\n  var _super = _createSuper(BulkUpdateDecorator);\n\n  /**\n   * @param {Hash} hash hash\n   */\n  function BulkUpdateDecorator(hash) {\n    var _this;\n\n    _classCallCheck(this, BulkUpdateDecorator);\n\n    _this = _super.call(this);\n    _this.hash = hash;\n    _this.buffer = \"\";\n    return _this;\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  _createClass(BulkUpdateDecorator, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n        if (this.buffer.length > 0) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n\n        this.hash.update(data, inputEncoding);\n      } else {\n        this.buffer += data;\n\n        if (this.buffer.length > BULK_SIZE) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n      }\n\n      var digestResult = this.hash.digest(encoding);\n      return typeof digestResult === \"string\" ? digestResult : digestResult.toString();\n    }\n  }]);\n\n  return BulkUpdateDecorator;\n}(Hash);\n/**\n * istanbul ignore next\n */\n\n\nvar DebugHash = /*#__PURE__*/function (_Hash2) {\n  _inherits(DebugHash, _Hash2);\n\n  var _super2 = _createSuper(DebugHash);\n\n  function DebugHash() {\n    var _this2;\n\n    _classCallCheck(this, DebugHash);\n\n    _this2 = _super2.call(this);\n    _this2.string = \"\";\n    return _this2;\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  _createClass(DebugHash, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (typeof data !== \"string\") data = data.toString(\"utf-8\");\n      this.string += data;\n      return this;\n    }\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      return this.string.replace(/[^a-z0-9]+/gi, function (m) {\n        return Buffer.from(m).toString(\"hex\");\n      });\n    }\n  }]);\n\n  return DebugHash;\n}(Hash);\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\n\n\nmodule.exports = function (algorithm) {\n  if (typeof algorithm === \"function\") {\n    return new BulkUpdateDecorator(new algorithm());\n  }\n\n  switch (algorithm) {\n    // TODO add non-cryptographic algorithm here\n    case \"debug\":\n      return new DebugHash();\n\n    default:\n      return new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}