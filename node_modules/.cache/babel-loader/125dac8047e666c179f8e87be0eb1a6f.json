{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = function generate_errorMessage(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n\n  if (it.createErrors !== false) {\n    var INTERPOLATION = /\\$\\{[^\\}]+\\}/;\n    var INTERPOLATION_REPLACE = /\\$\\{([^\\}]+)\\}/g;\n    var EMPTY_STR = /^\\'\\'\\s*\\+\\s*|\\s*\\+\\s*\\'\\'$/g;\n    var $config = it.self.getKeyword($keyword).config,\n        $dataPath = '_em_dataPath' + $lvl,\n        $i = '_em_i' + $lvl,\n        $key = '_em_key' + $lvl,\n        $keyProp = '_em_keyProp' + $lvl,\n        $err = '_em_err' + $lvl,\n        $child = '_em_child' + $lvl,\n        $childKeyword = '_em_childKeyword' + $lvl,\n        $matches = '_em_matches' + $lvl,\n        $isArray = '_em_isArray' + $lvl,\n        $errors = '_em_errors' + $lvl,\n        $message = '_em_message' + $lvl,\n        $paramsErrors = '_em_paramsErrors' + $lvl,\n        $propParam = '_em_propParam' + $lvl,\n        $keywordPropParams = '_em_keywordPropParams' + $lvl,\n        $templates = '_em_templates' + $lvl,\n        $errSchemaPathString = it.util.toQuotedString(it.errSchemaPath);\n    out += ' if (errors > 0) { var ' + $dataPath + ' = (dataPath || \\'\\') + ' + it.errorPath + '; var ' + $i + ', ' + $err + ', ' + $errors + '; ';\n\n    if (_typeof($schema) == 'object') {\n      var $keywordErrors = {},\n          $keywordPropErrors = {},\n          $childErrors = {\n        properties: {},\n        items: {}\n      },\n          $hasKeywordProps = false,\n          $hasProperties = false,\n          $hasItems = false;\n\n      for (var $k in $schema) {\n        switch ($k) {\n          case 'properties':\n            for (var $prop in $schema.properties) {\n              $hasProperties = true;\n              $childErrors.properties[$prop] = [];\n            }\n\n            break;\n\n          case 'items':\n            for (var $item = 0; $item < $schema.items.length; $item++) {\n              $hasItems = true;\n              $childErrors.items[$item] = [];\n            }\n\n            break;\n\n          default:\n            if (_typeof($schema[$k]) == 'object') {\n              $hasKeywordProps = true;\n              $keywordPropErrors[$k] = {};\n\n              for (var $prop in $schema[$k]) {\n                $keywordPropErrors[$k][$prop] = [];\n              }\n            } else {\n              $keywordErrors[$k] = [];\n            }\n\n        }\n      }\n\n      var $keywordErrorsArr = Object.keys($keywordErrors);\n\n      if ($keywordErrorsArr.length) {\n        out += ' ' + $i + ' = 0; ' + $errors + ' = ' + JSON.stringify($keywordErrors) + ';  var ' + $templates + ' = { ';\n        var $comma = false;\n        var arr1 = $keywordErrorsArr;\n\n        if (arr1) {\n          var $k,\n              i1 = -1,\n              l1 = arr1.length - 1;\n\n          while (i1 < l1) {\n            $k = arr1[i1 += 1];\n\n            if (INTERPOLATION.test($schema[$k])) {\n              if ($comma) {\n                out += ',';\n              }\n\n              out += '' + it.util.toQuotedString($k) + ': ' + templateFunc($schema[$k]) + ' ';\n              $comma = true;\n            }\n          }\n        }\n\n        out += ' }; while (' + $i + ' < errors) { ' + $err + ' = vErrors[' + $i + ']; if (  ' + $err + '.keyword != \\'' + $keyword + '\\' ';\n\n        if ($config.options.keepErrors) {\n          out += ' && !' + $err + '.emUsed ';\n        }\n\n        out += ' && ' + $err + '.keyword in ' + $errors + ' && ' + $err + '.dataPath == ' + $dataPath + ' && ' + $err + '.schemaPath.indexOf(' + $errSchemaPathString + ') == 0 && /^\\\\/[^\\\\/]*$/.test(' + $err + '.schemaPath.slice(' + it.errSchemaPath.length + '))) { ' + $errors + '[' + $err + '.keyword].push(' + $err + ');  ';\n\n        if ($config.options.keepErrors) {\n          out += ' ' + $err + '.emUsed = true; ';\n        } else {\n          out += ' vErrors.splice(' + $i + ', 1); errors--; ';\n        }\n\n        out += ' } else { ' + $i + '++; } } ';\n\n        if ($config.options.singleError) {\n          out += ' var ' + $message + ' = \\'\\'; var ' + $paramsErrors + ' = []; ';\n        }\n\n        out += ' for (var ' + $key + ' in ' + $errors + ') { if (' + $errors + '[' + $key + '].length) { ';\n\n        if ($config.options.singleError) {\n          out += ' if (' + $message + ') { ' + $message + ' += ';\n\n          if (typeof $config.options.singleError == 'string') {\n            out += ' ' + it.util.toQuotedString($config.options.singleError) + ' ';\n          } else {\n            out += ' \\'; \\' ';\n          }\n\n          out += '; } ' + $message + ' +=   ' + $key + ' in ' + $templates + ' ? ' + $templates + '[' + $key + '] () : validate.schema' + $schemaPath + '[' + $key + ']; ' + $paramsErrors + ' = ' + $paramsErrors + '.concat(' + $errors + '[' + $key + ']); } } ';\n        } else {\n          out += ' var ' + $message + ' =   ' + $key + ' in ' + $templates + ' ? ' + $templates + '[' + $key + '] () : validate.schema' + $schemaPath + '[' + $key + ']; var ' + $paramsErrors + ' = ' + $errors + '[' + $key + ']; ';\n        }\n\n        out += '  var err = { keyword: \\'' + $keyword + '\\' , dataPath: ' + $dataPath + ' , schemaPath: ' + $errSchemaPathString + ' + \\'/' + $keyword + '\\' , params: { errors: ' + $paramsErrors + ' } , message: ' + $message + ' ';\n\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n        }\n\n        out += ' };  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\n        if (!$config.options.singleError) {\n          out += ' } } ';\n        }\n      }\n\n      if ($hasKeywordProps) {\n        out += ' ' + $i + ' = 0; ' + $errors + ' = ' + JSON.stringify($keywordPropErrors) + '; var ' + $paramsErrors + ', ' + $propParam + '; var ' + $keywordPropParams + ' = ' + JSON.stringify($config.KEYWORD_PROPERTY_PARAMS) + ';  var ' + $templates + ' = { ';\n        var $comma = false;\n        var arr2 = Object.keys($keywordPropErrors);\n\n        if (arr2) {\n          var $k,\n              i2 = -1,\n              l2 = arr2.length - 1;\n\n          while (i2 < l2) {\n            $k = arr2[i2 += 1];\n            var $keywordMsgs = $schema[$k];\n\n            if ($comma) {\n              out += ',';\n            }\n\n            out += '' + it.util.toQuotedString($k) + ': { ';\n            $comma = true;\n            var $innerComma = false;\n            var arr3 = Object.keys($keywordMsgs);\n\n            if (arr3) {\n              var $prop,\n                  i3 = -1,\n                  l3 = arr3.length - 1;\n\n              while (i3 < l3) {\n                $prop = arr3[i3 += 1];\n\n                if (INTERPOLATION.test($keywordMsgs[$prop])) {\n                  if ($innerComma) {\n                    out += ',';\n                  }\n\n                  out += '' + it.util.toQuotedString($prop) + ': ' + templateFunc($keywordMsgs[$prop]) + ' ';\n                  $innerComma = true;\n                }\n              }\n            }\n\n            out += ' } ';\n          }\n        }\n\n        out += ' }; while (' + $i + ' < errors) { ' + $err + ' = vErrors[' + $i + ']; if (  ' + $err + '.keyword != \\'' + $keyword + '\\' ';\n\n        if ($config.options.keepErrors) {\n          out += ' && !' + $err + '.emUsed ';\n        }\n\n        out += ' && ' + $err + '.keyword in ' + $errors + ' && ' + $err + '.dataPath == ' + $dataPath + ' && ' + $err + '.schemaPath.indexOf(' + $errSchemaPathString + ') == 0 && /^\\\\/[^\\\\/]*$/.test(' + $err + '.schemaPath.slice(' + it.errSchemaPath.length + '))) { ' + $propParam + ' = ' + $keywordPropParams + '[' + $err + '.keyword]; ' + $paramsErrors + ' = ' + $errors + '[' + $err + '.keyword][' + $err + '.params[' + $propParam + ']]; if (' + $paramsErrors + ') { ' + $paramsErrors + '.push(' + $err + ');  ';\n\n        if ($config.options.keepErrors) {\n          out += ' ' + $err + '.emUsed = true; ';\n        } else {\n          out += ' vErrors.splice(' + $i + ', 1); errors--; ';\n        }\n\n        out += ' } else { ' + $i + '++; } } else { ' + $i + '++; } } for (var ' + $key + ' in ' + $errors + ') { for (var ' + $keyProp + ' in ' + $errors + '[' + $key + ']) { ' + $paramsErrors + ' = ' + $errors + '[' + $key + '][' + $keyProp + ']; if (' + $paramsErrors + '.length) { var ' + $message + ' =   ' + $key + ' in ' + $templates + ' && ' + $keyProp + ' in ' + $templates + '[' + $key + '] ? ' + $templates + '[' + $key + '][' + $keyProp + '] () : validate.schema' + $schemaPath + '[' + $key + '][' + $keyProp + '];  var err = { keyword: \\'' + $keyword + '\\' , dataPath: ' + $dataPath + ' , schemaPath: ' + $errSchemaPathString + ' + \\'/' + $keyword + '\\' , params: { errors: ' + $paramsErrors + ' } , message: ' + $message + ' ';\n\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n        }\n\n        out += ' };  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } } ';\n      }\n\n      if ($hasProperties || $hasItems) {\n        out += ' var ' + $isArray + ' = Array.isArray(' + $data + '); if ';\n\n        if ($hasProperties && $hasItems) {\n          out += ' (typeof ' + $data + ' == \\'object\\') { ';\n          var $childProp = '[' + $childKeyword + ']';\n          out += ' ' + $i + ' = 0; if (' + $isArray + ') { var ' + $childKeyword + ' = \\'items\\'; ' + $errors + ' = ' + JSON.stringify($childErrors.items) + ';    ';\n\n          var _keysArray = Object.keys($childErrors.items);\n\n          out += ' var ' + $templates + ' = { ';\n          var $comma = false;\n          var arr4 = _keysArray;\n\n          if (arr4) {\n            var $k,\n                i4 = -1,\n                l4 = arr4.length - 1;\n\n            while (i4 < l4) {\n              $k = arr4[i4 += 1];\n\n              if (INTERPOLATION.test($schema.items[$k])) {\n                if ($comma) {\n                  out += ',';\n                }\n\n                out += '' + it.util.toQuotedString($k) + ': ' + templateFunc($schema.items[$k]) + ' ';\n                $comma = true;\n              }\n            }\n          }\n\n          out += ' }; } else { var ' + $childKeyword + ' = \\'properties\\'; ' + $errors + ' =  ' + JSON.stringify($childErrors.properties) + ';    ';\n\n          var _keysArray = Object.keys($childErrors.properties);\n\n          out += ' var ' + $templates + ' = { ';\n          var $comma = false;\n          var arr5 = _keysArray;\n\n          if (arr5) {\n            var $k,\n                i5 = -1,\n                l5 = arr5.length - 1;\n\n            while (i5 < l5) {\n              $k = arr5[i5 += 1];\n\n              if (INTERPOLATION.test($schema.properties[$k])) {\n                if ($comma) {\n                  out += ',';\n                }\n\n                out += '' + it.util.toQuotedString($k) + ': ' + templateFunc($schema.properties[$k]) + ' ';\n                $comma = true;\n              }\n            }\n          }\n\n          out += ' }; } ';\n        } else if ($hasProperties) {\n          out += ' (typeof ' + $data + ' == \\'object\\' && !' + $isArray + ') { ';\n          var $childProp = '.properties';\n          out += ' ' + $i + ' = 0; ' + $errors + ' = ' + JSON.stringify($childErrors.properties) + ';  ';\n\n          var _keysArray = Object.keys($childErrors.properties);\n\n          out += ' var ' + $templates + ' = { ';\n          var $comma = false;\n          var arr6 = _keysArray;\n\n          if (arr6) {\n            var $k,\n                i6 = -1,\n                l6 = arr6.length - 1;\n\n            while (i6 < l6) {\n              $k = arr6[i6 += 1];\n\n              if (INTERPOLATION.test($schema.properties[$k])) {\n                if ($comma) {\n                  out += ',';\n                }\n\n                out += '' + it.util.toQuotedString($k) + ': ' + templateFunc($schema.properties[$k]) + ' ';\n                $comma = true;\n              }\n            }\n          }\n\n          out += ' }; ';\n        } else {\n          out += ' (' + $isArray + ') { ';\n          var $childProp = '.items';\n          out += ' ' + $i + ' = 0; ' + $errors + ' = ' + JSON.stringify($childErrors.items) + ';  ';\n\n          var _keysArray = Object.keys($childErrors.items);\n\n          out += ' var ' + $templates + ' = { ';\n          var $comma = false;\n          var arr7 = _keysArray;\n\n          if (arr7) {\n            var $k,\n                i7 = -1,\n                l7 = arr7.length - 1;\n\n            while (i7 < l7) {\n              $k = arr7[i7 += 1];\n\n              if (INTERPOLATION.test($schema.items[$k])) {\n                if ($comma) {\n                  out += ',';\n                }\n\n                out += '' + it.util.toQuotedString($k) + ': ' + templateFunc($schema.items[$k]) + ' ';\n                $comma = true;\n              }\n            }\n          }\n\n          out += ' }; ';\n        }\n\n        out += ' var ' + $child + ', ' + $matches + '; while (' + $i + ' < errors) { ' + $err + ' = vErrors[' + $i + ']; if (  ' + $err + '.keyword != \\'' + $keyword + '\\' ';\n\n        if ($config.options.keepErrors) {\n          out += ' && !' + $err + '.emUsed ';\n        }\n\n        out += ' && ' + $err + '.dataPath.indexOf(' + $dataPath + ') == 0 && (' + $matches + ' = ' + $err + '.dataPath.slice(' + $dataPath + '.length).match(/^\\\\/([^\\\\/]*)(?:\\\\/|$)/), ' + $child + ' = ' + $matches + ' && ' + $matches + '[1].replace(/~1/g, \\'/\\').replace(/~0/g, \\'~\\') ) !== undefined && ' + $child + ' in ' + $errors + ') { ' + $errors + '[' + $child + '].push(' + $err + ');  ';\n\n        if ($config.options.keepErrors) {\n          out += ' ' + $err + '.emUsed = true; ';\n        } else {\n          out += ' vErrors.splice(' + $i + ', 1); errors--; ';\n        }\n\n        out += ' } else { ' + $i + '++; } } for (var ' + $key + ' in ' + $errors + ') { if (' + $errors + '[' + $key + '].length) { var err = { keyword: \\'' + $keyword + '\\' , dataPath: ' + $dataPath + ' + \\'/\\' + ' + $key + '.replace(/~/g, \\'~0\\').replace(/\\\\//g, \\'~1\\') , schemaPath: ' + $errSchemaPathString + ' + \\'/' + $keyword + '\\' , params: { errors: ' + $errors + '[' + $key + '] } , message: ' + $key + ' in ' + $templates + ' ? ' + $templates + '[' + $key + '] () : validate.schema' + $schemaPath + $childProp + '[' + $key + '] ';\n\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n        }\n\n        out += ' };  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } }  }  ';\n      }\n    }\n\n    var $schemaMessage = typeof $schema == 'string' ? $schema : $schema._;\n\n    if ($schemaMessage) {\n      out += ' ' + $i + ' = 0; ' + $errors + ' = []; while (' + $i + ' < errors) { ' + $err + ' = vErrors[' + $i + ']; if (  ' + $err + '.keyword != \\'' + $keyword + '\\' ';\n\n      if ($config.options.keepErrors) {\n        out += ' && !' + $err + '.emUsed ';\n      }\n\n      out += ' && (' + $err + '.dataPath == ' + $dataPath + ' || (' + $err + '.dataPath.indexOf(' + $dataPath + ') == 0 && ' + $err + '.dataPath[' + $dataPath + '.length] == \\'/\\')) && ' + $err + '.schemaPath.indexOf(' + $errSchemaPathString + ') == 0 && ' + $err + '.schemaPath[' + it.errSchemaPath.length + '] == \\'/\\') { ' + $errors + '.push(' + $err + ');  ';\n\n      if ($config.options.keepErrors) {\n        out += ' ' + $err + '.emUsed = true; ';\n      } else {\n        out += ' vErrors.splice(' + $i + ', 1); errors--; ';\n      }\n\n      out += ' } else { ' + $i + '++; } } if (' + $errors + '.length) { var err = { keyword: \\'' + $keyword + '\\' , dataPath: ' + $dataPath + ' , schemaPath: ' + $errSchemaPathString + ' + \\'/' + $keyword + '\\' , params: { errors: ' + $errors + ' } , message: ' + templateExpr($schemaMessage) + ' ';\n\n      if (it.opts.verbose) {\n        out += ' , schema: ' + it.util.toQuotedString($schemaMessage) + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' };  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\n    }\n\n    out += ' }';\n  }\n\n  function templateExpr(str) {\n    str = it.util.escapeQuotes(str);\n    if (!INTERPOLATION.test(str)) return \"'\" + str + \"'\";\n    var expr = \"'\" + str.replace(INTERPOLATION_REPLACE, function ($0, $1) {\n      return \"' + JSON.stringify(\" + it.util.getData($1, $dataLvl, it.dataPathArr) + \") + '\";\n    }) + \"'\";\n    return expr.replace(EMPTY_STR, '');\n  }\n\n  function templateFunc(str) {\n    return 'function() { return ' + templateExpr(str) + '; }';\n  }\n\n  return out;\n};","map":null,"metadata":{},"sourceType":"module"}