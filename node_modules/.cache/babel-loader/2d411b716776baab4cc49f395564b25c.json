{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function ResultPlugin(source) {\n    _classCallCheck(this, ResultPlugin);\n\n    this.source = source;\n  }\n\n  _createClass(ResultPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      this.source.tapAsync(\"ResultPlugin\", function (request, resolverContext, callback) {\n        var obj = Object.assign({}, request);\n        if (resolverContext.log) resolverContext.log(\"reporting result \" + obj.path);\n        resolver.hooks.result.callAsync(obj, resolverContext, function (err) {\n          if (err) return callback(err);\n          callback(null, obj);\n        });\n      });\n    }\n  }]);\n\n  return ResultPlugin;\n}();","map":null,"metadata":{},"sourceType":"module"}