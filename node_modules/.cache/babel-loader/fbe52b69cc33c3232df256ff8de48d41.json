{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n/** @typedef {import(\"../ChunkTemplate\")} ChunkTemplate */\n\n\nvar getEntryInfo = function getEntryInfo(chunk) {\n  return [chunk.entryModule].filter(Boolean).map(function (m) {\n    return [m.id].concat(Array.from(chunk.groupsIterable)[0].chunks.filter(function (c) {\n      return c !== chunk;\n    }).map(function (c) {\n      return c.id;\n    }));\n  });\n};\n\nvar JsonpChunkTemplatePlugin = /*#__PURE__*/function () {\n  function JsonpChunkTemplatePlugin() {\n    _classCallCheck(this, JsonpChunkTemplatePlugin);\n  }\n\n  _createClass(JsonpChunkTemplatePlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * @param {ChunkTemplate} chunkTemplate the chunk template\n     * @returns {void}\n     */\n    function apply(chunkTemplate) {\n      chunkTemplate.hooks.render.tap(\"JsonpChunkTemplatePlugin\", function (modules, chunk) {\n        var jsonpFunction = chunkTemplate.outputOptions.jsonpFunction;\n        var globalObject = chunkTemplate.outputOptions.globalObject;\n        var source = new ConcatSource();\n        var prefetchChunks = chunk.getChildIdsByOrders().prefetch;\n        source.add(\"(\".concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] = \").concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] || []).push([\").concat(JSON.stringify(chunk.ids), \",\"));\n        source.add(modules);\n        var entries = getEntryInfo(chunk);\n\n        if (entries.length > 0) {\n          source.add(\",\".concat(JSON.stringify(entries)));\n        } else if (prefetchChunks && prefetchChunks.length) {\n          source.add(\",0\");\n        }\n\n        if (prefetchChunks && prefetchChunks.length) {\n          source.add(\",\".concat(JSON.stringify(prefetchChunks)));\n        }\n\n        source.add(\"])\");\n        return source;\n      });\n      chunkTemplate.hooks.hash.tap(\"JsonpChunkTemplatePlugin\", function (hash) {\n        hash.update(\"JsonpChunkTemplatePlugin\");\n        hash.update(\"4\");\n        hash.update(\"\".concat(chunkTemplate.outputOptions.jsonpFunction));\n        hash.update(\"\".concat(chunkTemplate.outputOptions.globalObject));\n      });\n      chunkTemplate.hooks.hashForChunk.tap(\"JsonpChunkTemplatePlugin\", function (hash, chunk) {\n        hash.update(JSON.stringify(getEntryInfo(chunk)));\n        hash.update(JSON.stringify(chunk.getChildIdsByOrders().prefetch) || \"\");\n      });\n    }\n  }]);\n\n  return JsonpChunkTemplatePlugin;\n}();\n\nmodule.exports = JsonpChunkTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}