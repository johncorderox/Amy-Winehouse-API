{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar identifierUtils = require(\"../util/identifier\");\n\nvar _require = require(\"../util/SetHelpers\"),\n    intersect = _require.intersect;\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../../schemas/plugins/optimize/AggressiveSplittingPlugin.json\");\n/** @typedef {import(\"../../declarations/plugins/optimize/AggressiveSplittingPlugin\").AggressiveSplittingPluginOptions} AggressiveSplittingPluginOptions */\n\n\nvar moveModuleBetween = function moveModuleBetween(oldChunk, newChunk) {\n  return function (module) {\n    oldChunk.moveModule(module, newChunk);\n  };\n};\n\nvar isNotAEntryModule = function isNotAEntryModule(entryModule) {\n  return function (module) {\n    return entryModule !== module;\n  };\n};\n\nvar AggressiveSplittingPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {AggressiveSplittingPluginOptions=} options options object\n   */\n  function AggressiveSplittingPlugin(options) {\n    _classCallCheck(this, AggressiveSplittingPlugin);\n\n    if (!options) options = {};\n    validateOptions(schema, options, \"Aggressive Splitting Plugin\");\n    this.options = options;\n\n    if (typeof this.options.minSize !== \"number\") {\n      this.options.minSize = 30 * 1024;\n    }\n\n    if (typeof this.options.maxSize !== \"number\") {\n      this.options.maxSize = 50 * 1024;\n    }\n\n    if (typeof this.options.chunkOverhead !== \"number\") {\n      this.options.chunkOverhead = 0;\n    }\n\n    if (typeof this.options.entryChunkMultiplicator !== \"number\") {\n      this.options.entryChunkMultiplicator = 1;\n    }\n  }\n\n  _createClass(AggressiveSplittingPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"AggressiveSplittingPlugin\", function (compilation) {\n        var needAdditionalSeal = false;\n        var newSplits;\n        var fromAggressiveSplittingSet;\n        var chunkSplitDataMap;\n        compilation.hooks.optimize.tap(\"AggressiveSplittingPlugin\", function () {\n          newSplits = [];\n          fromAggressiveSplittingSet = new Set();\n          chunkSplitDataMap = new Map();\n        });\n        compilation.hooks.optimizeChunksAdvanced.tap(\"AggressiveSplittingPlugin\", function (chunks) {\n          // Precompute stuff\n          var nameToModuleMap = new Map();\n          var moduleToNameMap = new Map();\n\n          var _iterator = _createForOfIteratorHelper(compilation.modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var m = _step.value;\n              var name = identifierUtils.makePathsRelative(compiler.context, m.identifier(), compilation.cache);\n              nameToModuleMap.set(name, m);\n              moduleToNameMap.set(m, name);\n            } // Check used chunk ids\n\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var usedIds = new Set();\n\n          var _iterator2 = _createForOfIteratorHelper(chunks),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var chunk = _step2.value;\n              usedIds.add(chunk.id);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var recordedSplits = compilation.records && compilation.records.aggressiveSplits || [];\n          var usedSplits = newSplits ? recordedSplits.concat(newSplits) : recordedSplits;\n          var minSize = _this.options.minSize;\n          var maxSize = _this.options.maxSize;\n\n          var applySplit = function applySplit(splitData) {\n            // Cannot split if id is already taken\n            if (splitData.id !== undefined && usedIds.has(splitData.id)) {\n              return false;\n            } // Get module objects from names\n\n\n            var selectedModules = splitData.modules.map(function (name) {\n              return nameToModuleMap.get(name);\n            }); // Does the modules exist at all?\n\n            if (!selectedModules.every(Boolean)) return false; // Check if size matches (faster than waiting for hash)\n\n            var size = selectedModules.reduce(function (sum, m) {\n              return sum + m.size();\n            }, 0);\n            if (size !== splitData.size) return false; // get chunks with all modules\n\n            var selectedChunks = intersect(selectedModules.map(function (m) {\n              return new Set(m.chunksIterable);\n            })); // No relevant chunks found\n\n            if (selectedChunks.size === 0) return false; // The found chunk is already the split or similar\n\n            if (selectedChunks.size === 1 && Array.from(selectedChunks)[0].getNumberOfModules() === selectedModules.length) {\n              var chunk = Array.from(selectedChunks)[0];\n              if (fromAggressiveSplittingSet.has(chunk)) return false;\n              fromAggressiveSplittingSet.add(chunk);\n              chunkSplitDataMap.set(chunk, splitData);\n              return true;\n            } // split the chunk into two parts\n\n\n            var newChunk = compilation.addChunk();\n            newChunk.chunkReason = \"aggressive splitted\";\n\n            var _iterator3 = _createForOfIteratorHelper(selectedChunks),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _chunk = _step3.value;\n                selectedModules.forEach(moveModuleBetween(_chunk, newChunk));\n\n                _chunk.split(newChunk);\n\n                _chunk.name = null;\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            fromAggressiveSplittingSet.add(newChunk);\n            chunkSplitDataMap.set(newChunk, splitData);\n\n            if (splitData.id !== null && splitData.id !== undefined) {\n              newChunk.id = splitData.id;\n            }\n\n            return true;\n          }; // try to restore to recorded splitting\n\n\n          var changed = false;\n\n          for (var j = 0; j < usedSplits.length; j++) {\n            var splitData = usedSplits[j];\n            if (applySplit(splitData)) changed = true;\n          } // for any chunk which isn't splitted yet, split it and create a new entry\n          // start with the biggest chunk\n\n\n          var sortedChunks = chunks.slice().sort(function (a, b) {\n            var diff1 = b.modulesSize() - a.modulesSize();\n            if (diff1) return diff1;\n            var diff2 = a.getNumberOfModules() - b.getNumberOfModules();\n            if (diff2) return diff2;\n            var modulesA = Array.from(a.modulesIterable);\n            var modulesB = Array.from(b.modulesIterable);\n            modulesA.sort();\n            modulesB.sort();\n            var aI = modulesA[Symbol.iterator]();\n            var bI = modulesB[Symbol.iterator](); // eslint-disable-next-line no-constant-condition\n\n            while (true) {\n              var aItem = aI.next();\n              var bItem = bI.next();\n              if (aItem.done) return 0;\n              var aModuleIdentifier = aItem.value.identifier();\n              var bModuleIdentifier = bItem.value.identifier();\n              if (aModuleIdentifier > bModuleIdentifier) return -1;\n              if (aModuleIdentifier < bModuleIdentifier) return 1;\n            }\n          });\n\n          var _iterator4 = _createForOfIteratorHelper(sortedChunks),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _chunk2 = _step4.value;\n              if (fromAggressiveSplittingSet.has(_chunk2)) continue;\n\n              var size = _chunk2.modulesSize();\n\n              if (size > maxSize && _chunk2.getNumberOfModules() > 1) {\n                var modules = _chunk2.getModules().filter(isNotAEntryModule(_chunk2.entryModule)).sort(function (a, b) {\n                  a = a.identifier();\n                  b = b.identifier();\n                  if (a > b) return 1;\n                  if (a < b) return -1;\n                  return 0;\n                });\n\n                var selectedModules = [];\n                var selectedModulesSize = 0;\n\n                for (var k = 0; k < modules.length; k++) {\n                  var _module = modules[k];\n\n                  var newSize = selectedModulesSize + _module.size();\n\n                  if (newSize > maxSize && selectedModulesSize >= minSize) {\n                    break;\n                  }\n\n                  selectedModulesSize = newSize;\n                  selectedModules.push(_module);\n                }\n\n                if (selectedModules.length === 0) continue;\n                var _splitData = {\n                  modules: selectedModules.map(function (m) {\n                    return moduleToNameMap.get(m);\n                  }).sort(),\n                  size: selectedModulesSize\n                };\n\n                if (applySplit(_splitData)) {\n                  newSplits = (newSplits || []).concat(_splitData);\n                  changed = true;\n                }\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          if (changed) return true;\n        });\n        compilation.hooks.recordHash.tap(\"AggressiveSplittingPlugin\", function (records) {\n          // 4. save made splittings to records\n          var allSplits = new Set();\n          var invalidSplits = new Set(); // Check if some splittings are invalid\n          // We remove invalid splittings and try again\n\n          var _iterator5 = _createForOfIteratorHelper(compilation.chunks),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _chunk3 = _step5.value;\n\n              var _splitData3 = chunkSplitDataMap.get(_chunk3);\n\n              if (_splitData3 !== undefined) {\n                if (_splitData3.hash && _chunk3.hash !== _splitData3.hash) {\n                  // Split was successful, but hash doesn't equal\n                  // We can throw away the split since it's useless now\n                  invalidSplits.add(_splitData3);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          if (invalidSplits.size > 0) {\n            records.aggressiveSplits = records.aggressiveSplits.filter(function (splitData) {\n              return !invalidSplits.has(splitData);\n            });\n            needAdditionalSeal = true;\n          } else {\n            // set hash and id values on all (new) splittings\n            var _iterator6 = _createForOfIteratorHelper(compilation.chunks),\n                _step6;\n\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var chunk = _step6.value;\n\n                var _splitData2 = chunkSplitDataMap.get(chunk);\n\n                if (_splitData2 !== undefined) {\n                  _splitData2.hash = chunk.hash;\n                  _splitData2.id = chunk.id;\n                  allSplits.add(_splitData2); // set flag for stats\n\n                  chunk.recorded = true;\n                }\n              } // Also add all unused historial splits (after the used ones)\n              // They can still be used in some future compilation\n\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n\n            var recordedSplits = compilation.records && compilation.records.aggressiveSplits;\n\n            if (recordedSplits) {\n              var _iterator7 = _createForOfIteratorHelper(recordedSplits),\n                  _step7;\n\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  var splitData = _step7.value;\n                  if (!invalidSplits.has(splitData)) allSplits.add(splitData);\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n            } // record all splits\n\n\n            records.aggressiveSplits = Array.from(allSplits);\n            needAdditionalSeal = false;\n          }\n        });\n        compilation.hooks.needAdditionalSeal.tap(\"AggressiveSplittingPlugin\", function () {\n          if (needAdditionalSeal) {\n            needAdditionalSeal = false;\n            return true;\n          }\n        });\n      });\n    }\n  }]);\n\n  return AggressiveSplittingPlugin;\n}();\n\nmodule.exports = AggressiveSplittingPlugin;","map":null,"metadata":{},"sourceType":"module"}