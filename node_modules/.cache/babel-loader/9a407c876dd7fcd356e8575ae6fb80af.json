{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar DependencyReference = require(\"./DependencyReference\");\n\nvar ModuleDependency = require(\"./ModuleDependency\");\n\nvar Template = require(\"../Template\");\n\nvar HarmonyImportDependency = /*#__PURE__*/function (_ModuleDependency) {\n  _inherits(HarmonyImportDependency, _ModuleDependency);\n\n  var _super = _createSuper(HarmonyImportDependency);\n\n  function HarmonyImportDependency(request, originModule, sourceOrder, parserScope) {\n    var _this;\n\n    _classCallCheck(this, HarmonyImportDependency);\n\n    _this = _super.call(this, request);\n    _this.redirectedModule = undefined;\n    _this.originModule = originModule;\n    _this.sourceOrder = sourceOrder;\n    _this.parserScope = parserScope;\n    return _this;\n  }\n\n  _createClass(HarmonyImportDependency, [{\n    key: \"_module\",\n    get: function get() {\n      return this.redirectedModule || this.module;\n    }\n  }, {\n    key: \"getReference\",\n    value: function getReference() {\n      if (!this._module) return null;\n      return new DependencyReference(this._module, false, this.weak, this.sourceOrder);\n    }\n  }, {\n    key: \"getImportVar\",\n    value: function getImportVar() {\n      var importVarMap = this.parserScope.importVarMap;\n      if (!importVarMap) this.parserScope.importVarMap = importVarMap = new Map();\n      var importVar = importVarMap.get(this._module);\n      if (importVar) return importVar;\n      importVar = \"\".concat(Template.toIdentifier(\"\".concat(this.userRequest)), \"__WEBPACK_IMPORTED_MODULE_\").concat(importVarMap.size, \"__\");\n      importVarMap.set(this._module, importVar);\n      return importVar;\n    }\n  }, {\n    key: \"getImportStatement\",\n    value: function getImportStatement(update, runtime) {\n      return runtime.importStatement({\n        update: update,\n        module: this._module,\n        importVar: this.getImportVar(),\n        request: this.request,\n        originModule: this.originModule\n      });\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      _get(_getPrototypeOf(HarmonyImportDependency.prototype), \"updateHash\", this).call(this, hash);\n\n      var importedModule = this._module;\n      hash.update((importedModule && (!importedModule.buildMeta || importedModule.buildMeta.exportsType)) + \"\");\n      hash.update((importedModule && importedModule.id) + \"\");\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      _get(_getPrototypeOf(HarmonyImportDependency.prototype), \"disconnect\", this).call(this);\n\n      this.redirectedModule = undefined;\n    }\n  }]);\n\n  return HarmonyImportDependency;\n}(ModuleDependency);\n\nmodule.exports = HarmonyImportDependency;\nvar importEmittedMap = new WeakMap();\n\nHarmonyImportDependency.Template = /*#__PURE__*/function () {\n  function HarmonyImportDependencyTemplate() {\n    _classCallCheck(this, HarmonyImportDependencyTemplate);\n  }\n\n  _createClass(HarmonyImportDependencyTemplate, [{\n    key: \"apply\",\n    value: function apply(dep, source, runtime) {// no-op\n    }\n  }, {\n    key: \"getHarmonyInitOrder\",\n    value: function getHarmonyInitOrder(dep) {\n      return dep.sourceOrder;\n    }\n  }, {\n    key: \"harmonyInit\",\n    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {\n      var sourceInfo = importEmittedMap.get(source);\n\n      if (!sourceInfo) {\n        importEmittedMap.set(source, sourceInfo = {\n          emittedImports: new Map()\n        });\n      }\n\n      var key = dep._module || dep.request;\n      if (key && sourceInfo.emittedImports.get(key)) return;\n      sourceInfo.emittedImports.set(key, true);\n      var content = dep.getImportStatement(false, runtime);\n      source.insert(-1, content);\n    }\n  }], [{\n    key: \"isImportEmitted\",\n    value: function isImportEmitted(dep, source) {\n      var sourceInfo = importEmittedMap.get(source);\n      if (!sourceInfo) return false;\n      var key = dep._module || dep.request;\n      return key && sourceInfo.emittedImports.get(key);\n    }\n  }]);\n\n  return HarmonyImportDependencyTemplate;\n}();","map":null,"metadata":{},"sourceType":"module"}