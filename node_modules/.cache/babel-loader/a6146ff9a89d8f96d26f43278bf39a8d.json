{"ast":null,"code":"function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { print } from \"@webassemblyjs/wast-printer\";\nvar SHOW_LINES_AROUND_POINTER = 5;\n\nfunction repeat(_char, nb) {\n  return Array(nb).fill(_char).join(\"\");\n} // TODO(sven): allow arbitrary ast nodes\n\n\nexport function codeFrameFromAst(ast, loc) {\n  return codeFrameFromSource(print(ast), loc);\n}\nexport function codeFrameFromSource(source, loc) {\n  var start = loc.start,\n      end = loc.end;\n  var length = 1;\n\n  if (_typeof(end) === \"object\") {\n    length = end.column - start.column + 1;\n  }\n\n  return source.split(\"\\n\").reduce(function (acc, line, lineNbr) {\n    if (Math.abs(start.line - lineNbr) < SHOW_LINES_AROUND_POINTER) {\n      acc += line + \"\\n\";\n    } // Add a new line with the pointer padded left\n\n\n    if (lineNbr === start.line - 1) {\n      acc += repeat(\" \", start.column - 1);\n      acc += repeat(\"^\", length);\n      acc += \"\\n\";\n    }\n\n    return acc;\n  }, \"\");\n}","map":null,"metadata":{},"sourceType":"module"}