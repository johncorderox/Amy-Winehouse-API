{"ast":null,"code":"'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    macro: function macro(schema) {\n      var schemas = [];\n\n      for (var pointer in schema) {\n        schemas.push(getSchema(pointer, schema[pointer]));\n      }\n\n      return {\n        'allOf': schemas\n      };\n    },\n    metaSchema: {\n      type: 'object',\n      propertyNames: {\n        type: 'string',\n        format: 'json-pointer'\n      },\n      additionalProperties: util.metaSchemaRef(ajv)\n    }\n  };\n  ajv.addKeyword('deepProperties', defFunc.definition);\n  return ajv;\n};\n\nfunction getSchema(jsonPointer, schema) {\n  var segments = jsonPointer.split('/');\n  var rootSchema = {};\n  var pointerSchema = rootSchema;\n\n  for (var i = 1; i < segments.length; i++) {\n    var segment = segments[i];\n    var isLast = i == segments.length - 1;\n    segment = unescapeJsonPointer(segment);\n    var properties = pointerSchema.properties = {};\n    var items = undefined;\n\n    if (/[0-9]+/.test(segment)) {\n      var count = +segment;\n      items = pointerSchema.items = [];\n\n      while (count--) {\n        items.push({});\n      }\n    }\n\n    pointerSchema = isLast ? schema : {};\n    properties[segment] = pointerSchema;\n    if (items) items.push(pointerSchema);\n  }\n\n  return rootSchema;\n}\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}","map":null,"metadata":{},"sourceType":"module"}