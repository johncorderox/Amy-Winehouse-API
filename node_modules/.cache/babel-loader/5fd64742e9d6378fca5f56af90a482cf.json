{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar asyncLib = require(\"neo-async\");\n\nvar CachePlugin = /*#__PURE__*/function () {\n  function CachePlugin(cache) {\n    _classCallCheck(this, CachePlugin);\n\n    this.cache = cache || {};\n    this.FS_ACCURACY = 2000;\n  }\n\n  _createClass(CachePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      if (Array.isArray(compiler.compilers)) {\n        compiler.compilers.forEach(function (c, idx) {\n          new CachePlugin(_this.cache[idx] = _this.cache[idx] || {}).apply(c);\n        });\n      } else {\n        var registerCacheToCompiler = function registerCacheToCompiler(compiler, cache) {\n          compiler.hooks.thisCompilation.tap(\"CachePlugin\", function (compilation) {\n            compilation.cache = cache;\n            compilation.hooks.childCompiler.tap(\"CachePlugin\", function (childCompiler, compilerName, compilerIndex) {\n              var childCache;\n\n              if (!cache.children) {\n                cache.children = {};\n              }\n\n              if (!cache.children[compilerName]) {\n                cache.children[compilerName] = [];\n              }\n\n              if (cache.children[compilerName][compilerIndex]) {\n                childCache = cache.children[compilerName][compilerIndex];\n              } else {\n                cache.children[compilerName].push(childCache = {});\n              }\n\n              registerCacheToCompiler(childCompiler, childCache);\n            });\n          });\n        };\n\n        registerCacheToCompiler(compiler, this.cache);\n        compiler.hooks.watchRun.tap(\"CachePlugin\", function () {\n          _this.watching = true;\n        });\n        compiler.hooks.run.tapAsync(\"CachePlugin\", function (compiler, callback) {\n          if (!compiler._lastCompilationFileDependencies) {\n            return callback();\n          }\n\n          var fs = compiler.inputFileSystem;\n          var fileTs = compiler.fileTimestamps = new Map();\n          asyncLib.forEach(compiler._lastCompilationFileDependencies, function (file, callback) {\n            fs.stat(file, function (err, stat) {\n              if (err) {\n                if (err.code === \"ENOENT\") return callback();\n                return callback(err);\n              }\n\n              if (stat.mtime) _this.applyMtime(+stat.mtime);\n              fileTs.set(file, +stat.mtime || Infinity);\n              callback();\n            });\n          }, function (err) {\n            if (err) return callback(err);\n\n            var _iterator = _createForOfIteratorHelper(fileTs),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _ref3 = _step.value;\n\n                var _ref2 = _slicedToArray(_ref3, 2);\n\n                var file = _ref2[0];\n                var ts = _ref2[1];\n                fileTs.set(file, ts + _this.FS_ACCURACY);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            callback();\n          });\n        });\n        compiler.hooks.afterCompile.tap(\"CachePlugin\", function (compilation) {\n          compilation.compiler._lastCompilationFileDependencies = compilation.fileDependencies;\n          compilation.compiler._lastCompilationContextDependencies = compilation.contextDependencies;\n        });\n      }\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"applyMtime\",\n    value: function applyMtime(mtime) {\n      if (this.FS_ACCURACY > 1 && mtime % 2 !== 0) this.FS_ACCURACY = 1;else if (this.FS_ACCURACY > 10 && mtime % 20 !== 0) this.FS_ACCURACY = 10;else if (this.FS_ACCURACY > 100 && mtime % 200 !== 0) this.FS_ACCURACY = 100;else if (this.FS_ACCURACY > 1000 && mtime % 2000 !== 0) this.FS_ACCURACY = 1000;\n    }\n  }]);\n\n  return CachePlugin;\n}();\n\nmodule.exports = CachePlugin;","map":null,"metadata":{},"sourceType":"module"}