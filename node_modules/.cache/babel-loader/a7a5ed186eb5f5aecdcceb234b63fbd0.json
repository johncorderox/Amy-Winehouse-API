{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar path = require(\"path\");\n\nvar BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar UnsupportedFeatureWarning = require(\"./UnsupportedFeatureWarning\");\n\nvar ParserHelpers = exports;\n\nParserHelpers.addParsedVariableToModule = function (parser, name, expression) {\n  if (!parser.state.current.addVariable) return false;\n  var deps = [];\n  parser.parse(expression, {\n    current: {\n      addDependency: function addDependency(dep) {\n        dep.userRequest = name;\n        deps.push(dep);\n      }\n    },\n    module: parser.state.module\n  });\n  parser.state.current.addVariable(name, expression, deps);\n  return true;\n};\n\nParserHelpers.requireFileAsExpression = function (context, pathToModule) {\n  var moduleJsPath = path.relative(context, pathToModule);\n\n  if (!/^[A-Z]:/i.test(moduleJsPath)) {\n    moduleJsPath = \"./\" + moduleJsPath.replace(/\\\\/g, \"/\");\n  }\n\n  return \"require(\" + JSON.stringify(moduleJsPath) + \")\";\n};\n\nParserHelpers.toConstantDependency = function (parser, value) {\n  return function constDependency(expr) {\n    var dep = new ConstDependency(value, expr.range, false);\n    dep.loc = expr.loc;\n    parser.state.current.addDependency(dep);\n    return true;\n  };\n};\n\nParserHelpers.toConstantDependencyWithWebpackRequire = function (parser, value) {\n  return function constDependencyWithWebpackRequire(expr) {\n    var dep = new ConstDependency(value, expr.range, true);\n    dep.loc = expr.loc;\n    parser.state.current.addDependency(dep);\n    return true;\n  };\n};\n\nParserHelpers.evaluateToString = function (value) {\n  return function stringExpression(expr) {\n    return new BasicEvaluatedExpression().setString(value).setRange(expr.range);\n  };\n};\n\nParserHelpers.evaluateToBoolean = function (value) {\n  return function booleanExpression(expr) {\n    return new BasicEvaluatedExpression().setBoolean(value).setRange(expr.range);\n  };\n};\n\nParserHelpers.evaluateToIdentifier = function (identifier, truthy) {\n  return function identifierExpression(expr) {\n    var evex = new BasicEvaluatedExpression().setIdentifier(identifier).setRange(expr.range);\n\n    if (truthy === true) {\n      evex = evex.setTruthy();\n    } else if (truthy === false) {\n      evex = evex.setFalsy();\n    }\n\n    return evex;\n  };\n};\n\nParserHelpers.expressionIsUnsupported = function (parser, message) {\n  return function unsupportedExpression(expr) {\n    var dep = new ConstDependency(\"(void 0)\", expr.range, false);\n    dep.loc = expr.loc;\n    parser.state.current.addDependency(dep);\n    if (!parser.state.module) return;\n    parser.state.module.warnings.push(new UnsupportedFeatureWarning(parser.state.module, message, expr.loc));\n    return true;\n  };\n};\n\nParserHelpers.skipTraversal = function skipTraversal() {\n  return true;\n};\n\nParserHelpers.approve = function approve() {\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}