{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MappingsContext = /*#__PURE__*/function () {\n  function MappingsContext() {\n    _classCallCheck(this, MappingsContext);\n\n    this.sourcesIndices = new Map();\n    this.sourcesContent = new Map();\n    this.hasSourceContent = false;\n    this.currentOriginalLine = 1;\n    this.currentSource = 0;\n    this.unfinishedGeneratedLine = false;\n  }\n\n  _createClass(MappingsContext, [{\n    key: \"ensureSource\",\n    value: function ensureSource(source, originalSource) {\n      var idx = this.sourcesIndices.get(source);\n\n      if (typeof idx === \"number\") {\n        return idx;\n      }\n\n      idx = this.sourcesIndices.size;\n      this.sourcesIndices.set(source, idx);\n      this.sourcesContent.set(source, originalSource);\n      if (typeof originalSource === \"string\") this.hasSourceContent = true;\n      return idx;\n    }\n  }, {\n    key: \"getArrays\",\n    value: function getArrays() {\n      var sources = [];\n      var sourcesContent = [];\n\n      var _iterator = _createForOfIteratorHelper(this.sourcesContent),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          sources.push(pair[0]);\n          sourcesContent.push(pair[1]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {\n        sources: sources,\n        sourcesContent: sourcesContent\n      };\n    }\n  }]);\n\n  return MappingsContext;\n}();\n\nmodule.exports = MappingsContext;","map":null,"metadata":{},"sourceType":"module"}