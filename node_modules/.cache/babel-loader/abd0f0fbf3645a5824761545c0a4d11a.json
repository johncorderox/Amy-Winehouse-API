{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Dependency = require(\"../Dependency\");\n\nvar CriticalDependencyWarning = require(\"./CriticalDependencyWarning\");\n\nvar regExpToString = function regExpToString(r) {\n  return r ? r + \"\" : \"\";\n};\n\nvar ContextDependency = /*#__PURE__*/function (_Dependency) {\n  _inherits(ContextDependency, _Dependency);\n\n  var _super = _createSuper(ContextDependency);\n\n  // options: { request, recursive, regExp, include, exclude, mode, chunkName, groupOptions }\n  function ContextDependency(options) {\n    var _this;\n\n    _classCallCheck(this, ContextDependency);\n\n    _this = _super.call(this);\n    _this.options = options;\n    _this.userRequest = _this.options.request;\n    /** @type {false | string} */\n\n    _this.critical = false;\n    _this.hadGlobalOrStickyRegExp = false;\n\n    if (_this.options.regExp.global || _this.options.regExp.sticky) {\n      _this.options.regExp = null;\n      _this.hadGlobalOrStickyRegExp = true;\n    }\n\n    return _this;\n  }\n\n  _createClass(ContextDependency, [{\n    key: \"getResourceIdentifier\",\n    value: function getResourceIdentifier() {\n      return \"context\".concat(this.options.request, \" \").concat(this.options.recursive, \" \") + \"\".concat(regExpToString(this.options.regExp), \" \").concat(regExpToString(this.options.include), \" \").concat(regExpToString(this.options.exclude), \" \") + \"\".concat(this.options.mode, \" \").concat(this.options.chunkName, \" \") + \"\".concat(JSON.stringify(this.options.groupOptions));\n    }\n  }, {\n    key: \"getWarnings\",\n    value: function getWarnings() {\n      var warnings = _get(_getPrototypeOf(ContextDependency.prototype), \"getWarnings\", this).call(this) || [];\n\n      if (this.critical) {\n        warnings.push(new CriticalDependencyWarning(this.critical));\n      }\n\n      if (this.hadGlobalOrStickyRegExp) {\n        warnings.push(new CriticalDependencyWarning(\"Contexts can't use RegExps with the 'g' or 'y' flags.\"));\n      }\n\n      return warnings;\n    }\n  }]);\n\n  return ContextDependency;\n}(Dependency); // TODO remove in webpack 5\n\n\nObject.defineProperty(ContextDependency.prototype, \"async\", {\n  configurable: false,\n  get: function get() {\n    throw new Error(\"ContextDependency.async was removed. Use ContextDependency.options.mode instead.\");\n  },\n  set: function set() {\n    throw new Error(\"ContextDependency.async was removed. Pass options.mode to constructor instead\");\n  }\n});\nmodule.exports = ContextDependency;","map":null,"metadata":{},"sourceType":"module"}