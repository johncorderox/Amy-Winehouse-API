{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar RootPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source hook\n   * @param {Array<string>} root roots\n   * @param {string | ResolveStepHook} target target hook\n   * @param {boolean=} ignoreErrors ignore error during resolving of root paths\n   */\n  function RootPlugin(source, root, target, ignoreErrors) {\n    _classCallCheck(this, RootPlugin);\n\n    this.root = root;\n    this.source = source;\n    this.target = target;\n    this._ignoreErrors = ignoreErrors;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(RootPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"RootPlugin\", function (request, resolveContext, callback) {\n        var req = request.request;\n        if (!req) return callback();\n        if (!req.startsWith(\"/\")) return callback();\n        var path = resolver.join(_this.root, req.slice(1));\n        var obj = Object.assign(request, {\n          path: path,\n          relativePath: request.relativePath && path\n        });\n        resolver.doResolve(target, obj, \"root path \".concat(_this.root), resolveContext, _this._ignoreErrors ? function (err, result) {\n          if (err) {\n            if (resolveContext.log) {\n              resolveContext.log(\"Ignored fatal error while resolving root path:\\n\".concat(err));\n            }\n\n            return callback();\n          }\n\n          if (result) return callback(null, result);\n          callback();\n        } : callback);\n      });\n    }\n  }]);\n\n  return RootPlugin;\n}();\n\nmodule.exports = RootPlugin;","map":null,"metadata":{},"sourceType":"module"}