{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ContextDependencyTemplateAsRequireCall = /*#__PURE__*/function () {\n  function ContextDependencyTemplateAsRequireCall() {\n    _classCallCheck(this, ContextDependencyTemplateAsRequireCall);\n  }\n\n  _createClass(ContextDependencyTemplateAsRequireCall, [{\n    key: \"apply\",\n    value: function apply(dep, source, runtime) {\n      var moduleExports = runtime.moduleExports({\n        module: dep.module,\n        request: dep.request\n      });\n\n      if (dep.module) {\n        if (dep.valueRange) {\n          if (Array.isArray(dep.replaces)) {\n            for (var i = 0; i < dep.replaces.length; i++) {\n              var rep = dep.replaces[i];\n              source.replace(rep.range[0], rep.range[1] - 1, rep.value);\n            }\n          }\n\n          source.replace(dep.valueRange[1], dep.range[1] - 1, \")\"); // TODO webpack 5 remove `prepend` it's no longer used\n\n          source.replace(dep.range[0], dep.valueRange[0] - 1, \"\".concat(moduleExports, \"(\").concat(typeof dep.prepend === \"string\" ? JSON.stringify(dep.prepend) : \"\"));\n        } else {\n          source.replace(dep.range[0], dep.range[1] - 1, moduleExports);\n        }\n      } else {\n        source.replace(dep.range[0], dep.range[1] - 1, moduleExports);\n      }\n    }\n  }]);\n\n  return ContextDependencyTemplateAsRequireCall;\n}();\n\nmodule.exports = ContextDependencyTemplateAsRequireCall;","map":null,"metadata":{},"sourceType":"module"}