{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar Template = require(\"./Template\");\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\n\n\nvar AmdMainTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {AmdMainTemplatePluginOptions} options the plugin options\n   */\n  function AmdMainTemplatePlugin(options) {\n    _classCallCheck(this, AmdMainTemplatePlugin);\n\n    if (!options || typeof options === \"string\") {\n      this.name = options;\n      this.requireAsWrapper = false;\n    } else {\n      this.name = options.name;\n      this.requireAsWrapper = options.requireAsWrapper;\n    }\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  _createClass(AmdMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compilation) {\n      var _this = this;\n\n      var mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate;\n\n      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {\n        var externals = chunk.getModules().filter(function (m) {\n          return m.external;\n        });\n        var externalsDepsArray = JSON.stringify(externals.map(function (m) {\n          return _typeof(m.request) === \"object\" ? m.request.amd : m.request;\n        }));\n        var externalsArguments = externals.map(function (m) {\n          return \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(m.id)), \"__\");\n        }).join(\", \");\n\n        if (_this.requireAsWrapper) {\n          return new ConcatSource(\"require(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else if (_this.name) {\n          var name = mainTemplate.getAssetPath(_this.name, {\n            hash: hash,\n            chunk: chunk\n          });\n          return new ConcatSource(\"define(\".concat(JSON.stringify(name), \", \").concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else if (externalsArguments) {\n          return new ConcatSource(\"define(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else {\n          return new ConcatSource(\"define(function() { return \", source, \"});\");\n        }\n      };\n\n      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {\n        var template = _arr[_i];\n        template.hooks.renderWithEntry.tap(\"AmdMainTemplatePlugin\", onRenderWithEntry);\n      }\n\n      mainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", function (paths) {\n        if (_this.name) {\n          paths.push(_this.name);\n        }\n\n        return paths;\n      });\n      mainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", function (hash) {\n        hash.update(\"exports amd\");\n\n        if (_this.name) {\n          hash.update(_this.name);\n        }\n      });\n    }\n  }]);\n\n  return AmdMainTemplatePlugin;\n}();\n\nmodule.exports = AmdMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}