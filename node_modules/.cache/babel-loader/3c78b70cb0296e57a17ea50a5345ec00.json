{"ast":null,"code":"var Transform = require('readable-stream').Transform;\n\nvar inherits = require('inherits');\n\nvar cyclist = require('cyclist');\n\nvar util = require('util');\n\nvar ParallelTransform = function ParallelTransform(maxParallel, opts, ontransform) {\n  if (!(this instanceof ParallelTransform)) return new ParallelTransform(maxParallel, opts, ontransform);\n\n  if (typeof maxParallel === 'function') {\n    ontransform = maxParallel;\n    opts = null;\n    maxParallel = 1;\n  }\n\n  if (typeof opts === 'function') {\n    ontransform = opts;\n    opts = null;\n  }\n\n  if (!opts) opts = {};\n  if (!opts.highWaterMark) opts.highWaterMark = Math.max(maxParallel, 16);\n  if (opts.objectMode !== false) opts.objectMode = true;\n  Transform.call(this, opts);\n  this._maxParallel = maxParallel;\n  this._ontransform = ontransform;\n  this._destroyed = false;\n  this._flushed = false;\n  this._ordered = opts.ordered !== false;\n  this._buffer = this._ordered ? cyclist(maxParallel) : [];\n  this._top = 0;\n  this._bottom = 0;\n  this._ondrain = null;\n};\n\ninherits(ParallelTransform, Transform);\n\nParallelTransform.prototype.destroy = function () {\n  if (this._destroyed) return;\n  this._destroyed = true;\n  this.emit('close');\n};\n\nParallelTransform.prototype._transform = function (chunk, enc, callback) {\n  var self = this;\n  var pos = this._top++;\n\n  this._ontransform(chunk, function (err, data) {\n    if (self._destroyed) return;\n\n    if (err) {\n      self.emit('error', err);\n      self.push(null);\n      self.destroy();\n      return;\n    }\n\n    if (self._ordered) {\n      self._buffer.put(pos, data === undefined || data === null ? null : data);\n    } else {\n      self._buffer.push(data);\n    }\n\n    self._drain();\n  });\n\n  if (this._top - this._bottom < this._maxParallel) return callback();\n  this._ondrain = callback;\n};\n\nParallelTransform.prototype._flush = function (callback) {\n  this._flushed = true;\n  this._ondrain = callback;\n\n  this._drain();\n};\n\nParallelTransform.prototype._drain = function () {\n  if (this._ordered) {\n    while (this._buffer.get(this._bottom) !== undefined) {\n      var data = this._buffer.del(this._bottom++);\n\n      if (data === null) continue;\n      this.push(data);\n    }\n  } else {\n    while (this._buffer.length > 0) {\n      var data = this._buffer.pop();\n\n      this._bottom++;\n      if (data === null) continue;\n      this.push(data);\n    }\n  }\n\n  if (!this._drained() || !this._ondrain) return;\n  var ondrain = this._ondrain;\n  this._ondrain = null;\n  ondrain();\n};\n\nParallelTransform.prototype._drained = function () {\n  var diff = this._top - this._bottom;\n  return this._flushed ? !diff : diff < this._maxParallel;\n};\n\nmodule.exports = ParallelTransform;","map":null,"metadata":{},"sourceType":"module"}