{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar t = require(\"@webassemblyjs/ast\");\n\nvar _require = require(\"@webassemblyjs/wasm-parser\"),\n    decode = _require.decode;\n\nvar _require2 = require(\"@webassemblyjs/helper-module-context\"),\n    moduleContextFromModuleAST = _require2.moduleContextFromModuleAST;\n\nvar _require3 = require(\"tapable\"),\n    Tapable = _require3.Tapable;\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nvar WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\nvar getJsIncompatibleType = function getJsIncompatibleType(signature) {\n  var _iterator = _createForOfIteratorHelper(signature.params),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var param = _step.value;\n\n      if (!JS_COMPAT_TYPES.has(param.valtype)) {\n        return \"\".concat(param.valtype, \" as parameter\");\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(signature.results),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var type = _step2.value;\n      if (!JS_COMPAT_TYPES.has(type)) return \"\".concat(type, \" as result\");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return null;\n};\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\n\nvar getJsIncompatibleTypeOfFuncSignature = function getJsIncompatibleTypeOfFuncSignature(signature) {\n  var _iterator3 = _createForOfIteratorHelper(signature.args),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var param = _step3.value;\n\n      if (!JS_COMPAT_TYPES.has(param)) {\n        return \"\".concat(param, \" as parameter\");\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var _iterator4 = _createForOfIteratorHelper(signature.result),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var type = _step4.value;\n      if (!JS_COMPAT_TYPES.has(type)) return \"\".concat(type, \" as result\");\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return null;\n};\n\nvar decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\n\nvar WebAssemblyParser = /*#__PURE__*/function (_Tapable) {\n  _inherits(WebAssemblyParser, _Tapable);\n\n  var _super = _createSuper(WebAssemblyParser);\n\n  function WebAssemblyParser(options) {\n    var _this;\n\n    _classCallCheck(this, WebAssemblyParser);\n\n    _this = _super.call(this);\n    _this.hooks = {};\n    _this.options = options;\n    return _this;\n  }\n\n  _createClass(WebAssemblyParser, [{\n    key: \"parse\",\n    value: function parse(binary, state) {\n      // flag it as ESM\n      state.module.buildMeta.exportsType = \"namespace\"; // parse it\n\n      var program = decode(binary, decoderOpts);\n      var module = program.body[0];\n      var moduleContext = moduleContextFromModuleAST(module); // extract imports and exports\n\n      var exports = state.module.buildMeta.providedExports = [];\n      var jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = [];\n      var importedGlobals = [];\n      t.traverse(module, {\n        ModuleExport: function ModuleExport(_ref) {\n          var node = _ref.node;\n          var descriptor = node.descr;\n\n          if (descriptor.exportType === \"Func\") {\n            var funcidx = descriptor.id.value;\n            /** @type {t.FuncSignature} */\n\n            var funcSignature = moduleContext.getFunction(funcidx);\n            var incompatibleType = getJsIncompatibleTypeOfFuncSignature(funcSignature);\n\n            if (incompatibleType) {\n              jsIncompatibleExports[node.name] = incompatibleType;\n            }\n          }\n\n          exports.push(node.name);\n\n          if (node.descr && node.descr.exportType === \"Global\") {\n            var refNode = importedGlobals[node.descr.id.value];\n\n            if (refNode) {\n              var dep = new WebAssemblyExportImportedDependency(node.name, refNode.module, refNode.name, refNode.descr.valtype);\n              state.module.addDependency(dep);\n            }\n          }\n        },\n        Global: function Global(_ref2) {\n          var node = _ref2.node;\n          var init = node.init[0];\n          var importNode = null;\n\n          if (init.id === \"get_global\") {\n            var globalIdx = init.args[0].value;\n\n            if (globalIdx < importedGlobals.length) {\n              importNode = importedGlobals[globalIdx];\n            }\n          }\n\n          importedGlobals.push(importNode);\n        },\n        ModuleImport: function ModuleImport(_ref3) {\n          var node = _ref3.node;\n\n          /** @type {false | string} */\n          var onlyDirectImport = false;\n\n          if (t.isMemory(node.descr) === true) {\n            onlyDirectImport = \"Memory\";\n          } else if (t.isTable(node.descr) === true) {\n            onlyDirectImport = \"Table\";\n          } else if (t.isFuncImportDescr(node.descr) === true) {\n            var incompatibleType = getJsIncompatibleType(node.descr.signature);\n\n            if (incompatibleType) {\n              onlyDirectImport = \"Non-JS-compatible Func Sigurature (\".concat(incompatibleType, \")\");\n            }\n          } else if (t.isGlobalType(node.descr) === true) {\n            var type = node.descr.valtype;\n\n            if (!JS_COMPAT_TYPES.has(type)) {\n              onlyDirectImport = \"Non-JS-compatible Global Type (\".concat(type, \")\");\n            }\n          }\n\n          var dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, onlyDirectImport);\n          state.module.addDependency(dep);\n\n          if (t.isGlobalType(node.descr)) {\n            importedGlobals.push(node);\n          }\n        }\n      });\n      return state;\n    }\n  }]);\n\n  return WebAssemblyParser;\n}(Tapable);\n\nmodule.exports = WebAssemblyParser;","map":null,"metadata":{},"sourceType":"module"}