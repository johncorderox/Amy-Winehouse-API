{"ast":null,"code":"import * as decoder from \"./decoder\";\nimport * as t from \"@webassemblyjs/ast\";\n/**\n * TODO(sven): I added initial props, but we should rather fix\n * https://github.com/xtuc/webassemblyjs/issues/405\n */\n\nvar defaultDecoderOpts = {\n  dump: false,\n  ignoreCodeSection: false,\n  ignoreDataSection: false,\n  ignoreCustomNameSection: false\n}; // traverses the AST, locating function name metadata, which is then\n// used to update index-based identifiers with function names\n\nfunction restoreFunctionNames(ast) {\n  var functionNames = [];\n  t.traverse(ast, {\n    FunctionNameMetadata: function FunctionNameMetadata(_ref) {\n      var node = _ref.node;\n      functionNames.push({\n        name: node.value,\n        index: node.index\n      });\n    }\n  });\n\n  if (functionNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func) {\n      function Func(_x) {\n        return _Func.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func.toString();\n      };\n\n      return Func;\n    }(function (_ref2) {\n      var node = _ref2.node; // $FlowIgnore\n\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = nodeName.value;\n        nodeName.value = functionName.name;\n        nodeName.numeric = oldValue; // $FlowIgnore\n\n        delete nodeName.raw;\n      }\n    }),\n    // Also update the reference in the export\n    ModuleExport: function (_ModuleExport) {\n      function ModuleExport(_x2) {\n        return _ModuleExport.apply(this, arguments);\n      }\n\n      ModuleExport.toString = function () {\n        return _ModuleExport.toString();\n      };\n\n      return ModuleExport;\n    }(function (_ref3) {\n      var node = _ref3.node;\n\n      if (node.descr.exportType === \"Func\") {\n        // $FlowIgnore\n        var nodeName = node.descr.id;\n        var index = nodeName.value;\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    ModuleImport: function (_ModuleImport) {\n      function ModuleImport(_x3) {\n        return _ModuleImport.apply(this, arguments);\n      }\n\n      ModuleImport.toString = function () {\n        return _ModuleImport.toString();\n      };\n\n      return ModuleImport;\n    }(function (_ref4) {\n      var node = _ref4.node;\n\n      if (node.descr.type === \"FuncImportDescr\") {\n        // $FlowIgnore\n        var indexBasedFunctionName = node.descr.id;\n        var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          // $FlowIgnore\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    CallInstruction: function (_CallInstruction) {\n      function CallInstruction(_x4) {\n        return _CallInstruction.apply(this, arguments);\n      }\n\n      CallInstruction.toString = function () {\n        return _CallInstruction.toString();\n      };\n\n      return CallInstruction;\n    }(function (nodePath) {\n      var node = nodePath.node;\n      var index = node.index.value;\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = node.index;\n        node.index = t.identifier(functionName.name);\n        node.numeric = oldValue; // $FlowIgnore\n\n        delete node.raw;\n      }\n    })\n  });\n}\n\nfunction restoreLocalNames(ast) {\n  var localNames = [];\n  t.traverse(ast, {\n    LocalNameMetadata: function LocalNameMetadata(_ref5) {\n      var node = _ref5.node;\n      localNames.push({\n        name: node.value,\n        localIndex: node.localIndex,\n        functionIndex: node.functionIndex\n      });\n    }\n  });\n\n  if (localNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func2) {\n      function Func(_x5) {\n        return _Func2.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func2.toString();\n      };\n\n      return Func;\n    }(function (_ref6) {\n      var node = _ref6.node;\n      var signature = node.signature;\n\n      if (signature.type !== \"Signature\") {\n        return;\n      } // $FlowIgnore\n\n\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var functionIndex = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      signature.params.forEach(function (param, paramIndex) {\n        var paramName = localNames.find(function (f) {\n          return f.localIndex === paramIndex && f.functionIndex === functionIndex;\n        });\n\n        if (paramName && paramName.name !== \"\") {\n          param.id = paramName.name;\n        }\n      });\n    })\n  });\n}\n\nfunction restoreModuleName(ast) {\n  t.traverse(ast, {\n    ModuleNameMetadata: function (_ModuleNameMetadata) {\n      function ModuleNameMetadata(_x6) {\n        return _ModuleNameMetadata.apply(this, arguments);\n      }\n\n      ModuleNameMetadata.toString = function () {\n        return _ModuleNameMetadata.toString();\n      };\n\n      return ModuleNameMetadata;\n    }(function (moduleNameMetadataPath) {\n      // update module\n      t.traverse(ast, {\n        Module: function (_Module) {\n          function Module(_x7) {\n            return _Module.apply(this, arguments);\n          }\n\n          Module.toString = function () {\n            return _Module.toString();\n          };\n\n          return Module;\n        }(function (_ref7) {\n          var node = _ref7.node;\n          var name = moduleNameMetadataPath.node.value; // compatiblity with wast-parser\n\n          if (name === \"\") {\n            name = null;\n          }\n\n          node.id = name;\n        })\n      });\n    })\n  });\n}\n\nexport function decode(buf, customOpts) {\n  var opts = Object.assign({}, defaultDecoderOpts, customOpts);\n  var ast = decoder.decode(buf, opts);\n\n  if (opts.ignoreCustomNameSection === false) {\n    restoreFunctionNames(ast);\n    restoreLocalNames(ast);\n    restoreModuleName(ast);\n  }\n\n  return ast;\n}","map":null,"metadata":{},"sourceType":"module"}