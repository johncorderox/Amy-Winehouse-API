{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar path = require(\"path\");\n\nvar ParserHelpers = require(\"./ParserHelpers\");\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar NodeStuffPlugin = /*#__PURE__*/function () {\n  function NodeStuffPlugin(options) {\n    _classCallCheck(this, NodeStuffPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(NodeStuffPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"NodeStuffPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.node === false) return;\n          var localOptions = options;\n\n          if (parserOptions.node) {\n            localOptions = Object.assign({}, localOptions, parserOptions.node);\n          }\n\n          var setConstant = function setConstant(expressionName, value) {\n            parser.hooks.expression[\"for\"](expressionName).tap(\"NodeStuffPlugin\", function () {\n              parser.state.current.addVariable(expressionName, JSON.stringify(value));\n              return true;\n            });\n          };\n\n          var setModuleConstant = function setModuleConstant(expressionName, fn) {\n            parser.hooks.expression[\"for\"](expressionName).tap(\"NodeStuffPlugin\", function () {\n              parser.state.current.addVariable(expressionName, JSON.stringify(fn(parser.state.module)));\n              return true;\n            });\n          };\n\n          var context = compiler.context;\n\n          if (localOptions.__filename) {\n            if (localOptions.__filename === \"mock\") {\n              setConstant(\"__filename\", \"/index.js\");\n            } else {\n              setModuleConstant(\"__filename\", function (module) {\n                return path.relative(context, module.resource);\n              });\n            }\n\n            parser.hooks.evaluateIdentifier[\"for\"](\"__filename\").tap(\"NodeStuffPlugin\", function (expr) {\n              if (!parser.state.module) return;\n              var resource = parser.state.module.resource;\n              var i = resource.indexOf(\"?\");\n              return ParserHelpers.evaluateToString(i < 0 ? resource : resource.substr(0, i))(expr);\n            });\n          }\n\n          if (localOptions.__dirname) {\n            if (localOptions.__dirname === \"mock\") {\n              setConstant(\"__dirname\", \"/\");\n            } else {\n              setModuleConstant(\"__dirname\", function (module) {\n                return path.relative(context, module.context);\n              });\n            }\n\n            parser.hooks.evaluateIdentifier[\"for\"](\"__dirname\").tap(\"NodeStuffPlugin\", function (expr) {\n              if (!parser.state.module) return;\n              return ParserHelpers.evaluateToString(parser.state.module.context)(expr);\n            });\n          }\n\n          parser.hooks.expression[\"for\"](\"require.extensions\").tap(\"NodeStuffPlugin\", ParserHelpers.expressionIsUnsupported(parser, \"require.extensions is not supported by webpack. Use a loader instead.\"));\n        };\n\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/auto\").tap(\"NodeStuffPlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/dynamic\").tap(\"NodeStuffPlugin\", handler);\n      });\n    }\n  }]);\n\n  return NodeStuffPlugin;\n}();\n\nmodule.exports = NodeStuffPlugin;","map":null,"metadata":{},"sourceType":"module"}