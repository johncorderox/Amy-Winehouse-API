{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"webpack-sources\"),\n    RawSource = _require.RawSource,\n    ReplaceSource = _require.ReplaceSource;\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/** @typedef {Map<Function, DependencyTemplate>} DependencyTemplates */\n\n\nvar DependenciesBlockVariable = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of DependenciesBlockVariable.\n   * @param {string} name name of DependenciesBlockVariable\n   * @param {string} expression expression string\n   * @param {Dependency[]=} dependencies dependencies tied to this varaiable\n   */\n  function DependenciesBlockVariable(name, expression, dependencies) {\n    _classCallCheck(this, DependenciesBlockVariable);\n\n    this.name = name;\n    this.expression = expression;\n    this.dependencies = dependencies || [];\n  }\n  /**\n   * @param {Hash} hash hash for instance to update\n   * @returns {void}\n   */\n\n\n  _createClass(DependenciesBlockVariable, [{\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this.name);\n      hash.update(this.expression);\n\n      var _iterator = _createForOfIteratorHelper(this.dependencies),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var d = _step.value;\n          d.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * @param {DependencyTemplates} dependencyTemplates Dependency constructors and templates Map.\n     * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate to generate expression souce\n     * @returns {ReplaceSource} returns constructed source for expression via templates\n     */\n\n  }, {\n    key: \"expressionSource\",\n    value: function expressionSource(dependencyTemplates, runtimeTemplate) {\n      var source = new ReplaceSource(new RawSource(this.expression));\n\n      var _iterator2 = _createForOfIteratorHelper(this.dependencies),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dep = _step2.value;\n          var template = dependencyTemplates.get(dep.constructor);\n\n          if (!template) {\n            throw new Error(\"No template for dependency: \".concat(dep.constructor.name));\n          }\n\n          template.apply(dep, source, runtimeTemplate, dependencyTemplates);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return source;\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _iterator3 = _createForOfIteratorHelper(this.dependencies),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var d = _step3.value;\n          d.disconnect();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"hasDependencies\",\n    value: function hasDependencies(filter) {\n      if (filter) {\n        return this.dependencies.some(filter);\n      }\n\n      return this.dependencies.length > 0;\n    }\n  }]);\n\n  return DependenciesBlockVariable;\n}();\n\nmodule.exports = DependenciesBlockVariable;","map":null,"metadata":{},"sourceType":"module"}