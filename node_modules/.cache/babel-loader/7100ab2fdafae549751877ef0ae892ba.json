{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar truncateArgs = require(\"../logging/truncateArgs\");\n\nvar util = require(\"util\");\n\nvar tty = process.stderr.isTTY && process.env.TERM !== \"dumb\";\nvar currentStatusMessage = undefined;\nvar hasStatusMessage = false;\nvar currentIndent = \"\";\nvar currentCollapsed = 0;\n\nvar indent = function indent(str, prefix, colorPrefix, colorSuffix) {\n  if (str === \"\") return str;\n  prefix = currentIndent + prefix;\n\n  if (tty) {\n    return prefix + colorPrefix + str.replace(/\\n/g, colorSuffix + \"\\n\" + prefix + colorPrefix) + colorSuffix;\n  } else {\n    return prefix + str.replace(/\\n/g, \"\\n\" + prefix);\n  }\n};\n\nvar clearStatusMessage = function clearStatusMessage() {\n  if (hasStatusMessage) {\n    process.stderr.write(\"\\x1b[2K\\r\");\n    hasStatusMessage = false;\n  }\n};\n\nvar writeStatusMessage = function writeStatusMessage() {\n  if (!currentStatusMessage) return;\n  var l = process.stderr.columns;\n  var args = l ? truncateArgs(currentStatusMessage, l - 1) : currentStatusMessage;\n  var str = args.join(\" \");\n  var coloredStr = \"\\x1B[1m\".concat(str, \"\\x1B[39m\\x1B[22m\");\n  process.stderr.write(\"\\x1B[2K\\r\".concat(coloredStr));\n  hasStatusMessage = true;\n};\n\nvar writeColored = function writeColored(prefix, colorPrefix, colorSuffix) {\n  return function () {\n    if (currentCollapsed > 0) return;\n    clearStatusMessage(); // @ts-ignore\n\n    var str = indent(util.format.apply(util, arguments), prefix, colorPrefix, colorSuffix);\n    process.stderr.write(str + \"\\n\");\n    writeStatusMessage();\n  };\n};\n\nvar writeGroupMessage = writeColored(\"<-> \", \"\\x1B[1m\\x1B[36m\", \"\\x1B[39m\\x1B[22m\");\nvar writeGroupCollapsedMessage = writeColored(\"<+> \", \"\\x1B[1m\\x1B[36m\", \"\\x1B[39m\\x1B[22m\");\nmodule.exports = {\n  log: writeColored(\"    \", \"\\x1B[1m\", \"\\x1B[22m\"),\n  debug: writeColored(\"    \", \"\", \"\"),\n  trace: writeColored(\"    \", \"\", \"\"),\n  info: writeColored(\"<i> \", \"\\x1B[1m\\x1B[32m\", \"\\x1B[39m\\x1B[22m\"),\n  warn: writeColored(\"<w> \", \"\\x1B[1m\\x1B[33m\", \"\\x1B[39m\\x1B[22m\"),\n  error: writeColored(\"<e> \", \"\\x1B[1m\\x1B[31m\", \"\\x1B[39m\\x1B[22m\"),\n  logTime: writeColored(\"<t> \", \"\\x1B[1m\\x1B[35m\", \"\\x1B[39m\\x1B[22m\"),\n  group: function group() {\n    writeGroupMessage.apply(void 0, arguments);\n\n    if (currentCollapsed > 0) {\n      currentCollapsed++;\n    } else {\n      currentIndent += \"  \";\n    }\n  },\n  groupCollapsed: function groupCollapsed() {\n    writeGroupCollapsedMessage.apply(void 0, arguments);\n    currentCollapsed++;\n  },\n  groupEnd: function groupEnd() {\n    if (currentCollapsed > 0) currentCollapsed--;else if (currentIndent.length >= 2) currentIndent = currentIndent.slice(0, currentIndent.length - 2);\n  },\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  profile: console.profile && function (name) {\n    return console.profile(name);\n  },\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  profileEnd: console.profileEnd && function (name) {\n    return console.profileEnd(name);\n  },\n  clear: tty && // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  console.clear && function () {\n    clearStatusMessage(); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n    console.clear();\n    writeStatusMessage();\n  },\n  status: tty ? function (name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    args = args.filter(Boolean);\n\n    if (name === undefined && args.length === 0) {\n      clearStatusMessage();\n      currentStatusMessage = undefined;\n    } else if (typeof name === \"string\" && name.startsWith(\"[webpack.Progress] \")) {\n      currentStatusMessage = [name.slice(19)].concat(_toConsumableArray(args));\n      writeStatusMessage();\n    } else if (name === \"[webpack.Progress]\") {\n      currentStatusMessage = _toConsumableArray(args);\n      writeStatusMessage();\n    } else {\n      currentStatusMessage = [name].concat(_toConsumableArray(args));\n      writeStatusMessage();\n    }\n  } : writeColored(\"<s> \", \"\", \"\")\n};","map":null,"metadata":{},"sourceType":"module"}