{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar AsyncDependenciesBlock = require(\"../AsyncDependenciesBlock\");\n\nvar AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nmodule.exports = /*#__PURE__*/function (_AsyncDependenciesBlo) {\n  _inherits(AMDRequireDependenciesBlock, _AsyncDependenciesBlo);\n\n  var _super = _createSuper(AMDRequireDependenciesBlock);\n\n  function AMDRequireDependenciesBlock(expr, arrayRange, functionRange, errorCallbackRange, module, loc, request) {\n    var _this;\n\n    _classCallCheck(this, AMDRequireDependenciesBlock);\n\n    _this = _super.call(this, null, module, loc, request);\n    _this.expr = expr;\n    _this.outerRange = expr.range;\n    _this.arrayRange = arrayRange;\n    _this.functionBindThis = false;\n    _this.functionRange = functionRange;\n    _this.errorCallbackBindThis = false;\n    _this.errorCallbackRange = errorCallbackRange;\n    _this.bindThis = true;\n\n    if (arrayRange && functionRange && errorCallbackRange) {\n      _this.range = [arrayRange[0], errorCallbackRange[1]];\n    } else if (arrayRange && functionRange) {\n      _this.range = [arrayRange[0], functionRange[1]];\n    } else if (arrayRange) {\n      _this.range = arrayRange;\n    } else if (functionRange) {\n      _this.range = functionRange;\n    } else {\n      _this.range = expr.range;\n    }\n\n    var dep = _this.newRequireDependency();\n\n    dep.loc = loc;\n\n    _this.addDependency(dep);\n\n    return _this;\n  }\n\n  _createClass(AMDRequireDependenciesBlock, [{\n    key: \"newRequireDependency\",\n    value: function newRequireDependency() {\n      return new AMDRequireDependency(this);\n    }\n  }]);\n\n  return AMDRequireDependenciesBlock;\n}(AsyncDependenciesBlock);","map":null,"metadata":{},"sourceType":"module"}