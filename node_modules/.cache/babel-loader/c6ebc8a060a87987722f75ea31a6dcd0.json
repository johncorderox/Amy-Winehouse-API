{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar Resolver = require(\"./Resolver\");\n\nvar SyncAsyncFileSystemDecorator = require(\"./SyncAsyncFileSystemDecorator\");\n\nvar ParsePlugin = require(\"./ParsePlugin\");\n\nvar DescriptionFilePlugin = require(\"./DescriptionFilePlugin\");\n\nvar NextPlugin = require(\"./NextPlugin\");\n\nvar TryNextPlugin = require(\"./TryNextPlugin\");\n\nvar ModuleKindPlugin = require(\"./ModuleKindPlugin\");\n\nvar FileKindPlugin = require(\"./FileKindPlugin\");\n\nvar JoinRequestPlugin = require(\"./JoinRequestPlugin\");\n\nvar ModulesInHierachicDirectoriesPlugin = require(\"./ModulesInHierachicDirectoriesPlugin\");\n\nvar ModulesInRootPlugin = require(\"./ModulesInRootPlugin\");\n\nvar AliasPlugin = require(\"./AliasPlugin\");\n\nvar AliasFieldPlugin = require(\"./AliasFieldPlugin\");\n\nvar ConcordExtensionsPlugin = require(\"./ConcordExtensionsPlugin\");\n\nvar ConcordMainPlugin = require(\"./ConcordMainPlugin\");\n\nvar ConcordModulesPlugin = require(\"./ConcordModulesPlugin\");\n\nvar DirectoryExistsPlugin = require(\"./DirectoryExistsPlugin\");\n\nvar FileExistsPlugin = require(\"./FileExistsPlugin\");\n\nvar SymlinkPlugin = require(\"./SymlinkPlugin\");\n\nvar MainFieldPlugin = require(\"./MainFieldPlugin\");\n\nvar UseFilePlugin = require(\"./UseFilePlugin\");\n\nvar AppendPlugin = require(\"./AppendPlugin\");\n\nvar RootPlugin = require(\"./RootPlugin\");\n\nvar RestrictionsPlugin = require(\"./RestrictionsPlugin\");\n\nvar ResultPlugin = require(\"./ResultPlugin\");\n\nvar ModuleAppendPlugin = require(\"./ModuleAppendPlugin\");\n\nvar UnsafeCachePlugin = require(\"./UnsafeCachePlugin\");\n\nexports.createResolver = function (options) {\n  //// OPTIONS ////\n  // A list of directories to resolve modules from, can be absolute path or folder name\n  var modules = options.modules || [\"node_modules\"]; // A list of description files to read from\n\n  var descriptionFiles = options.descriptionFiles || [\"package.json\"]; // A list of additional resolve plugins which should be applied\n  // The slice is there to create a copy, because otherwise pushing into plugins\n  // changes the original options.plugins array, causing duplicate plugins\n\n  var plugins = options.plugins && options.plugins.slice() || []; // A list of main fields in description files\n\n  var mainFields = options.mainFields || [\"main\"]; // A list of alias fields in description files\n\n  var aliasFields = options.aliasFields || []; // A list of main files in directories\n\n  var mainFiles = options.mainFiles || [\"index\"]; // A list of extensions which should be tried for files\n\n  var extensions = options.extensions || [\".js\", \".json\", \".node\"]; // Enforce that a extension from extensions must be used\n\n  var enforceExtension = options.enforceExtension || false; // A list of module extensions which should be tried for modules\n\n  var moduleExtensions = options.moduleExtensions || []; // Enforce that a extension from moduleExtensions must be used\n\n  var enforceModuleExtension = options.enforceModuleExtension || false; // A list of module alias configurations or an object which maps key to value\n\n  var alias = options.alias || []; // Resolve symlinks to their symlinked location\n\n  var symlinks = typeof options.symlinks !== \"undefined\" ? options.symlinks : true; // Resolve to a context instead of a file\n\n  var resolveToContext = options.resolveToContext || false; // A list of root paths\n\n  var roots = options.roots || []; // Ignore errors happening when resolving roots\n\n  var ignoreRootsErrors = options.ignoreRootsErrors || false; // Prefer to resolve server-relative urls as absolute paths before falling back to resolve in roots\n\n  var preferAbsolute = options.preferAbsolute || false;\n  var restrictions = options.restrictions || []; // Use this cache object to unsafely cache the successful requests\n\n  var unsafeCache = options.unsafeCache || false; // Whether or not the unsafeCache should include request context as part of the cache key.\n\n  var cacheWithContext = typeof options.cacheWithContext !== \"undefined\" ? options.cacheWithContext : true; // Enable concord description file instructions\n\n  var enableConcord = options.concord || false; // A function which decides whether a request should be cached or not.\n  // an object is passed with `path` and `request` properties.\n\n  var cachePredicate = options.cachePredicate || function () {\n    return true;\n  }; // The file system which should be used\n\n\n  var fileSystem = options.fileSystem; // Use only the sync constiants of the file system calls\n\n  var useSyncFileSystemCalls = options.useSyncFileSystemCalls; // A prepared Resolver to which the plugins are attached\n\n  var resolver = options.resolver; //// options processing ////\n\n  if (!resolver) {\n    resolver = new Resolver(useSyncFileSystemCalls ? new SyncAsyncFileSystemDecorator(fileSystem) : fileSystem);\n  }\n\n  extensions = [].concat(extensions);\n  moduleExtensions = [].concat(moduleExtensions);\n  modules = mergeFilteredToArray([].concat(modules), function (item) {\n    return !isAbsolutePath(item);\n  });\n  mainFields = mainFields.map(function (item) {\n    if (typeof item === \"string\" || Array.isArray(item)) {\n      item = {\n        name: item,\n        forceRelative: true\n      };\n    }\n\n    return item;\n  });\n\n  if (_typeof(alias) === \"object\" && !Array.isArray(alias)) {\n    alias = Object.keys(alias).map(function (key) {\n      var onlyModule = false;\n      var obj = alias[key];\n\n      if (/\\$$/.test(key)) {\n        onlyModule = true;\n        key = key.substr(0, key.length - 1);\n      }\n\n      if (typeof obj === \"string\") {\n        obj = {\n          alias: obj\n        };\n      }\n\n      obj = Object.assign({\n        name: key,\n        onlyModule: onlyModule\n      }, obj);\n      return obj;\n    });\n  }\n\n  if (unsafeCache && _typeof(unsafeCache) !== \"object\") {\n    unsafeCache = {};\n  } //// pipeline ////\n\n\n  resolver.ensureHook(\"resolve\");\n  resolver.ensureHook(\"parsedResolve\");\n  resolver.ensureHook(\"describedResolve\");\n  resolver.ensureHook(\"rawModule\");\n  resolver.ensureHook(\"module\");\n  resolver.ensureHook(\"relative\");\n  resolver.ensureHook(\"describedRelative\");\n  resolver.ensureHook(\"directory\");\n  resolver.ensureHook(\"existingDirectory\");\n  resolver.ensureHook(\"undescribedRawFile\");\n  resolver.ensureHook(\"rawFile\");\n  resolver.ensureHook(\"file\");\n  resolver.ensureHook(\"existingFile\");\n  resolver.ensureHook(\"resolved\"); // resolve\n\n  if (unsafeCache) {\n    plugins.push(new UnsafeCachePlugin(\"resolve\", cachePredicate, unsafeCache, cacheWithContext, \"new-resolve\"));\n    plugins.push(new ParsePlugin(\"new-resolve\", \"parsed-resolve\"));\n  } else {\n    plugins.push(new ParsePlugin(\"resolve\", \"parsed-resolve\"));\n  } // parsed-resolve\n\n\n  plugins.push(new DescriptionFilePlugin(\"parsed-resolve\", descriptionFiles, \"described-resolve\"));\n  plugins.push(new NextPlugin(\"after-parsed-resolve\", \"described-resolve\")); // described-resolve\n\n  if (alias.length > 0) plugins.push(new AliasPlugin(\"described-resolve\", alias, \"resolve\"));\n\n  if (enableConcord) {\n    plugins.push(new ConcordModulesPlugin(\"described-resolve\", {}, \"resolve\"));\n  }\n\n  aliasFields.forEach(function (item) {\n    plugins.push(new AliasFieldPlugin(\"described-resolve\", item, \"resolve\"));\n  });\n  plugins.push(new ModuleKindPlugin(\"after-described-resolve\", \"raw-module\"));\n\n  if (preferAbsolute) {\n    plugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\"));\n  }\n\n  roots.forEach(function (root) {\n    plugins.push(new RootPlugin(\"after-described-resolve\", root, \"relative\", ignoreRootsErrors));\n  });\n\n  if (!preferAbsolute) {\n    plugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\"));\n  } // raw-module\n\n\n  moduleExtensions.forEach(function (item) {\n    plugins.push(new ModuleAppendPlugin(\"raw-module\", item, \"module\"));\n  });\n  if (!enforceModuleExtension) plugins.push(new TryNextPlugin(\"raw-module\", null, \"module\")); // module\n\n  modules.forEach(function (item) {\n    if (Array.isArray(item)) plugins.push(new ModulesInHierachicDirectoriesPlugin(\"module\", item, \"resolve\"));else plugins.push(new ModulesInRootPlugin(\"module\", item, \"resolve\"));\n  }); // relative\n\n  plugins.push(new DescriptionFilePlugin(\"relative\", descriptionFiles, \"described-relative\"));\n  plugins.push(new NextPlugin(\"after-relative\", \"described-relative\")); // described-relative\n\n  plugins.push(new FileKindPlugin(\"described-relative\", \"raw-file\"));\n  plugins.push(new TryNextPlugin(\"described-relative\", \"as directory\", \"directory\")); // directory\n\n  plugins.push(new DirectoryExistsPlugin(\"directory\", \"existing-directory\"));\n\n  if (resolveToContext) {\n    // existing-directory\n    plugins.push(new NextPlugin(\"existing-directory\", \"resolved\"));\n  } else {\n    // existing-directory\n    if (enableConcord) {\n      plugins.push(new ConcordMainPlugin(\"existing-directory\", {}, \"resolve\"));\n    }\n\n    mainFields.forEach(function (item) {\n      plugins.push(new MainFieldPlugin(\"existing-directory\", item, \"resolve\"));\n    });\n    mainFiles.forEach(function (item) {\n      plugins.push(new UseFilePlugin(\"existing-directory\", item, \"undescribed-raw-file\"));\n    }); // undescribed-raw-file\n\n    plugins.push(new DescriptionFilePlugin(\"undescribed-raw-file\", descriptionFiles, \"raw-file\"));\n    plugins.push(new NextPlugin(\"after-undescribed-raw-file\", \"raw-file\")); // raw-file\n\n    if (!enforceExtension) {\n      plugins.push(new TryNextPlugin(\"raw-file\", \"no extension\", \"file\"));\n    }\n\n    if (enableConcord) {\n      plugins.push(new ConcordExtensionsPlugin(\"raw-file\", {}, \"file\"));\n    }\n\n    extensions.forEach(function (item) {\n      plugins.push(new AppendPlugin(\"raw-file\", item, \"file\"));\n    }); // file\n\n    if (alias.length > 0) plugins.push(new AliasPlugin(\"file\", alias, \"resolve\"));\n\n    if (enableConcord) {\n      plugins.push(new ConcordModulesPlugin(\"file\", {}, \"resolve\"));\n    }\n\n    aliasFields.forEach(function (item) {\n      plugins.push(new AliasFieldPlugin(\"file\", item, \"resolve\"));\n    });\n    if (symlinks) plugins.push(new SymlinkPlugin(\"file\", \"relative\"));\n    plugins.push(new FileExistsPlugin(\"file\", \"existing-file\")); // existing-file\n\n    plugins.push(new NextPlugin(\"existing-file\", \"resolved\"));\n  } // resolved\n\n\n  if (restrictions.length > 0) {\n    plugins.push(new RestrictionsPlugin(resolver.hooks.resolved, restrictions));\n  }\n\n  plugins.push(new ResultPlugin(resolver.hooks.resolved)); //// RESOLVER ////\n\n  plugins.forEach(function (plugin) {\n    plugin.apply(resolver);\n  });\n  return resolver;\n};\n\nfunction mergeFilteredToArray(array, filter) {\n  return array.reduce(function (array, item) {\n    if (filter(item)) {\n      var lastElement = array[array.length - 1];\n\n      if (Array.isArray(lastElement)) {\n        lastElement.push(item);\n      } else {\n        array.push([item]);\n      }\n\n      return array;\n    } else {\n      array.push(item);\n      return array;\n    }\n  }, []);\n}\n\nfunction isAbsolutePath(path) {\n  return /^[A-Z]:|^\\//.test(path);\n}","map":null,"metadata":{},"sourceType":"module"}