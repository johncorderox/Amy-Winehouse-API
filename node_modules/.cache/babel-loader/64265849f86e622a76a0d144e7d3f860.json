{"ast":null,"code":"\"use strict\";\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar SortableSet = /*#__PURE__*/function (_Set) {\n  _inherits(SortableSet, _Set);\n\n  var _super = _createSuper(SortableSet);\n\n  /**\n   * Create a new sortable set\n   * @param {Iterable<T>=} initialIterable The initial iterable value\n   * @typedef {function(T, T): number} SortFunction\n   * @param {SortFunction=} defaultSort Default sorting function\n   */\n  function SortableSet(initialIterable, defaultSort) {\n    var _this;\n\n    _classCallCheck(this, SortableSet);\n\n    _this = _super.call(this, initialIterable);\n    /** @private @type {function(T, T): number}} */\n\n    _this._sortFn = defaultSort;\n    /** @private @type {function(T, T): number} | null} */\n\n    _this._lastActiveSortFn = null;\n    /** @private @type {Map<Function, T[]> | undefined} */\n\n    _this._cache = undefined;\n    /** @private @type {Map<Function, T[]|string|number> | undefined} */\n\n    _this._cacheOrderIndependent = undefined;\n    return _this;\n  }\n  /**\n   * @param {T} value value to add to set\n   * @returns {this} returns itself\n   */\n\n\n  _createClass(SortableSet, [{\n    key: \"add\",\n    value: function add(value) {\n      this._lastActiveSortFn = null;\n\n      this._invalidateCache();\n\n      this._invalidateOrderedCache();\n\n      _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, value);\n\n      return this;\n    }\n    /**\n     * @param {T} value value to delete\n     * @returns {boolean} true if value existed in set, false otherwise\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      this._invalidateCache();\n\n      this._invalidateOrderedCache();\n\n      return _get(_getPrototypeOf(SortableSet.prototype), \"delete\", this).call(this, value);\n    }\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._invalidateCache();\n\n      this._invalidateOrderedCache();\n\n      return _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n    }\n    /**\n     * Sort with a comparer function\n     * @param {SortFunction} sortFn Sorting comparer function\n     * @returns {void}\n     */\n\n  }, {\n    key: \"sortWith\",\n    value: function sortWith(sortFn) {\n      if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n        // already sorted - nothing to do\n        return;\n      }\n\n      var sortedArray = Array.from(this).sort(sortFn);\n\n      _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n\n      for (var i = 0; i < sortedArray.length; i += 1) {\n        _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, sortedArray[i]);\n      }\n\n      this._lastActiveSortFn = sortFn;\n\n      this._invalidateCache();\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this.sortWith(this._sortFn);\n    }\n    /**\n     * Get data from cache\n     * @param {function(SortableSet<T>): T[]} fn function to calculate value\n     * @returns {T[]} returns result of fn(this), cached until set changes\n     */\n\n  }, {\n    key: \"getFromCache\",\n    value: function getFromCache(fn) {\n      if (this._cache === undefined) {\n        this._cache = new Map();\n      } else {\n        var data = this._cache.get(fn);\n\n        if (data !== undefined) {\n          return data;\n        }\n      }\n\n      var newData = fn(this);\n\n      this._cache.set(fn, newData);\n\n      return newData;\n    }\n    /**\n     * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value\n     * @returns {any} returns result of fn(this), cached until set changes\n     */\n\n  }, {\n    key: \"getFromUnorderedCache\",\n    value: function getFromUnorderedCache(fn) {\n      if (this._cacheOrderIndependent === undefined) {\n        this._cacheOrderIndependent = new Map();\n      } else {\n        var data = this._cacheOrderIndependent.get(fn);\n\n        if (data !== undefined) {\n          return data;\n        }\n      }\n\n      var newData = fn(this);\n\n      this._cacheOrderIndependent.set(fn, newData);\n\n      return newData;\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_invalidateCache\",\n    value: function _invalidateCache() {\n      if (this._cache !== undefined) {\n        this._cache.clear();\n      }\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_invalidateOrderedCache\",\n    value: function _invalidateOrderedCache() {\n      if (this._cacheOrderIndependent !== undefined) {\n        this._cacheOrderIndependent.clear();\n      }\n    }\n  }]);\n\n  return SortableSet;\n}( /*#__PURE__*/_wrapNativeSuper(Set));\n\nmodule.exports = SortableSet;","map":null,"metadata":{},"sourceType":"module"}