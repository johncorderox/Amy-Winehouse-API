{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar Source = require(\"./Source\");\n\nvar CachedSource = /*#__PURE__*/function (_Source) {\n  _inherits(CachedSource, _Source);\n\n  var _super = _createSuper(CachedSource);\n\n  function CachedSource(source) {\n    var _this;\n\n    _classCallCheck(this, CachedSource);\n\n    _this = _super.call(this);\n    _this._source = source;\n    _this._cachedSource = undefined;\n    _this._cachedSize = undefined;\n    _this._cachedMaps = {};\n    if (source.node) _this.node = function (options) {\n      return this._source.node(options);\n    };\n    if (source.listMap) _this.listMap = function (options) {\n      return this._source.listMap(options);\n    };\n    return _this;\n  }\n\n  _createClass(CachedSource, [{\n    key: \"source\",\n    value: function source() {\n      if (typeof this._cachedSource !== \"undefined\") return this._cachedSource;\n      return this._cachedSource = this._source.source();\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      if (typeof this._cachedSize !== \"undefined\") return this._cachedSize;\n\n      if (typeof this._cachedSource !== \"undefined\") {\n        if (Buffer.from.length === 1) return new Buffer(this._cachedSource).length;\n        return this._cachedSize = Buffer.byteLength(this._cachedSource);\n      }\n\n      return this._cachedSize = this._source.size();\n    }\n  }, {\n    key: \"sourceAndMap\",\n    value: function sourceAndMap(options) {\n      var key = JSON.stringify(options);\n      if (typeof this._cachedSource !== \"undefined\" && key in this._cachedMaps) return {\n        source: this._cachedSource,\n        map: this._cachedMaps[key]\n      };else if (typeof this._cachedSource !== \"undefined\") {\n        return {\n          source: this._cachedSource,\n          map: this._cachedMaps[key] = this._source.map(options)\n        };\n      } else if (key in this._cachedMaps) {\n        return {\n          source: this._cachedSource = this._source.source(),\n          map: this._cachedMaps[key]\n        };\n      }\n\n      var result = this._source.sourceAndMap(options);\n\n      this._cachedSource = result.source;\n      this._cachedMaps[key] = result.map;\n      return {\n        source: this._cachedSource,\n        map: this._cachedMaps[key]\n      };\n    }\n  }, {\n    key: \"map\",\n    value: function map(options) {\n      if (!options) options = {};\n      var key = JSON.stringify(options);\n      if (key in this._cachedMaps) return this._cachedMaps[key];\n      return this._cachedMaps[key] = this._source.map();\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      this._source.updateHash(hash);\n    }\n  }]);\n\n  return CachedSource;\n}(Source);\n\nmodule.exports = CachedSource;","map":null,"metadata":{},"sourceType":"module"}