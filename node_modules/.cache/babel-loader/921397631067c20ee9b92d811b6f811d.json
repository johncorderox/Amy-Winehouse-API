{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar NullDependency = require(\"./NullDependency\");\n\nvar AMDDefineDependency = /*#__PURE__*/function (_NullDependency) {\n  _inherits(AMDDefineDependency, _NullDependency);\n\n  var _super = _createSuper(AMDDefineDependency);\n\n  function AMDDefineDependency(range, arrayRange, functionRange, objectRange, namedModule) {\n    var _this;\n\n    _classCallCheck(this, AMDDefineDependency);\n\n    _this = _super.call(this);\n    _this.range = range;\n    _this.arrayRange = arrayRange;\n    _this.functionRange = functionRange;\n    _this.objectRange = objectRange;\n    _this.namedModule = namedModule;\n    _this.localModule = null;\n    return _this;\n  }\n\n  _createClass(AMDDefineDependency, [{\n    key: \"type\",\n    get: function get() {\n      return \"amd define\";\n    }\n  }]);\n\n  return AMDDefineDependency;\n}(NullDependency);\n\nAMDDefineDependency.Template = /*#__PURE__*/function () {\n  function AMDDefineDependencyTemplate() {\n    _classCallCheck(this, AMDDefineDependencyTemplate);\n  }\n\n  _createClass(AMDDefineDependencyTemplate, [{\n    key: \"definitions\",\n    get: function get() {\n      return {\n        f: [\"var __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_RESULT__ = (#).call(exports, __webpack_require__, exports, module),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n        o: [\"\", \"!(module.exports = #)\"],\n        of: [\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_FACTORY__ = (#),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n        af: [\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_RESULT__ = (#).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n        ao: [\"\", \"!(#, module.exports = #)\"],\n        aof: [\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n        lf: [\"var XXX, XXXmodule;\", \"!(XXXmodule = { id: YYY, exports: {}, loaded: false }, XXX = #.call(XXXmodule.exports, __webpack_require__, XXXmodule.exports, XXXmodule), XXXmodule.loaded = true, XXX === undefined && (XXX = XXXmodule.exports))\"],\n        lo: [\"var XXX;\", \"!(XXX = #)\"],\n        lof: [\"var XXX, XXXfactory, XXXmodule;\", \"!(XXXfactory = (#), (XXXmodule = { id: YYY, exports: {}, loaded: false }), XXX = (typeof XXXfactory === 'function' ? (XXXfactory.call(XXXmodule.exports, __webpack_require__, XXXmodule.exports, XXXmodule)) : XXXfactory), (XXXmodule.loaded = true), XXX === undefined && (XXX = XXXmodule.exports))\"],\n        laf: [\"var __WEBPACK_AMD_DEFINE_ARRAY__, XXX;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, XXX = ((#).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))\"],\n        lao: [\"var XXX;\", \"!(#, XXX = #)\"],\n        laof: [\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, XXX;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#),\\n\\t\\t\\t\\tXXX = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__))\"]\n      };\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(dependency, source) {\n      var branch = this.branch(dependency);\n      var defAndText = this.definitions[branch];\n      var definitions = defAndText[0];\n      var text = defAndText[1];\n      this.replace(dependency, source, definitions, text);\n    }\n  }, {\n    key: \"localModuleVar\",\n    value: function localModuleVar(dependency) {\n      return dependency.localModule && dependency.localModule.used && dependency.localModule.variableName();\n    }\n  }, {\n    key: \"branch\",\n    value: function branch(dependency) {\n      var localModuleVar = this.localModuleVar(dependency) ? \"l\" : \"\";\n      var arrayRange = dependency.arrayRange ? \"a\" : \"\";\n      var objectRange = dependency.objectRange ? \"o\" : \"\";\n      var functionRange = dependency.functionRange ? \"f\" : \"\";\n      return localModuleVar + arrayRange + objectRange + functionRange;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(dependency, source, definition, text) {\n      var localModuleVar = this.localModuleVar(dependency);\n\n      if (localModuleVar) {\n        text = text.replace(/XXX/g, localModuleVar.replace(/\\$/g, \"$$$$\"));\n        definition = definition.replace(/XXX/g, localModuleVar.replace(/\\$/g, \"$$$$\"));\n      }\n\n      if (dependency.namedModule) {\n        text = text.replace(/YYY/g, JSON.stringify(dependency.namedModule));\n      }\n\n      var texts = text.split(\"#\");\n      if (definition) source.insert(0, definition);\n      var current = dependency.range[0];\n\n      if (dependency.arrayRange) {\n        source.replace(current, dependency.arrayRange[0] - 1, texts.shift());\n        current = dependency.arrayRange[1];\n      }\n\n      if (dependency.objectRange) {\n        source.replace(current, dependency.objectRange[0] - 1, texts.shift());\n        current = dependency.objectRange[1];\n      } else if (dependency.functionRange) {\n        source.replace(current, dependency.functionRange[0] - 1, texts.shift());\n        current = dependency.functionRange[1];\n      }\n\n      source.replace(current, dependency.range[1] - 1, texts.shift());\n      if (texts.length > 0) throw new Error(\"Implementation error\");\n    }\n  }]);\n\n  return AMDDefineDependencyTemplate;\n}();\n\nmodule.exports = AMDDefineDependency;","map":null,"metadata":{},"sourceType":"module"}