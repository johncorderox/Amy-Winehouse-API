{"ast":null,"code":"function _sliceIterator(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _slicedToArray(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    return _sliceIterator(arr, i);\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar STOP = Symbol(\"STOP\");\n\nfunction makeTransition(regex, nextState) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$n = _ref.n,\n      n = _ref$n === void 0 ? 1 : _ref$n,\n      allowedSeparator = _ref.allowedSeparator;\n\n  return function (instance) {\n    if (allowedSeparator) {\n      if (instance.input[instance.ptr] === allowedSeparator) {\n        if (regex.test(instance.input.substring(instance.ptr - 1, instance.ptr))) {\n          // Consume the separator and stay in current state\n          return [instance.currentState, 1];\n        } else {\n          return [instance.terminatingState, 0];\n        }\n      }\n    }\n\n    if (regex.test(instance.input.substring(instance.ptr, instance.ptr + n))) {\n      return [nextState, n];\n    }\n\n    return false;\n  };\n}\n\nfunction combineTransitions(transitions) {\n  return function () {\n    var match = false;\n    var currentTransitions = transitions[this.currentState] || [];\n\n    for (var i = 0; i < currentTransitions.length; ++i) {\n      match = currentTransitions[i](this);\n\n      if (match !== false) {\n        break;\n      }\n    }\n\n    return match || [this.terminatingState, 0];\n  };\n}\n\nvar FSM = /*#__PURE__*/function () {\n  function FSM(transitions, initialState) {\n    var terminatingState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STOP;\n\n    _classCallCheck(this, FSM);\n\n    this.initialState = initialState;\n    this.terminatingState = terminatingState;\n\n    if (terminatingState === STOP || !transitions[terminatingState]) {\n      transitions[terminatingState] = [];\n    }\n\n    this.transitionFunction = combineTransitions.call(this, transitions);\n  }\n\n  _createClass(FSM, [{\n    key: \"run\",\n    value: function run(input) {\n      this.input = input;\n      this.ptr = 0;\n      this.currentState = this.initialState;\n      var value = \"\";\n      var eatLength, nextState;\n\n      while (this.currentState !== this.terminatingState && this.ptr < this.input.length) {\n        var _transitionFunction = this.transitionFunction();\n\n        var _transitionFunction2 = _slicedToArray(_transitionFunction, 2);\n\n        nextState = _transitionFunction2[0];\n        eatLength = _transitionFunction2[1];\n        value += this.input.substring(this.ptr, this.ptr += eatLength);\n        this.currentState = nextState;\n      }\n\n      return value;\n    }\n  }]);\n\n  return FSM;\n}();\n\nexport { makeTransition, FSM };","map":null,"metadata":{},"sourceType":"module"}