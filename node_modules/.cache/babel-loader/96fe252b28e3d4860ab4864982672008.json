{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar watcherManager = require(\"./watcherManager\");\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nfunction Watchpack(options) {\n  EventEmitter.call(this);\n  if (!options) options = {};\n  if (!options.aggregateTimeout) options.aggregateTimeout = 200;\n  this.options = options;\n  this.watcherOptions = {\n    ignored: options.ignored,\n    poll: options.poll\n  };\n  this.fileWatchers = [];\n  this.dirWatchers = [];\n  this.mtimes = Object.create(null);\n  this.paused = false;\n  this.aggregatedChanges = [];\n  this.aggregatedRemovals = [];\n  this.aggregateTimeout = 0;\n  this._onTimeout = this._onTimeout.bind(this);\n}\n\nmodule.exports = Watchpack;\nWatchpack.prototype = Object.create(EventEmitter.prototype);\n\nWatchpack.prototype.watch = function watch(files, directories, startTime) {\n  this.paused = false;\n  var oldFileWatchers = this.fileWatchers;\n  var oldDirWatchers = this.dirWatchers;\n  this.fileWatchers = files.map(function (file) {\n    return this._fileWatcher(file, watcherManager.watchFile(file, this.watcherOptions, startTime));\n  }, this);\n  this.dirWatchers = directories.map(function (dir) {\n    return this._dirWatcher(dir, watcherManager.watchDirectory(dir, this.watcherOptions, startTime));\n  }, this);\n  oldFileWatchers.forEach(function (w) {\n    w.close();\n  }, this);\n  oldDirWatchers.forEach(function (w) {\n    w.close();\n  }, this);\n};\n\nWatchpack.prototype.close = function resume() {\n  this.paused = true;\n  if (this.aggregateTimeout) clearTimeout(this.aggregateTimeout);\n  this.fileWatchers.forEach(function (w) {\n    w.close();\n  }, this);\n  this.dirWatchers.forEach(function (w) {\n    w.close();\n  }, this);\n  this.fileWatchers.length = 0;\n  this.dirWatchers.length = 0;\n};\n\nWatchpack.prototype.pause = function pause() {\n  this.paused = true;\n  if (this.aggregateTimeout) clearTimeout(this.aggregateTimeout);\n};\n\nfunction addWatchersToArray(watchers, array) {\n  watchers.forEach(function (w) {\n    if (array.indexOf(w.directoryWatcher) < 0) {\n      array.push(w.directoryWatcher);\n      addWatchersToArray(Object.keys(w.directoryWatcher.directories).reduce(function (a, dir) {\n        if (w.directoryWatcher.directories[dir] !== true) a.push(w.directoryWatcher.directories[dir]);\n        return a;\n      }, []), array);\n    }\n  });\n}\n\nWatchpack.prototype.getTimes = function () {\n  var directoryWatchers = [];\n  addWatchersToArray(this.fileWatchers.concat(this.dirWatchers), directoryWatchers);\n  var obj = Object.create(null);\n  directoryWatchers.forEach(function (w) {\n    var times = w.getTimes();\n    Object.keys(times).forEach(function (file) {\n      obj[file] = times[file];\n    });\n  });\n  return obj;\n};\n\nWatchpack.prototype._fileWatcher = function _fileWatcher(file, watcher) {\n  watcher.on(\"change\", function (mtime, type) {\n    this._onChange(file, mtime, file, type);\n  }.bind(this));\n  watcher.on(\"remove\", function (type) {\n    this._onRemove(file, file, type);\n  }.bind(this));\n  return watcher;\n};\n\nWatchpack.prototype._dirWatcher = function _dirWatcher(item, watcher) {\n  watcher.on(\"change\", function (file, mtime, type) {\n    this._onChange(item, mtime, file, type);\n  }.bind(this));\n  return watcher;\n};\n\nWatchpack.prototype._onChange = function _onChange(item, mtime, file) {\n  file = file || item;\n  this.mtimes[file] = mtime;\n  if (this.paused) return;\n  this.emit(\"change\", file, mtime);\n  if (this.aggregateTimeout) clearTimeout(this.aggregateTimeout);\n  if (this.aggregatedChanges.indexOf(item) < 0) this.aggregatedChanges.push(item);\n  this.aggregateTimeout = setTimeout(this._onTimeout, this.options.aggregateTimeout);\n};\n\nWatchpack.prototype._onRemove = function _onRemove(item, file) {\n  file = file || item;\n  delete this.mtimes[item];\n  if (this.paused) return;\n  this.emit(\"remove\", item);\n  if (this.aggregateTimeout) clearTimeout(this.aggregateTimeout);\n  if (this.aggregatedRemovals.indexOf(item) < 0) this.aggregatedRemovals.push(item);\n  this.aggregateTimeout = setTimeout(this._onTimeout, this.options.aggregateTimeout);\n};\n\nWatchpack.prototype._onTimeout = function _onTimeout() {\n  this.aggregateTimeout = 0;\n  var changes = this.aggregatedChanges;\n  var removals = this.aggregatedRemovals;\n  this.aggregatedChanges = [];\n  this.aggregatedRemovals = [];\n  this.emit(\"aggregated\", changes, removals);\n};","map":null,"metadata":{},"sourceType":"module"}