{"ast":null,"code":"/*\nMIT License http://www.opensource.org/licenses/mit-license.php\nAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar util = require(\"util\");\n\nvar SortableSet = require(\"./util/SortableSet\");\n\nvar intersect = require(\"./util/SetHelpers\").intersect;\n\nvar GraphHelpers = require(\"./GraphHelpers\");\n\nvar Entrypoint = require(\"./Entrypoint\");\n\nvar debugId = 1000;\nvar ERR_CHUNK_ENTRY = \"Chunk.entry was removed. Use hasRuntime()\";\nvar ERR_CHUNK_INITIAL = \"Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\";\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/**\n *  @typedef {Object} WithId an object who has an id property *\n *  @property {string | number} id the id of the object\n */\n\n/**\n * Compare two Modules based on their ids for sorting\n * @param {Module} a module\n * @param {Module} b module\n * @returns {-1|0|1} sort value\n */\n// TODO use @callback\n\n/** @typedef {(a: Module, b: Module) => -1|0|1} ModuleSortPredicate */\n\n/** @typedef {(m: Module) => boolean} ModuleFilterPredicate */\n\n/** @typedef {(c: Chunk) => boolean} ChunkFilterPredicate */\n\nvar sortModuleById = function sortModuleById(a, b) {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * Compare two ChunkGroups based on their ids for sorting\n * @param {ChunkGroup} a chunk group\n * @param {ChunkGroup} b chunk group\n * @returns {-1|0|1} sort value\n */\n\n\nvar sortChunkGroupById = function sortChunkGroupById(a, b) {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * Compare two Identifiables , based on their ids for sorting\n * @param {Module} a first object with ident fn\n * @param {Module} b second object with ident fn\n * @returns {-1|0|1} The order number of the sort\n */\n\n\nvar sortByIdentifier = function sortByIdentifier(a, b) {\n  if (a.identifier() > b.identifier()) return 1;\n  if (a.identifier() < b.identifier()) return -1;\n  return 0;\n};\n/**\n * @returns {string} a concatenation of module identifiers sorted\n * @param {SortableSet} set to pull module identifiers from\n */\n\n\nvar _getModulesIdent = function getModulesIdent(set) {\n  set.sort();\n  var str = \"\";\n\n  var _iterator = _createForOfIteratorHelper(set),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var m = _step.value;\n      str += m.identifier() + \"#\";\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return str;\n};\n/**\n * @template T\n * @param {SortableSet<T>} set the sortable set to convert to array\n * @returns {Array<T>} the array returned from Array.from(set)\n */\n\n\nvar getArray = function getArray(set) {\n  return Array.from(set);\n};\n/**\n * @param {SortableSet<Module>} set the sortable Set to get the count/size of\n * @returns {number} the size of the modules\n */\n\n\nvar getModulesSize = function getModulesSize(set) {\n  var size = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(set),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _module = _step2.value;\n      size += _module.size();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return size;\n};\n/**\n * A Chunk is a unit of encapsulation for Modules.\n * Chunks are \"rendered\" into bundles that get emitted when the build completes.\n */\n\n\nvar Chunk = /*#__PURE__*/function () {\n  /**\n   * @param {string=} name of chunk being created, is optional (for subclasses)\n   */\n  function Chunk(name) {\n    _classCallCheck(this, Chunk);\n\n    /** @type {number | null} */\n    this.id = null;\n    /** @type {number[] | null} */\n\n    this.ids = null;\n    /** @type {number} */\n\n    this.debugId = debugId++;\n    /** @type {string} */\n\n    this.name = name;\n    /** @type {boolean} */\n\n    this.preventIntegration = false;\n    /** @type {Module=} */\n\n    this.entryModule = undefined;\n    /** @private @type {SortableSet<Module>} */\n\n    this._modules = new SortableSet(undefined, sortByIdentifier);\n    /** @type {string?} */\n\n    this.filenameTemplate = undefined;\n    /** @private @type {SortableSet<ChunkGroup>} */\n\n    this._groups = new SortableSet(undefined, sortChunkGroupById);\n    /** @type {string[]} */\n\n    this.files = [];\n    /** @type {boolean} */\n\n    this.rendered = false;\n    /** @type {string=} */\n\n    this.hash = undefined;\n    /** @type {Object} */\n\n    this.contentHash = Object.create(null);\n    /** @type {string=} */\n\n    this.renderedHash = undefined;\n    /** @type {string=} */\n\n    this.chunkReason = undefined;\n    /** @type {boolean} */\n\n    this.extraAsync = false;\n    this.removedModules = undefined;\n  }\n  /**\n   * @deprecated Chunk.entry has been deprecated. Please use .hasRuntime() instead\n   * @returns {never} Throws an error trying to access this property\n   */\n\n\n  _createClass(Chunk, [{\n    key: \"entry\",\n    get: function get() {\n      throw new Error(ERR_CHUNK_ENTRY);\n    }\n    /**\n     * @deprecated .entry has been deprecated. Please use .hasRuntime() instead\n     * @param {never} data The data that was attempting to be set\n     * @returns {never} Throws an error trying to access this property\n     */\n    ,\n    set: function set(data) {\n      throw new Error(ERR_CHUNK_ENTRY);\n    }\n    /**\n     * @deprecated Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\n     * @returns {never} Throws an error trying to access this property\n     */\n\n  }, {\n    key: \"initial\",\n    get: function get() {\n      throw new Error(ERR_CHUNK_INITIAL);\n    }\n    /**\n     * @deprecated Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\n     * @param {never} data The data attempting to be set\n     * @returns {never} Throws an error trying to access this property\n     */\n    ,\n    set: function set(data) {\n      throw new Error(ERR_CHUNK_INITIAL);\n    }\n    /**\n     * @returns {boolean} whether or not the Chunk will have a runtime\n     */\n\n  }, {\n    key: \"hasRuntime\",\n    value: function hasRuntime() {\n      var _iterator3 = _createForOfIteratorHelper(this._groups),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var chunkGroup = _step3.value;\n\n          if (chunkGroup.isInitial() && chunkGroup instanceof Entrypoint && chunkGroup.getRuntimeChunk() === this) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return false;\n    }\n    /**\n     * @returns {boolean} whether or not this chunk can be an initial chunk\n     */\n\n  }, {\n    key: \"canBeInitial\",\n    value: function canBeInitial() {\n      var _iterator4 = _createForOfIteratorHelper(this._groups),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var chunkGroup = _step4.value;\n          if (chunkGroup.isInitial()) return true;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return false;\n    }\n    /**\n     * @returns {boolean} whether this chunk can only be an initial chunk\n     */\n\n  }, {\n    key: \"isOnlyInitial\",\n    value: function isOnlyInitial() {\n      if (this._groups.size <= 0) return false;\n\n      var _iterator5 = _createForOfIteratorHelper(this._groups),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var chunkGroup = _step5.value;\n          if (!chunkGroup.isInitial()) return false;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return true;\n    }\n    /**\n     * @returns {boolean} if this chunk contains the entry module\n     */\n\n  }, {\n    key: \"hasEntryModule\",\n    value: function hasEntryModule() {\n      return !!this.entryModule;\n    }\n    /**\n     * @param {Module} module the module that will be added to this chunk.\n     * @returns {boolean} returns true if the chunk doesn't have the module and it was added\n     */\n\n  }, {\n    key: \"addModule\",\n    value: function addModule(module) {\n      if (!this._modules.has(module)) {\n        this._modules.add(module);\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @param {Module} module the module that will be removed from this chunk\n     * @returns {boolean} returns true if chunk exists and is successfully deleted\n     */\n\n  }, {\n    key: \"removeModule\",\n    value: function removeModule(module) {\n      if (this._modules[\"delete\"](module)) {\n        module.removeChunk(this);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @param {Module[]} modules the new modules to be set\n     * @returns {void} set new modules to this chunk and return nothing\n     */\n\n  }, {\n    key: \"setModules\",\n    value: function setModules(modules) {\n      this._modules = new SortableSet(modules, sortByIdentifier);\n    }\n    /**\n     * @returns {number} the amount of modules in chunk\n     */\n\n  }, {\n    key: \"getNumberOfModules\",\n    value: function getNumberOfModules() {\n      return this._modules.size;\n    }\n    /**\n     * @returns {SortableSet} return the modules SortableSet for this chunk\n     */\n\n  }, {\n    key: \"modulesIterable\",\n    get: function get() {\n      return this._modules;\n    }\n    /**\n     * @param {ChunkGroup} chunkGroup the chunkGroup the chunk is being added\n     * @returns {boolean} returns true if chunk is not apart of chunkGroup and is added successfully\n     */\n\n  }, {\n    key: \"addGroup\",\n    value: function addGroup(chunkGroup) {\n      if (this._groups.has(chunkGroup)) return false;\n\n      this._groups.add(chunkGroup);\n\n      return true;\n    }\n    /**\n     * @param {ChunkGroup} chunkGroup the chunkGroup the chunk is being removed from\n     * @returns {boolean} returns true if chunk does exist in chunkGroup and is removed\n     */\n\n  }, {\n    key: \"removeGroup\",\n    value: function removeGroup(chunkGroup) {\n      if (!this._groups.has(chunkGroup)) return false;\n\n      this._groups[\"delete\"](chunkGroup);\n\n      return true;\n    }\n    /**\n     * @param {ChunkGroup} chunkGroup the chunkGroup to check\n     * @returns {boolean} returns true if chunk has chunkGroup reference and exists in chunkGroup\n     */\n\n  }, {\n    key: \"isInGroup\",\n    value: function isInGroup(chunkGroup) {\n      return this._groups.has(chunkGroup);\n    }\n    /**\n     * @returns {number} the amount of groups said chunk is in\n     */\n\n  }, {\n    key: \"getNumberOfGroups\",\n    value: function getNumberOfGroups() {\n      return this._groups.size;\n    }\n    /**\n     * @returns {SortableSet<ChunkGroup>} the chunkGroups that said chunk is referenced in\n     */\n\n  }, {\n    key: \"groupsIterable\",\n    get: function get() {\n      return this._groups;\n    }\n    /**\n     * @param {Chunk} otherChunk the chunk to compare itself with\n     * @returns {-1|0|1} this is a comparitor function like sort and returns -1, 0, or 1 based on sort order\n     */\n\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(otherChunk) {\n      if (this.name && !otherChunk.name) return -1;\n      if (!this.name && otherChunk.name) return 1;\n      if (this.name < otherChunk.name) return -1;\n      if (this.name > otherChunk.name) return 1;\n      if (this._modules.size > otherChunk._modules.size) return -1;\n      if (this._modules.size < otherChunk._modules.size) return 1;\n\n      this._modules.sort();\n\n      otherChunk._modules.sort();\n\n      var a = this._modules[Symbol.iterator]();\n\n      var b = otherChunk._modules[Symbol.iterator](); // eslint-disable-next-line no-constant-condition\n\n\n      while (true) {\n        var aItem = a.next();\n        if (aItem.done) return 0;\n        var bItem = b.next();\n        var aModuleIdentifier = aItem.value.identifier();\n        var bModuleIdentifier = bItem.value.identifier();\n        if (aModuleIdentifier < bModuleIdentifier) return -1;\n        if (aModuleIdentifier > bModuleIdentifier) return 1;\n      }\n    }\n    /**\n     * @param {Module} module Module to check\n     * @returns {boolean} returns true if module does exist in this chunk\n     */\n\n  }, {\n    key: \"containsModule\",\n    value: function containsModule(module) {\n      return this._modules.has(module);\n    }\n    /**\n     * @returns {Module[]} an array of modules (do not modify)\n     */\n\n  }, {\n    key: \"getModules\",\n    value: function getModules() {\n      return this._modules.getFromCache(getArray);\n    }\n  }, {\n    key: \"getModulesIdent\",\n    value: function getModulesIdent() {\n      return this._modules.getFromUnorderedCache(_getModulesIdent);\n    }\n    /**\n     * @param {string=} reason reason why chunk is removed\n     * @returns {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(reason) {\n      // cleanup modules\n      // Array.from is used here to create a clone, because removeChunk modifies this._modules\n      for (var _i = 0, _Array$from = Array.from(this._modules); _i < _Array$from.length; _i++) {\n        var _module2 = _Array$from[_i];\n\n        _module2.removeChunk(this);\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this._groups),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var chunkGroup = _step6.value;\n          chunkGroup.removeChunk(this);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n    /**\n     *\n     * @param {Module} module module to move\n     * @param {Chunk} otherChunk other chunk to move it to\n     * @returns {void}\n     */\n\n  }, {\n    key: \"moveModule\",\n    value: function moveModule(module, otherChunk) {\n      GraphHelpers.disconnectChunkAndModule(this, module);\n      GraphHelpers.connectChunkAndModule(otherChunk, module);\n      module.rewriteChunkInReasons(this, [otherChunk]);\n    }\n    /**\n     *\n     * @param {Chunk} otherChunk the chunk to integrate with\n     * @param {string} reason reason why the module is being integrated\n     * @returns {boolean} returns true or false if integration succeeds or fails\n     */\n\n  }, {\n    key: \"integrate\",\n    value: function integrate(otherChunk, reason) {\n      if (!this.canBeIntegrated(otherChunk)) {\n        return false;\n      } // Pick a new name for the integrated chunk\n\n\n      if (this.name && otherChunk.name) {\n        if (this.hasEntryModule() === otherChunk.hasEntryModule()) {\n          // When both chunks have entry modules or none have one, use\n          // shortest name\n          if (this.name.length !== otherChunk.name.length) {\n            this.name = this.name.length < otherChunk.name.length ? this.name : otherChunk.name;\n          } else {\n            this.name = this.name < otherChunk.name ? this.name : otherChunk.name;\n          }\n        } else if (otherChunk.hasEntryModule()) {\n          // Pick the name of the chunk with the entry module\n          this.name = otherChunk.name;\n        }\n      } else if (otherChunk.name) {\n        this.name = otherChunk.name;\n      } // Array.from is used here to create a clone, because moveModule modifies otherChunk._modules\n\n\n      for (var _i2 = 0, _Array$from2 = Array.from(otherChunk._modules); _i2 < _Array$from2.length; _i2++) {\n        var _module3 = _Array$from2[_i2];\n        otherChunk.moveModule(_module3, this);\n      }\n\n      otherChunk._modules.clear();\n\n      if (otherChunk.entryModule) {\n        this.entryModule = otherChunk.entryModule;\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(otherChunk._groups),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var chunkGroup = _step7.value;\n          chunkGroup.replaceChunk(otherChunk, this);\n          this.addGroup(chunkGroup);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      otherChunk._groups.clear();\n\n      return true;\n    }\n    /**\n     * @param {Chunk} newChunk the new chunk that will be split out of the current chunk\n     * @returns {void}\n     */\n\n  }, {\n    key: \"split\",\n    value: function split(newChunk) {\n      var _iterator8 = _createForOfIteratorHelper(this._groups),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var chunkGroup = _step8.value;\n          chunkGroup.insertChunk(newChunk, this);\n          newChunk.addGroup(chunkGroup);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._modules.size === 0;\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(\"\".concat(this.id, \" \"));\n      hash.update(this.ids ? this.ids.join(\",\") : \"\");\n      hash.update(\"\".concat(this.name || \"\", \" \"));\n\n      var _iterator9 = _createForOfIteratorHelper(this._modules),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var m = _step9.value;\n          hash.update(m.hash);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"canBeIntegrated\",\n    value: function canBeIntegrated(otherChunk) {\n      if (this.preventIntegration || otherChunk.preventIntegration) {\n        return false;\n      }\n      /**\n       * @param {Chunk} a chunk\n       * @param {Chunk} b chunk\n       * @returns {boolean} true, if a is always available when b is reached\n       */\n\n\n      var isAvailable = function isAvailable(a, b) {\n        var queue = new Set(b.groupsIterable);\n\n        var _iterator10 = _createForOfIteratorHelper(queue),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var chunkGroup = _step10.value;\n            if (a.isInGroup(chunkGroup)) continue;\n            if (chunkGroup.isInitial()) return false;\n\n            var _iterator11 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                _step11;\n\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var parent = _step11.value;\n                queue.add(parent);\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        return true;\n      };\n\n      var selfHasRuntime = this.hasRuntime();\n      var otherChunkHasRuntime = otherChunk.hasRuntime();\n\n      if (selfHasRuntime !== otherChunkHasRuntime) {\n        if (selfHasRuntime) {\n          return isAvailable(this, otherChunk);\n        } else if (otherChunkHasRuntime) {\n          return isAvailable(otherChunk, this);\n        } else {\n          return false;\n        }\n      }\n\n      if (this.hasEntryModule() || otherChunk.hasEntryModule()) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     *\n     * @param {number} size the size\n     * @param {Object} options the options passed in\n     * @returns {number} the multiplier returned\n     */\n\n  }, {\n    key: \"addMultiplierAndOverhead\",\n    value: function addMultiplierAndOverhead(size, options) {\n      var overhead = typeof options.chunkOverhead === \"number\" ? options.chunkOverhead : 10000;\n      var multiplicator = this.canBeInitial() ? options.entryChunkMultiplicator || 10 : 1;\n      return size * multiplicator + overhead;\n    }\n    /**\n     * @returns {number} the size of all modules\n     */\n\n  }, {\n    key: \"modulesSize\",\n    value: function modulesSize() {\n      return this._modules.getFromUnorderedCache(getModulesSize);\n    }\n    /**\n     * @param {Object} options the size display options\n     * @returns {number} the chunk size\n     */\n\n  }, {\n    key: \"size\",\n    value: function size() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.addMultiplierAndOverhead(this.modulesSize(), options);\n    }\n    /**\n     * @param {Chunk} otherChunk the other chunk\n     * @param {TODO} options the options for this function\n     * @returns {number | false} the size, or false if it can't be integrated\n     */\n\n  }, {\n    key: \"integratedSize\",\n    value: function integratedSize(otherChunk, options) {\n      // Chunk if it's possible to integrate this chunk\n      if (!this.canBeIntegrated(otherChunk)) {\n        return false;\n      }\n\n      var integratedModulesSize = this.modulesSize(); // only count modules that do not exist in this chunk!\n\n      var _iterator12 = _createForOfIteratorHelper(otherChunk._modules),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var otherModule = _step12.value;\n\n          if (!this._modules.has(otherModule)) {\n            integratedModulesSize += otherModule.size();\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      return this.addMultiplierAndOverhead(integratedModulesSize, options);\n    }\n    /**\n     * @param {function(Module, Module): -1|0|1=} sortByFn a predicate function used to sort modules\n     * @returns {void}\n     */\n\n  }, {\n    key: \"sortModules\",\n    value: function sortModules(sortByFn) {\n      this._modules.sortWith(sortByFn || sortModuleById);\n    }\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      this.sortModules();\n    }\n    /**\n     * @returns {Set<Chunk>} a set of all the async chunks\n     */\n\n  }, {\n    key: \"getAllAsyncChunks\",\n    value: function getAllAsyncChunks() {\n      var queue = new Set();\n      var chunks = new Set();\n      var initialChunks = intersect(Array.from(this.groupsIterable, function (g) {\n        return new Set(g.chunks);\n      }));\n\n      var _iterator13 = _createForOfIteratorHelper(this.groupsIterable),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var chunkGroup = _step13.value;\n\n          var _iterator15 = _createForOfIteratorHelper(chunkGroup.childrenIterable),\n              _step15;\n\n          try {\n            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n              var child = _step15.value;\n              queue.add(child);\n            }\n          } catch (err) {\n            _iterator15.e(err);\n          } finally {\n            _iterator15.f();\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      var _iterator14 = _createForOfIteratorHelper(queue),\n          _step14;\n\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var _chunkGroup = _step14.value;\n\n          var _iterator16 = _createForOfIteratorHelper(_chunkGroup.chunks),\n              _step16;\n\n          try {\n            for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n              var chunk = _step16.value;\n\n              if (!initialChunks.has(chunk)) {\n                chunks.add(chunk);\n              }\n            }\n          } catch (err) {\n            _iterator16.e(err);\n          } finally {\n            _iterator16.f();\n          }\n\n          var _iterator17 = _createForOfIteratorHelper(_chunkGroup.childrenIterable),\n              _step17;\n\n          try {\n            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n              var _child = _step17.value;\n              queue.add(_child);\n            }\n          } catch (err) {\n            _iterator17.e(err);\n          } finally {\n            _iterator17.f();\n          }\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n\n      return chunks;\n    }\n    /**\n     * @typedef {Object} ChunkMaps\n     * @property {Record<string|number, string>} hash\n     * @property {Record<string|number, Record<string, string>>} contentHash\n     * @property {Record<string|number, string>} name\n     */\n\n    /**\n     * @param {boolean} realHash should the full hash or the rendered hash be used\n     * @returns {ChunkMaps} the chunk map information\n     */\n\n  }, {\n    key: \"getChunkMaps\",\n    value: function getChunkMaps(realHash) {\n      /** @type {Record<string|number, string>} */\n      var chunkHashMap = Object.create(null);\n      /** @type {Record<string|number, Record<string, string>>} */\n\n      var chunkContentHashMap = Object.create(null);\n      /** @type {Record<string|number, string>} */\n\n      var chunkNameMap = Object.create(null);\n\n      var _iterator18 = _createForOfIteratorHelper(this.getAllAsyncChunks()),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var chunk = _step18.value;\n          chunkHashMap[chunk.id] = realHash ? chunk.hash : chunk.renderedHash;\n\n          for (var _i3 = 0, _Object$keys = Object.keys(chunk.contentHash); _i3 < _Object$keys.length; _i3++) {\n            var key = _Object$keys[_i3];\n\n            if (!chunkContentHashMap[key]) {\n              chunkContentHashMap[key] = Object.create(null);\n            }\n\n            chunkContentHashMap[key][chunk.id] = chunk.contentHash[key];\n          }\n\n          if (chunk.name) {\n            chunkNameMap[chunk.id] = chunk.name;\n          }\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      return {\n        hash: chunkHashMap,\n        contentHash: chunkContentHashMap,\n        name: chunkNameMap\n      };\n    }\n    /**\n     * @returns {Record<string, Set<TODO>[]>} a record object of names to lists of child ids(?)\n     */\n\n  }, {\n    key: \"getChildIdsByOrders\",\n    value: function getChildIdsByOrders() {\n      var lists = new Map();\n\n      var _iterator19 = _createForOfIteratorHelper(this.groupsIterable),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var group = _step19.value;\n\n          if (group.chunks[group.chunks.length - 1] === this) {\n            var _iterator21 = _createForOfIteratorHelper(group.childrenIterable),\n                _step21;\n\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var childGroup = _step21.value;\n\n                // TODO webpack 5 remove this check for options\n                if (_typeof(childGroup.options) === \"object\") {\n                  for (var _i4 = 0, _Object$keys2 = Object.keys(childGroup.options); _i4 < _Object$keys2.length; _i4++) {\n                    var key = _Object$keys2[_i4];\n\n                    if (key.endsWith(\"Order\")) {\n                      var name = key.substr(0, key.length - \"Order\".length);\n                      var list = lists.get(name);\n                      if (list === undefined) lists.set(name, list = []);\n                      list.push({\n                        order: childGroup.options[key],\n                        group: childGroup\n                      });\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      var result = Object.create(null);\n\n      var _iterator20 = _createForOfIteratorHelper(lists),\n          _step20;\n\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var _ref3 = _step20.value;\n\n          var _ref2 = _slicedToArray(_ref3, 2);\n\n          var _name = _ref2[0];\n          var _list = _ref2[1];\n\n          _list.sort(function (a, b) {\n            var cmp = b.order - a.order;\n            if (cmp !== 0) return cmp; // TODO webpack 5 remove this check of compareTo\n\n            if (a.group.compareTo) {\n              return a.group.compareTo(b.group);\n            }\n\n            return 0;\n          });\n\n          result[_name] = Array.from(_list.reduce(function (set, item) {\n            var _iterator22 = _createForOfIteratorHelper(item.group.chunks),\n                _step22;\n\n            try {\n              for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n                var chunk = _step22.value;\n                set.add(chunk.id);\n              }\n            } catch (err) {\n              _iterator22.e(err);\n            } finally {\n              _iterator22.f();\n            }\n\n            return set;\n          }, new Set()));\n        }\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getChildIdsByOrdersMap\",\n    value: function getChildIdsByOrdersMap(includeDirectChildren) {\n      var chunkMaps = Object.create(null);\n\n      var addChildIdsByOrdersToMap = function addChildIdsByOrdersToMap(chunk) {\n        var data = chunk.getChildIdsByOrders();\n\n        for (var _i5 = 0, _Object$keys3 = Object.keys(data); _i5 < _Object$keys3.length; _i5++) {\n          var key = _Object$keys3[_i5];\n          var chunkMap = chunkMaps[key];\n\n          if (chunkMap === undefined) {\n            chunkMaps[key] = chunkMap = Object.create(null);\n          }\n\n          chunkMap[chunk.id] = data[key];\n        }\n      };\n\n      if (includeDirectChildren) {\n        var chunks = new Set();\n\n        var _iterator23 = _createForOfIteratorHelper(this.groupsIterable),\n            _step23;\n\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var chunkGroup = _step23.value;\n\n            var _iterator25 = _createForOfIteratorHelper(chunkGroup.chunks),\n                _step25;\n\n            try {\n              for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n                var chunk = _step25.value;\n                chunks.add(chunk);\n              }\n            } catch (err) {\n              _iterator25.e(err);\n            } finally {\n              _iterator25.f();\n            }\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n\n        var _iterator24 = _createForOfIteratorHelper(chunks),\n            _step24;\n\n        try {\n          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n            var _chunk = _step24.value;\n            addChildIdsByOrdersToMap(_chunk);\n          }\n        } catch (err) {\n          _iterator24.e(err);\n        } finally {\n          _iterator24.f();\n        }\n      }\n\n      var _iterator26 = _createForOfIteratorHelper(this.getAllAsyncChunks()),\n          _step26;\n\n      try {\n        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n          var _chunk2 = _step26.value;\n          addChildIdsByOrdersToMap(_chunk2);\n        }\n      } catch (err) {\n        _iterator26.e(err);\n      } finally {\n        _iterator26.f();\n      }\n\n      return chunkMaps;\n    }\n    /**\n     * @typedef {Object} ChunkModuleMaps\n     * @property {Record<string|number, (string|number)[]>} id\n     * @property {Record<string|number, string>} hash\n     */\n\n    /**\n     * @param {ModuleFilterPredicate} filterFn function used to filter modules\n     * @returns {ChunkModuleMaps} module map information\n     */\n\n  }, {\n    key: \"getChunkModuleMaps\",\n    value: function getChunkModuleMaps(filterFn) {\n      /** @type {Record<string|number, (string|number)[]>} */\n      var chunkModuleIdMap = Object.create(null);\n      /** @type {Record<string|number, string>} */\n\n      var chunkModuleHashMap = Object.create(null);\n\n      var _iterator27 = _createForOfIteratorHelper(this.getAllAsyncChunks()),\n          _step27;\n\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var chunk = _step27.value;\n\n          /** @type {(string|number)[]} */\n          var array = void 0;\n\n          var _iterator28 = _createForOfIteratorHelper(chunk.modulesIterable),\n              _step28;\n\n          try {\n            for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n              var _module4 = _step28.value;\n\n              if (filterFn(_module4)) {\n                if (array === undefined) {\n                  array = [];\n                  chunkModuleIdMap[chunk.id] = array;\n                }\n\n                array.push(_module4.id);\n                chunkModuleHashMap[_module4.id] = _module4.renderedHash;\n              }\n            }\n          } catch (err) {\n            _iterator28.e(err);\n          } finally {\n            _iterator28.f();\n          }\n\n          if (array !== undefined) {\n            array.sort();\n          }\n        }\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n\n      return {\n        id: chunkModuleIdMap,\n        hash: chunkModuleHashMap\n      };\n    }\n    /**\n     *\n     * @param {function(Module): boolean} filterFn predicate function used to filter modules\n     * @param {function(Chunk): boolean} filterChunkFn predicate function used to filter chunks\n     * @returns {boolean} return true if module exists in graph\n     */\n\n  }, {\n    key: \"hasModuleInGraph\",\n    value: function hasModuleInGraph(filterFn, filterChunkFn) {\n      var queue = new Set(this.groupsIterable);\n      var chunksProcessed = new Set();\n\n      var _iterator29 = _createForOfIteratorHelper(queue),\n          _step29;\n\n      try {\n        for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n          var chunkGroup = _step29.value;\n\n          var _iterator30 = _createForOfIteratorHelper(chunkGroup.chunks),\n              _step30;\n\n          try {\n            for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n              var chunk = _step30.value;\n\n              if (!chunksProcessed.has(chunk)) {\n                chunksProcessed.add(chunk);\n\n                if (!filterChunkFn || filterChunkFn(chunk)) {\n                  var _iterator32 = _createForOfIteratorHelper(chunk.modulesIterable),\n                      _step32;\n\n                  try {\n                    for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n                      var _module5 = _step32.value;\n\n                      if (filterFn(_module5)) {\n                        return true;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator32.e(err);\n                  } finally {\n                    _iterator32.f();\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _iterator30.e(err);\n          } finally {\n            _iterator30.f();\n          }\n\n          var _iterator31 = _createForOfIteratorHelper(chunkGroup.childrenIterable),\n              _step31;\n\n          try {\n            for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n              var child = _step31.value;\n              queue.add(child);\n            }\n          } catch (err) {\n            _iterator31.e(err);\n          } finally {\n            _iterator31.f();\n          }\n        }\n      } catch (err) {\n        _iterator29.e(err);\n      } finally {\n        _iterator29.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Chunk[\".concat(Array.from(this._modules).join(), \"]\");\n    }\n  }]);\n\n  return Chunk;\n}(); // TODO remove in webpack 5\n\n\nObject.defineProperty(Chunk.prototype, \"forEachModule\", {\n  configurable: false,\n  value: util.deprecate(\n  /**\n   * @deprecated\n   * @this {Chunk}\n   * @typedef {function(any, any, Set<any>): void} ForEachModuleCallback\n   * @param {ForEachModuleCallback} fn Callback function\n   * @returns {void}\n   */\n  function (fn) {\n    this._modules.forEach(fn);\n  }, \"Chunk.forEachModule: Use for(const module of chunk.modulesIterable) instead\")\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"mapModules\", {\n  configurable: false,\n  value: util.deprecate(\n  /**\n   * @deprecated\n   * @this {Chunk}\n   * @typedef {function(any, number): any} MapModulesCallback\n   * @param {MapModulesCallback} fn Callback function\n   * @returns {TODO[]} result of mapped modules\n   */\n  function (fn) {\n    return Array.from(this._modules, fn);\n  }, \"Chunk.mapModules: Use Array.from(chunk.modulesIterable, fn) instead\")\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"chunks\", {\n  configurable: false,\n  get: function get() {\n    throw new Error(\"Chunk.chunks: Use ChunkGroup.getChildren() instead\");\n  },\n  set: function set() {\n    throw new Error(\"Chunk.chunks: Use ChunkGroup.add/removeChild() instead\");\n  }\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"parents\", {\n  configurable: false,\n  get: function get() {\n    throw new Error(\"Chunk.parents: Use ChunkGroup.getParents() instead\");\n  },\n  set: function set() {\n    throw new Error(\"Chunk.parents: Use ChunkGroup.add/removeParent() instead\");\n  }\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"blocks\", {\n  configurable: false,\n  get: function get() {\n    throw new Error(\"Chunk.blocks: Use ChunkGroup.getBlocks() instead\");\n  },\n  set: function set() {\n    throw new Error(\"Chunk.blocks: Use ChunkGroup.add/removeBlock() instead\");\n  }\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"entrypoints\", {\n  configurable: false,\n  get: function get() {\n    throw new Error(\"Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead\");\n  },\n  set: function set() {\n    throw new Error(\"Chunk.entrypoints: Use Chunks.addGroup instead\");\n  }\n});\nmodule.exports = Chunk;","map":null,"metadata":{},"sourceType":"module"}