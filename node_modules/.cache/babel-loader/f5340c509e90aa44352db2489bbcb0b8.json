{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Module = require(\"../Module\");\n\nvar Template = require(\"../Template\");\n\nvar Parser = require(\"../Parser\");\n\nvar eslintScope = require(\"eslint-scope\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource,\n    ReplaceSource = _require.ReplaceSource;\n\nvar DependencyReference = require(\"../dependencies/DependencyReference\");\n\nvar HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\n\nvar HarmonyImportSideEffectDependency = require(\"../dependencies/HarmonyImportSideEffectDependency\");\n\nvar HarmonyImportSpecifierDependency = require(\"../dependencies/HarmonyImportSpecifierDependency\");\n\nvar HarmonyExportSpecifierDependency = require(\"../dependencies/HarmonyExportSpecifierDependency\");\n\nvar HarmonyExportExpressionDependency = require(\"../dependencies/HarmonyExportExpressionDependency\");\n\nvar HarmonyExportImportedSpecifierDependency = require(\"../dependencies/HarmonyExportImportedSpecifierDependency\");\n\nvar HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\n\nvar createHash = require(\"../util/createHash\");\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../util/createHash\").Hash} Hash */\n\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n\n\nvar joinIterableWithComma = function joinIterableWithComma(iterable) {\n  // This is more performant than Array.from().join(\", \")\n  // as it doesn't create an array\n  var str = \"\";\n  var first = true;\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      if (first) {\n        first = false;\n      } else {\n        str += \", \";\n      }\n\n      str += item;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return str;\n};\n/**\n * @typedef {Object} ConcatenationEntry\n * @property {\"concatenated\" | \"external\"} type\n * @property {Module} module\n */\n\n\nvar ensureNsObjSource = function ensureNsObjSource(info, moduleToInfoMap, requestShortener, strictHarmonyModule) {\n  if (!info.hasNamespaceObject) {\n    info.hasNamespaceObject = true;\n    var name = info.exportMap.get(true);\n    var nsObj = [\"var \".concat(name, \" = {};\"), \"__webpack_require__.r(\".concat(name, \");\")];\n\n    var _iterator2 = _createForOfIteratorHelper(info.module.buildMeta.providedExports),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var exportName = _step2.value;\n        var finalName = getFinalName(info, exportName, moduleToInfoMap, requestShortener, false, strictHarmonyModule);\n        nsObj.push(\"__webpack_require__.d(\".concat(name, \", \").concat(JSON.stringify(exportName), \", function() { return \").concat(finalName, \"; });\"));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    info.namespaceObjectSource = nsObj.join(\"\\n\") + \"\\n\";\n  }\n};\n\nvar getExternalImport = function getExternalImport(importedModule, info, exportName, asCall, strictHarmonyModule) {\n  var used = importedModule.isUsed(exportName);\n  if (!used) return \"/* unused reexport */undefined\";\n  var comment = used !== exportName ? \" \".concat(Template.toNormalComment(exportName)) : \"\";\n\n  switch (importedModule.buildMeta.exportsType) {\n    case \"named\":\n      if (exportName === \"default\") {\n        return info.name;\n      } else if (exportName === true) {\n        info.interopNamespaceObjectUsed = true;\n        return info.interopNamespaceObjectName;\n      } else {\n        break;\n      }\n\n    case \"namespace\":\n      if (exportName === true) {\n        return info.name;\n      } else {\n        break;\n      }\n\n    default:\n      if (strictHarmonyModule) {\n        if (exportName === \"default\") {\n          return info.name;\n        } else if (exportName === true) {\n          info.interopNamespaceObjectUsed = true;\n          return info.interopNamespaceObjectName;\n        } else {\n          return \"/* non-default import from non-esm module */undefined\";\n        }\n      } else {\n        if (exportName === \"default\") {\n          info.interopDefaultAccessUsed = true;\n          return asCall ? \"\".concat(info.interopDefaultAccessName, \"()\") : \"\".concat(info.interopDefaultAccessName, \".a\");\n        } else if (exportName === true) {\n          return info.name;\n        } else {\n          break;\n        }\n      }\n\n  }\n\n  var reference = \"\".concat(info.name, \"[\").concat(JSON.stringify(used)).concat(comment, \"]\");\n  if (asCall) return \"Object(\".concat(reference, \")\");\n  return reference;\n};\n\nvar getFinalName = function getFinalName(info, exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule) {\n  var alreadyVisited = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Set();\n\n  switch (info.type) {\n    case \"concatenated\":\n      {\n        var directExport = info.exportMap.get(exportName);\n\n        if (directExport) {\n          if (exportName === true) {\n            ensureNsObjSource(info, moduleToInfoMap, requestShortener, strictHarmonyModule);\n          } else if (!info.module.isUsed(exportName)) {\n            return \"/* unused export */ undefined\";\n          }\n\n          if (info.globalExports.has(directExport)) {\n            return directExport;\n          }\n\n          var name = info.internalNames.get(directExport);\n\n          if (!name) {\n            throw new Error(\"The export \\\"\".concat(directExport, \"\\\" in \\\"\").concat(info.module.readableIdentifier(requestShortener), \"\\\" has no internal name\"));\n          }\n\n          return name;\n        }\n\n        var reexport = info.reexportMap.get(exportName);\n\n        if (reexport) {\n          if (alreadyVisited.has(reexport)) {\n            throw new Error(\"Circular reexports \".concat(Array.from(alreadyVisited, function (e) {\n              return \"\\\"\".concat(e.module.readableIdentifier(requestShortener), \"\\\".\").concat(e.exportName);\n            }).join(\" --> \"), \" -(circular)-> \\\"\").concat(reexport.module.readableIdentifier(requestShortener), \"\\\".\").concat(reexport.exportName));\n          }\n\n          alreadyVisited.add(reexport);\n          var refInfo = moduleToInfoMap.get(reexport.module);\n\n          if (refInfo) {\n            // module is in the concatenation\n            return getFinalName(refInfo, reexport.exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule, alreadyVisited);\n          }\n        }\n\n        var problem = \"Cannot get final name for export \\\"\".concat(exportName, \"\\\" in \\\"\").concat(info.module.readableIdentifier(requestShortener), \"\\\"\") + \" (known exports: \".concat(Array.from(info.exportMap.keys()).filter(function (name) {\n          return name !== true;\n        }).join(\" \"), \", \") + \"known reexports: \".concat(Array.from(info.reexportMap.keys()).join(\" \"), \")\");\n        return \"\".concat(Template.toNormalComment(problem), \" undefined\");\n      }\n\n    case \"external\":\n      {\n        var importedModule = info.module;\n        return getExternalImport(importedModule, info, exportName, asCall, strictHarmonyModule);\n      }\n  }\n};\n\nvar addScopeSymbols1 = function addScopeSymbols1(s, nameSet, scopeSet) {\n  var scope = s;\n\n  while (scope) {\n    if (scopeSet.has(scope)) break;\n    scopeSet.add(scope);\n\n    var _iterator3 = _createForOfIteratorHelper(scope.variables),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var variable = _step3.value;\n        nameSet.add(variable.name);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    scope = scope.upper;\n  }\n};\n\nvar addScopeSymbols2 = function addScopeSymbols2(s, nameSet, scopeSet1, scopeSet2) {\n  var scope = s;\n\n  while (scope) {\n    if (scopeSet1.has(scope)) break;\n    if (scopeSet2.has(scope)) break;\n    scopeSet1.add(scope);\n\n    var _iterator4 = _createForOfIteratorHelper(scope.variables),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var variable = _step4.value;\n        nameSet.add(variable.name);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    scope = scope.upper;\n  }\n};\n\nvar getAllReferences = function getAllReferences(variable) {\n  var set = variable.references; // Look for inner scope variables too (like in class Foo { t() { Foo } })\n\n  var identifiers = new Set(variable.identifiers);\n\n  var _iterator5 = _createForOfIteratorHelper(variable.scope.childScopes),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var scope = _step5.value;\n\n      var _iterator6 = _createForOfIteratorHelper(scope.variables),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var innerVar = _step6.value;\n\n          if (innerVar.identifiers.some(function (id) {\n            return identifiers.has(id);\n          })) {\n            set = set.concat(innerVar.references);\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return set;\n};\n\nvar getPathInAst = function getPathInAst(ast, node) {\n  if (ast === node) {\n    return [];\n  }\n\n  var nr = node.range;\n\n  var enterNode = function enterNode(n) {\n    if (!n) return undefined;\n    var r = n.range;\n\n    if (r) {\n      if (r[0] <= nr[0] && r[1] >= nr[1]) {\n        var path = getPathInAst(n, node);\n\n        if (path) {\n          path.push(n);\n          return path;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  var i;\n\n  if (Array.isArray(ast)) {\n    for (i = 0; i < ast.length; i++) {\n      var enterResult = enterNode(ast[i]);\n      if (enterResult !== undefined) return enterResult;\n    }\n  } else if (ast && _typeof(ast) === \"object\") {\n    var keys = Object.keys(ast);\n\n    for (i = 0; i < keys.length; i++) {\n      var value = ast[keys[i]];\n\n      if (Array.isArray(value)) {\n        var pathResult = getPathInAst(value, node);\n        if (pathResult !== undefined) return pathResult;\n      } else if (value && _typeof(value) === \"object\") {\n        var _enterResult = enterNode(value);\n\n        if (_enterResult !== undefined) return _enterResult;\n      }\n    }\n  }\n};\n\nvar getHarmonyExportImportedSpecifierDependencyExports = function getHarmonyExportImportedSpecifierDependencyExports(dep) {\n  var importModule = dep._module;\n  if (!importModule) return [];\n\n  if (dep._id) {\n    // export { named } from \"module\"\n    return [{\n      name: dep.name,\n      id: dep._id,\n      module: importModule\n    }];\n  }\n\n  if (dep.name) {\n    // export * as abc from \"module\"\n    return [{\n      name: dep.name,\n      id: true,\n      module: importModule\n    }];\n  } // export * from \"module\"\n\n\n  return importModule.buildMeta.providedExports.filter(function (exp) {\n    return exp !== \"default\" && !dep.activeExports.has(exp);\n  }).map(function (exp) {\n    return {\n      name: exp,\n      id: exp,\n      module: importModule\n    };\n  });\n};\n\nvar ConcatenatedModule = /*#__PURE__*/function (_Module) {\n  _inherits(ConcatenatedModule, _Module);\n\n  var _super = _createSuper(ConcatenatedModule);\n\n  function ConcatenatedModule(rootModule, modules, concatenationList) {\n    var _thisSuper, _this;\n\n    _classCallCheck(this, ConcatenatedModule);\n\n    _this = _super.call(this, \"javascript/esm\", null);\n\n    _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(ConcatenatedModule.prototype)), \"setChunks\", _thisSuper).call(_thisSuper, rootModule._chunks); // Info from Factory\n\n\n    _this.rootModule = rootModule;\n    _this.factoryMeta = rootModule.factoryMeta; // Info from Compilation\n\n    _this.index = rootModule.index;\n    _this.index2 = rootModule.index2;\n    _this.depth = rootModule.depth; // Info from Optimization\n\n    _this.used = rootModule.used;\n    _this.usedExports = rootModule.usedExports; // Info from Build\n\n    _this.buildInfo = {\n      strict: true,\n      cacheable: modules.every(function (m) {\n        return m.buildInfo.cacheable;\n      }),\n      moduleArgument: rootModule.buildInfo.moduleArgument,\n      exportsArgument: rootModule.buildInfo.exportsArgument,\n      fileDependencies: new Set(),\n      contextDependencies: new Set(),\n      assets: undefined\n    };\n    _this.built = modules.some(function (m) {\n      return m.built;\n    });\n    _this.buildMeta = rootModule.buildMeta; // Caching\n\n    _this._numberOfConcatenatedModules = modules.length; // Graph\n\n    var modulesSet = new Set(modules);\n    _this.reasons = rootModule.reasons.filter(function (reason) {\n      return !(reason.dependency instanceof HarmonyImportDependency) || !modulesSet.has(reason.module);\n    });\n    _this.dependencies = [];\n    _this.blocks = [];\n    _this.warnings = [];\n    _this.errors = [];\n    _this._orderedConcatenationList = concatenationList || ConcatenatedModule.createConcatenationList(rootModule, modulesSet, null);\n\n    var _iterator7 = _createForOfIteratorHelper(_this._orderedConcatenationList),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var info = _step7.value;\n\n        if (info.type === \"concatenated\") {\n          var m = info.module; // populate dependencies\n\n          var _iterator8 = _createForOfIteratorHelper(m.dependencies.filter(function (dep) {\n            return !(dep instanceof HarmonyImportDependency) || !modulesSet.has(dep._module);\n          })),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var d = _step8.value;\n\n              _this.dependencies.push(d);\n            } // populate blocks\n\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          var _iterator9 = _createForOfIteratorHelper(m.blocks),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var _d2 = _step9.value;\n\n              _this.blocks.push(_d2);\n            } // populate file dependencies\n\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n\n          if (m.buildInfo.fileDependencies) {\n            var _iterator10 = _createForOfIteratorHelper(m.buildInfo.fileDependencies),\n                _step10;\n\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var file = _step10.value;\n\n                _this.buildInfo.fileDependencies.add(file);\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          } // populate context dependencies\n\n\n          if (m.buildInfo.contextDependencies) {\n            var _iterator11 = _createForOfIteratorHelper(m.buildInfo.contextDependencies),\n                _step11;\n\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var context = _step11.value;\n\n                _this.buildInfo.contextDependencies.add(context);\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n          } // populate warnings\n\n\n          var _iterator12 = _createForOfIteratorHelper(m.warnings),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var warning = _step12.value;\n\n              _this.warnings.push(warning);\n            } // populate errors\n\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n\n          var _iterator13 = _createForOfIteratorHelper(m.errors),\n              _step13;\n\n          try {\n            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n              var error = _step13.value;\n\n              _this.errors.push(error);\n            }\n          } catch (err) {\n            _iterator13.e(err);\n          } finally {\n            _iterator13.f();\n          }\n\n          if (m.buildInfo.assets) {\n            if (_this.buildInfo.assets === undefined) {\n              _this.buildInfo.assets = Object.create(null);\n            }\n\n            Object.assign(_this.buildInfo.assets, m.buildInfo.assets);\n          }\n\n          if (m.buildInfo.assetsInfo) {\n            if (_this.buildInfo.assetsInfo === undefined) {\n              _this.buildInfo.assetsInfo = new Map();\n            }\n\n            var _iterator14 = _createForOfIteratorHelper(m.buildInfo.assetsInfo),\n                _step14;\n\n            try {\n              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                var _ref3 = _step14.value;\n\n                var _ref2 = _slicedToArray(_ref3, 2);\n\n                var key = _ref2[0];\n                var value = _ref2[1];\n\n                _this.buildInfo.assetsInfo.set(key, value);\n              }\n            } catch (err) {\n              _iterator14.e(err);\n            } finally {\n              _iterator14.f();\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    _this._identifier = _this._createIdentifier();\n    return _this;\n  }\n\n  _createClass(ConcatenatedModule, [{\n    key: \"modules\",\n    get: function get() {\n      return this._orderedConcatenationList.filter(function (info) {\n        return info.type === \"concatenated\";\n      }).map(function (info) {\n        return info.module;\n      });\n    }\n  }, {\n    key: \"identifier\",\n    value: function identifier() {\n      return this._identifier;\n    }\n  }, {\n    key: \"readableIdentifier\",\n    value: function readableIdentifier(requestShortener) {\n      return this.rootModule.readableIdentifier(requestShortener) + \" + \".concat(this._numberOfConcatenatedModules - 1, \" modules\");\n    }\n  }, {\n    key: \"libIdent\",\n    value: function libIdent(options) {\n      return this.rootModule.libIdent(options);\n    }\n  }, {\n    key: \"nameForCondition\",\n    value: function nameForCondition() {\n      return this.rootModule.nameForCondition();\n    }\n  }, {\n    key: \"build\",\n    value: function build(options, compilation, resolver, fs, callback) {\n      throw new Error(\"Cannot build this module. It should be already built.\");\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      // Guess size from embedded modules\n      return this._orderedConcatenationList.reduce(function (sum, info) {\n        switch (info.type) {\n          case \"concatenated\":\n            return sum + info.module.size();\n\n          case \"external\":\n            return sum + 5;\n        }\n\n        return sum;\n      }, 0);\n    }\n    /**\n     * @param {Module} rootModule the root of the concatenation\n     * @param {Set<Module>} modulesSet a set of modules which should be concatenated\n     * @param {Compilation} compilation the compilation context\n     * @returns {ConcatenationEntry[]} concatenation list\n     */\n\n  }, {\n    key: \"_createIdentifier\",\n    value: function _createIdentifier() {\n      var orderedConcatenationListIdentifiers = \"\";\n\n      for (var i = 0; i < this._orderedConcatenationList.length; i++) {\n        if (this._orderedConcatenationList[i].type === \"concatenated\") {\n          orderedConcatenationListIdentifiers += this._orderedConcatenationList[i].module.identifier();\n          orderedConcatenationListIdentifiers += \" \";\n        }\n      }\n\n      var hash = createHash(\"md4\");\n      hash.update(orderedConcatenationListIdentifiers);\n      return this.rootModule.identifier() + \" \" + hash.digest(\"hex\");\n    }\n  }, {\n    key: \"source\",\n    value: function source(dependencyTemplates, runtimeTemplate) {\n      var _this2 = this;\n\n      var requestShortener = runtimeTemplate.requestShortener; // Metainfo for each module\n\n      var modulesWithInfo = this._orderedConcatenationList.map(function (info, idx) {\n        switch (info.type) {\n          case \"concatenated\":\n            {\n              var exportMap = new Map();\n              var reexportMap = new Map();\n\n              var _iterator15 = _createForOfIteratorHelper(info.module.dependencies),\n                  _step15;\n\n              try {\n                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                  var dep = _step15.value;\n\n                  if (dep instanceof HarmonyExportSpecifierDependency) {\n                    if (!exportMap.has(dep.name)) {\n                      exportMap.set(dep.name, dep.id);\n                    }\n                  } else if (dep instanceof HarmonyExportExpressionDependency) {\n                    if (!exportMap.has(\"default\")) {\n                      exportMap.set(\"default\", \"__WEBPACK_MODULE_DEFAULT_EXPORT__\");\n                    }\n                  } else if (dep instanceof HarmonyExportImportedSpecifierDependency) {\n                    var exportName = dep.name;\n                    var importName = dep._id;\n                    var importedModule = dep._module;\n\n                    if (exportName && importName) {\n                      if (!reexportMap.has(exportName)) {\n                        reexportMap.set(exportName, {\n                          module: importedModule,\n                          exportName: importName,\n                          dependency: dep\n                        });\n                      }\n                    } else if (exportName) {\n                      if (!reexportMap.has(exportName)) {\n                        reexportMap.set(exportName, {\n                          module: importedModule,\n                          exportName: true,\n                          dependency: dep\n                        });\n                      }\n                    } else if (importedModule) {\n                      var _iterator16 = _createForOfIteratorHelper(importedModule.buildMeta.providedExports),\n                          _step16;\n\n                      try {\n                        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n                          var name = _step16.value;\n\n                          if (dep.activeExports.has(name) || name === \"default\") {\n                            continue;\n                          }\n\n                          if (!reexportMap.has(name)) {\n                            reexportMap.set(name, {\n                              module: importedModule,\n                              exportName: name,\n                              dependency: dep\n                            });\n                          }\n                        }\n                      } catch (err) {\n                        _iterator16.e(err);\n                      } finally {\n                        _iterator16.f();\n                      }\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator15.e(err);\n              } finally {\n                _iterator15.f();\n              }\n\n              return {\n                type: \"concatenated\",\n                module: info.module,\n                index: idx,\n                ast: undefined,\n                internalSource: undefined,\n                source: undefined,\n                globalScope: undefined,\n                moduleScope: undefined,\n                internalNames: new Map(),\n                globalExports: new Set(),\n                exportMap: exportMap,\n                reexportMap: reexportMap,\n                hasNamespaceObject: false,\n                namespaceObjectSource: null\n              };\n            }\n\n          case \"external\":\n            return {\n              type: \"external\",\n              module: info.module,\n              index: idx,\n              name: undefined,\n              interopNamespaceObjectUsed: false,\n              interopNamespaceObjectName: undefined,\n              interopDefaultAccessUsed: false,\n              interopDefaultAccessName: undefined\n            };\n\n          default:\n            throw new Error(\"Unsupported concatenation entry type \".concat(info.type));\n        }\n      }); // Create mapping from module to info\n\n\n      var moduleToInfoMap = new Map();\n\n      var _iterator17 = _createForOfIteratorHelper(modulesWithInfo),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var m = _step17.value;\n          moduleToInfoMap.set(m.module, m);\n        } // Configure template decorators for dependencies\n\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      var innerDependencyTemplates = new Map(dependencyTemplates);\n      innerDependencyTemplates.set(HarmonyImportSpecifierDependency, new HarmonyImportSpecifierDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyImportSpecifierDependency), moduleToInfoMap));\n      innerDependencyTemplates.set(HarmonyImportSideEffectDependency, new HarmonyImportSideEffectDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyImportSideEffectDependency), moduleToInfoMap));\n      innerDependencyTemplates.set(HarmonyExportSpecifierDependency, new NullTemplate());\n      innerDependencyTemplates.set(HarmonyExportExpressionDependency, new HarmonyExportExpressionDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyExportExpressionDependency), this.rootModule));\n      innerDependencyTemplates.set(HarmonyExportImportedSpecifierDependency, new NullTemplate());\n      innerDependencyTemplates.set(HarmonyCompatibilityDependency, new NullTemplate()); // Must use full identifier in our cache here to ensure that the source\n      // is updated should our dependencies list change.\n      // TODO webpack 5 refactor\n\n      innerDependencyTemplates.set(\"hash\", innerDependencyTemplates.get(\"hash\") + this.identifier()); // Generate source code and analyse scopes\n      // Prepare a ReplaceSource for the final source\n\n      var _iterator18 = _createForOfIteratorHelper(modulesWithInfo),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var info = _step18.value;\n\n          if (info.type === \"concatenated\") {\n            var _m = info.module;\n\n            var source = _m.source(innerDependencyTemplates, runtimeTemplate);\n\n            var code = source.source();\n            var ast = void 0;\n\n            try {\n              ast = Parser.parse(code, {\n                sourceType: \"module\"\n              });\n            } catch (err) {\n              if (err.loc && _typeof(err.loc) === \"object\" && typeof err.loc.line === \"number\") {\n                var lineNumber = err.loc.line;\n                var lines = code.split(\"\\n\");\n                err.message += \"\\n| \" + lines.slice(Math.max(0, lineNumber - 3), lineNumber + 2).join(\"\\n| \");\n              }\n\n              throw err;\n            }\n\n            var scopeManager = eslintScope.analyze(ast, {\n              ecmaVersion: 6,\n              sourceType: \"module\",\n              optimistic: true,\n              ignoreEval: true,\n              impliedStrict: true\n            });\n            var globalScope = scopeManager.acquire(ast);\n            var moduleScope = globalScope.childScopes[0];\n            var resultSource = new ReplaceSource(source);\n            info.ast = ast;\n            info.internalSource = source;\n            info.source = resultSource;\n            info.globalScope = globalScope;\n            info.moduleScope = moduleScope;\n          }\n        } // List of all used names to avoid conflicts\n\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      var allUsedNames = new Set([\"__WEBPACK_MODULE_DEFAULT_EXPORT__\", // avoid using this internal name\n      \"abstract\", \"arguments\", \"async\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"eval\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\", \"module\", \"__dirname\", \"__filename\", \"exports\", \"Array\", \"Date\", \"eval\", \"function\", \"hasOwnProperty\", \"Infinity\", \"isFinite\", \"isNaN\", \"isPrototypeOf\", \"length\", \"Math\", \"NaN\", \"name\", \"Number\", \"Object\", \"prototype\", \"String\", \"toString\", \"undefined\", \"valueOf\", \"alert\", \"all\", \"anchor\", \"anchors\", \"area\", \"assign\", \"blur\", \"button\", \"checkbox\", \"clearInterval\", \"clearTimeout\", \"clientInformation\", \"close\", \"closed\", \"confirm\", \"constructor\", \"crypto\", \"decodeURI\", \"decodeURIComponent\", \"defaultStatus\", \"document\", \"element\", \"elements\", \"embed\", \"embeds\", \"encodeURI\", \"encodeURIComponent\", \"escape\", \"event\", \"fileUpload\", \"focus\", \"form\", \"forms\", \"frame\", \"innerHeight\", \"innerWidth\", \"layer\", \"layers\", \"link\", \"location\", \"mimeTypes\", \"navigate\", \"navigator\", \"frames\", \"frameRate\", \"hidden\", \"history\", \"image\", \"images\", \"offscreenBuffering\", \"open\", \"opener\", \"option\", \"outerHeight\", \"outerWidth\", \"packages\", \"pageXOffset\", \"pageYOffset\", \"parent\", \"parseFloat\", \"parseInt\", \"password\", \"pkcs11\", \"plugin\", \"prompt\", \"propertyIsEnum\", \"radio\", \"reset\", \"screenX\", \"screenY\", \"scroll\", \"secure\", \"select\", \"self\", \"setInterval\", \"setTimeout\", \"status\", \"submit\", \"taint\", \"text\", \"textarea\", \"top\", \"unescape\", \"untaint\", \"window\", \"onblur\", \"onclick\", \"onerror\", \"onfocus\", \"onkeydown\", \"onkeypress\", \"onkeyup\", \"onmouseover\", \"onload\", \"onmouseup\", \"onmousedown\", \"onsubmit\"]); // Set of already checked scopes\n\n      var alreadyCheckedScopes = new Set(); // get all global names\n\n      var _iterator19 = _createForOfIteratorHelper(modulesWithInfo),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var _info = _step19.value;\n          var superClassExpressions = []; // ignore symbols from moduleScope\n\n          if (_info.moduleScope) {\n            alreadyCheckedScopes.add(_info.moduleScope); // The super class expression in class scopes behaves weird\n            // We store ranges of all super class expressions to make\n            // renaming to work correctly\n\n            var _iterator26 = _createForOfIteratorHelper(_info.moduleScope.childScopes),\n                _step26;\n\n            try {\n              for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n                var childScope = _step26.value;\n                if (childScope.type !== \"class\") continue;\n                if (!childScope.block.superClass) continue;\n                superClassExpressions.push({\n                  range: childScope.block.superClass.range,\n                  variables: childScope.variables\n                });\n              }\n            } catch (err) {\n              _iterator26.e(err);\n            } finally {\n              _iterator26.f();\n            }\n          } // add global symbols\n\n\n          if (_info.globalScope) {\n            var _iterator27 = _createForOfIteratorHelper(_info.globalScope.through),\n                _step27;\n\n            try {\n              for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n                var reference = _step27.value;\n                var name = reference.identifier.name;\n\n                if (/^__WEBPACK_MODULE_REFERENCE__\\d+_([\\da-f]+|ns)(_call)?(_strict)?__$/.test(name)) {\n                  var _iterator28 = _createForOfIteratorHelper(superClassExpressions),\n                      _step28;\n\n                  try {\n                    for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n                      var expr = _step28.value;\n\n                      if (expr.range[0] <= reference.identifier.range[0] && expr.range[1] >= reference.identifier.range[1]) {\n                        var _iterator29 = _createForOfIteratorHelper(expr.variables),\n                            _step29;\n\n                        try {\n                          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n                            var variable = _step29.value;\n                            allUsedNames.add(variable.name);\n                          }\n                        } catch (err) {\n                          _iterator29.e(err);\n                        } finally {\n                          _iterator29.f();\n                        }\n                      }\n                    }\n                  } catch (err) {\n                    _iterator28.e(err);\n                  } finally {\n                    _iterator28.f();\n                  }\n\n                  addScopeSymbols1(reference.from, allUsedNames, alreadyCheckedScopes);\n                } else {\n                  allUsedNames.add(name);\n                }\n              }\n            } catch (err) {\n              _iterator27.e(err);\n            } finally {\n              _iterator27.f();\n            }\n          } // add exported globals\n\n\n          if (_info.type === \"concatenated\") {\n            var variables = new Set();\n\n            var _iterator30 = _createForOfIteratorHelper(_info.moduleScope.variables),\n                _step30;\n\n            try {\n              for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n                var _variable = _step30.value;\n                variables.add(_variable.name);\n              }\n            } catch (err) {\n              _iterator30.e(err);\n            } finally {\n              _iterator30.f();\n            }\n\n            var _iterator31 = _createForOfIteratorHelper(_info.exportMap),\n                _step31;\n\n            try {\n              for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n                var _ref9 = _step31.value;\n\n                var _ref8 = _slicedToArray(_ref9, 2);\n\n                var _variable2 = _ref8[1];\n\n                if (!variables.has(_variable2)) {\n                  _info.globalExports.add(_variable2);\n                }\n              }\n            } catch (err) {\n              _iterator31.e(err);\n            } finally {\n              _iterator31.f();\n            }\n          }\n        } // generate names for symbols\n\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      var _iterator20 = _createForOfIteratorHelper(modulesWithInfo),\n          _step20;\n\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var _info2 = _step20.value;\n\n          switch (_info2.type) {\n            case \"concatenated\":\n              {\n                var namespaceObjectName = this.findNewName(\"namespaceObject\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n                allUsedNames.add(namespaceObjectName);\n\n                _info2.internalNames.set(namespaceObjectName, namespaceObjectName);\n\n                _info2.exportMap.set(true, namespaceObjectName);\n\n                var _iterator32 = _createForOfIteratorHelper(_info2.moduleScope.variables),\n                    _step32;\n\n                try {\n                  for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n                    var _variable3 = _step32.value;\n                    var _name = _variable3.name;\n\n                    if (allUsedNames.has(_name)) {\n                      var references = getAllReferences(_variable3);\n                      var symbolsInReferences = new Set();\n                      var alreadyCheckedInnerScopes = new Set();\n\n                      var _iterator33 = _createForOfIteratorHelper(references),\n                          _step33;\n\n                      try {\n                        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n                          var ref = _step33.value;\n                          addScopeSymbols2(ref.from, symbolsInReferences, alreadyCheckedInnerScopes, alreadyCheckedScopes);\n                        }\n                      } catch (err) {\n                        _iterator33.e(err);\n                      } finally {\n                        _iterator33.f();\n                      }\n\n                      var newName = this.findNewName(_name, allUsedNames, symbolsInReferences, _info2.module.readableIdentifier(requestShortener));\n                      allUsedNames.add(newName);\n\n                      _info2.internalNames.set(_name, newName);\n\n                      var _source = _info2.source;\n                      var allIdentifiers = new Set(references.map(function (r) {\n                        return r.identifier;\n                      }).concat(_variable3.identifiers));\n\n                      var _iterator34 = _createForOfIteratorHelper(allIdentifiers),\n                          _step34;\n\n                      try {\n                        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n                          var identifier = _step34.value;\n                          var r = identifier.range;\n                          var path = getPathInAst(_info2.ast, identifier);\n\n                          if (path && path.length > 1 && path[1].type === \"Property\" && path[1].shorthand) {\n                            _source.insert(r[1], \": \".concat(newName));\n                          } else {\n                            _source.replace(r[0], r[1] - 1, newName);\n                          }\n                        }\n                      } catch (err) {\n                        _iterator34.e(err);\n                      } finally {\n                        _iterator34.f();\n                      }\n                    } else {\n                      allUsedNames.add(_name);\n\n                      _info2.internalNames.set(_name, _name);\n                    }\n                  }\n                } catch (err) {\n                  _iterator32.e(err);\n                } finally {\n                  _iterator32.f();\n                }\n\n                break;\n              }\n\n            case \"external\":\n              {\n                var externalName = this.findNewName(\"\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n                allUsedNames.add(externalName);\n                _info2.name = externalName;\n\n                if (_info2.module.buildMeta.exportsType === \"named\" || !_info2.module.buildMeta.exportsType) {\n                  var externalNameInterop = this.findNewName(\"namespaceObject\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n                  allUsedNames.add(externalNameInterop);\n                  _info2.interopNamespaceObjectName = externalNameInterop;\n                }\n\n                if (!_info2.module.buildMeta.exportsType) {\n                  var _externalNameInterop = this.findNewName(\"default\", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));\n\n                  allUsedNames.add(_externalNameInterop);\n                  _info2.interopDefaultAccessName = _externalNameInterop;\n                }\n\n                break;\n              }\n          }\n        } // Find and replace referenced to modules\n\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n\n      var _iterator21 = _createForOfIteratorHelper(modulesWithInfo),\n          _step21;\n\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var _info3 = _step21.value;\n\n          if (_info3.type === \"concatenated\") {\n            var _iterator35 = _createForOfIteratorHelper(_info3.globalScope.through),\n                _step35;\n\n            try {\n              for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n                var _reference = _step35.value;\n                var _name2 = _reference.identifier.name;\n                var match = /^__WEBPACK_MODULE_REFERENCE__(\\d+)_([\\da-f]+|ns)(_call)?(_strict)?__$/.exec(_name2);\n\n                if (match) {\n                  var referencedModule = modulesWithInfo[+match[1]];\n                  var exportName = void 0;\n\n                  if (match[2] === \"ns\") {\n                    exportName = true;\n                  } else {\n                    var exportData = match[2];\n                    exportName = Buffer.from(exportData, \"hex\").toString(\"utf-8\");\n                  }\n\n                  var asCall = !!match[3];\n                  var strictHarmonyModule = !!match[4];\n                  var finalName = getFinalName(referencedModule, exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule);\n                  var _r = _reference.identifier.range;\n                  var _source2 = _info3.source;\n\n                  _source2.replace(_r[0], _r[1] - 1, finalName);\n                }\n              }\n            } catch (err) {\n              _iterator35.e(err);\n            } finally {\n              _iterator35.f();\n            }\n          }\n        } // Map with all root exposed used exports\n\n        /** @type {Map<string, function(RequestShortener): string>} */\n\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n\n      var exportsMap = new Map(); // Set with all root exposed unused exports\n\n      /** @type {Set<string>} */\n\n      var unusedExports = new Set();\n\n      var _iterator22 = _createForOfIteratorHelper(this.rootModule.dependencies),\n          _step22;\n\n      try {\n        var _loop = function _loop() {\n          var dep = _step22.value;\n\n          if (dep instanceof HarmonyExportSpecifierDependency) {\n            var used = _this2.rootModule.isUsed(dep.name);\n\n            if (used) {\n              var _info4 = moduleToInfoMap.get(_this2.rootModule);\n\n              if (!exportsMap.has(used)) {\n                exportsMap.set(used, function () {\n                  return \"/* binding */ \".concat(_info4.internalNames.get(dep.id));\n                });\n              }\n            } else {\n              unusedExports.add(dep.name || \"namespace\");\n            }\n          } else if (dep instanceof HarmonyExportImportedSpecifierDependency) {\n            var exportDefs = getHarmonyExportImportedSpecifierDependencyExports(dep);\n\n            var _iterator36 = _createForOfIteratorHelper(exportDefs),\n                _step36;\n\n            try {\n              var _loop2 = function _loop2() {\n                var def = _step36.value;\n                var info = moduleToInfoMap.get(def.module);\n                var used = dep.originModule.isUsed(def.name);\n\n                if (used) {\n                  if (!exportsMap.has(used)) {\n                    exportsMap.set(used, function (requestShortener) {\n                      var finalName = getFinalName(info, def.id, moduleToInfoMap, requestShortener, false, _this2.rootModule.buildMeta.strictHarmonyModule);\n                      return \"/* reexport */ \".concat(finalName);\n                    });\n                  }\n                } else {\n                  unusedExports.add(def.name);\n                }\n              };\n\n              for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n                _loop2();\n              }\n            } catch (err) {\n              _iterator36.e(err);\n            } finally {\n              _iterator36.f();\n            }\n          }\n        };\n\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n\n      var result = new ConcatSource(); // add harmony compatibility flag (must be first because of possible circular dependencies)\n\n      var usedExports = this.rootModule.usedExports;\n\n      if (usedExports === true || usedExports === null) {\n        result.add(\"// ESM COMPAT FLAG\\n\");\n        result.add(runtimeTemplate.defineEsModuleFlagStatement({\n          exportsArgument: this.exportsArgument\n        }));\n      } // define exports\n\n\n      if (exportsMap.size > 0) {\n        result.add(\"\\n// EXPORTS\\n\");\n\n        var _iterator23 = _createForOfIteratorHelper(exportsMap),\n            _step23;\n\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var _ref6 = _step23.value;\n\n            var _ref5 = _slicedToArray(_ref6, 2);\n\n            var key = _ref5[0];\n            var value = _ref5[1];\n            result.add(\"__webpack_require__.d(\".concat(this.exportsArgument, \", \").concat(JSON.stringify(key), \", function() { return \").concat(value(requestShortener), \"; });\\n\"));\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n      } // list unused exports\n\n\n      if (unusedExports.size > 0) {\n        result.add(\"\\n// UNUSED EXPORTS: \".concat(joinIterableWithComma(unusedExports), \"\\n\"));\n      } // define required namespace objects (must be before evaluation modules)\n\n\n      var _iterator24 = _createForOfIteratorHelper(modulesWithInfo),\n          _step24;\n\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n          var _info5 = _step24.value;\n\n          if (_info5.namespaceObjectSource) {\n            result.add(\"\\n// NAMESPACE OBJECT: \".concat(_info5.module.readableIdentifier(requestShortener), \"\\n\"));\n            result.add(_info5.namespaceObjectSource);\n          }\n        } // evaluate modules in order\n\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n\n      var _iterator25 = _createForOfIteratorHelper(modulesWithInfo),\n          _step25;\n\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var _info6 = _step25.value;\n\n          switch (_info6.type) {\n            case \"concatenated\":\n              result.add(\"\\n// CONCATENATED MODULE: \".concat(_info6.module.readableIdentifier(requestShortener), \"\\n\"));\n              result.add(_info6.source);\n              break;\n\n            case \"external\":\n              result.add(\"\\n// EXTERNAL MODULE: \".concat(_info6.module.readableIdentifier(requestShortener), \"\\n\"));\n              result.add(\"var \".concat(_info6.name, \" = __webpack_require__(\").concat(JSON.stringify(_info6.module.id), \");\\n\"));\n\n              if (_info6.interopNamespaceObjectUsed) {\n                if (_info6.module.buildMeta.exportsType === \"named\") {\n                  result.add(\"var \".concat(_info6.interopNamespaceObjectName, \" = /*#__PURE__*/__webpack_require__.t(\").concat(_info6.name, \", 2);\\n\"));\n                } else if (!_info6.module.buildMeta.exportsType) {\n                  result.add(\"var \".concat(_info6.interopNamespaceObjectName, \" = /*#__PURE__*/__webpack_require__.t(\").concat(_info6.name, \");\\n\"));\n                }\n              }\n\n              if (_info6.interopDefaultAccessUsed) {\n                result.add(\"var \".concat(_info6.interopDefaultAccessName, \" = /*#__PURE__*/__webpack_require__.n(\").concat(_info6.name, \");\\n\"));\n              }\n\n              break;\n\n            default:\n              throw new Error(\"Unsupported concatenation entry type \".concat(_info6.type));\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"findNewName\",\n    value: function findNewName(oldName, usedNamed1, usedNamed2, extraInfo) {\n      var name = oldName;\n      if (name === \"__WEBPACK_MODULE_DEFAULT_EXPORT__\") name = \"\"; // Remove uncool stuff\n\n      extraInfo = extraInfo.replace(/\\.+\\/|(\\/index)?\\.([a-zA-Z0-9]{1,4})($|\\s|\\?)|\\s*\\+\\s*\\d+\\s*modules/g, \"\");\n      var splittedInfo = extraInfo.split(\"/\");\n\n      while (splittedInfo.length) {\n        name = splittedInfo.pop() + (name ? \"_\" + name : \"\");\n        var nameIdent = Template.toIdentifier(name);\n        if (!usedNamed1.has(nameIdent) && (!usedNamed2 || !usedNamed2.has(nameIdent))) return nameIdent;\n      }\n\n      var i = 0;\n      var nameWithNumber = Template.toIdentifier(\"\".concat(name, \"_\").concat(i));\n\n      while (usedNamed1.has(nameWithNumber) || usedNamed2 && usedNamed2.has(nameWithNumber)) {\n        i++;\n        nameWithNumber = Template.toIdentifier(\"\".concat(name, \"_\").concat(i));\n      }\n\n      return nameWithNumber;\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      var _iterator37 = _createForOfIteratorHelper(this._orderedConcatenationList),\n          _step37;\n\n      try {\n        for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n          var info = _step37.value;\n\n          switch (info.type) {\n            case \"concatenated\":\n              info.module.updateHash(hash);\n              break;\n\n            case \"external\":\n              hash.update(\"\".concat(info.module.id));\n              break;\n          }\n        }\n      } catch (err) {\n        _iterator37.e(err);\n      } finally {\n        _iterator37.f();\n      }\n\n      _get(_getPrototypeOf(ConcatenatedModule.prototype), \"updateHash\", this).call(this, hash);\n    }\n  }], [{\n    key: \"createConcatenationList\",\n    value: function createConcatenationList(rootModule, modulesSet, compilation) {\n      var list = [];\n      var set = new Set();\n      /**\n       * @param {Module} module a module\n       * @returns {(function(): Module)[]} imported modules in order\n       */\n\n      var getConcatenatedImports = function getConcatenatedImports(module) {\n        /** @type {WeakMap<DependencyReference, Dependency>} */\n        var map = new WeakMap();\n        var references = module.dependencies.filter(function (dep) {\n          return dep instanceof HarmonyImportDependency;\n        }).map(function (dep) {\n          var ref = compilation.getDependencyReference(module, dep);\n          if (ref) map.set(ref, dep);\n          return ref;\n        }).filter(function (ref) {\n          return ref;\n        });\n        DependencyReference.sort(references); // TODO webpack 5: remove this hack, see also DependencyReference\n\n        return references.map(function (ref) {\n          var dep = map.get(ref);\n          return function () {\n            return compilation.getDependencyReference(module, dep).module;\n          };\n        });\n      };\n\n      var enterModule = function enterModule(getModule) {\n        var module = getModule();\n        if (!module) return;\n        if (set.has(module)) return;\n        set.add(module);\n\n        if (modulesSet.has(module)) {\n          var imports = getConcatenatedImports(module);\n          imports.forEach(enterModule);\n          list.push({\n            type: \"concatenated\",\n            module: module\n          });\n        } else {\n          list.push({\n            type: \"external\",\n\n            get module() {\n              // We need to use a getter here, because the module in the dependency\n              // could be replaced by some other process (i. e. also replaced with a\n              // concatenated module)\n              return getModule();\n            }\n\n          });\n        }\n      };\n\n      enterModule(function () {\n        return rootModule;\n      });\n      return list;\n    }\n  }]);\n\n  return ConcatenatedModule;\n}(Module);\n\nvar HarmonyImportSpecifierDependencyConcatenatedTemplate = /*#__PURE__*/function () {\n  function HarmonyImportSpecifierDependencyConcatenatedTemplate(originalTemplate, modulesMap) {\n    _classCallCheck(this, HarmonyImportSpecifierDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.modulesMap = modulesMap;\n  }\n\n  _createClass(HarmonyImportSpecifierDependencyConcatenatedTemplate, [{\n    key: \"getHarmonyInitOrder\",\n    value: function getHarmonyInitOrder(dep) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        return this.originalTemplate.getHarmonyInitOrder(dep);\n      }\n\n      return NaN;\n    }\n  }, {\n    key: \"harmonyInit\",\n    value: function harmonyInit(dep, source, runtimeTemplate, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.harmonyInit(dep, source, runtimeTemplate, dependencyTemplates);\n        return;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n\n      var content;\n      var callFlag = dep.call ? \"_call\" : \"\";\n      var strictFlag = dep.originModule.buildMeta.strictHarmonyModule ? \"_strict\" : \"\";\n\n      if (dep._id === null) {\n        content = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_ns\").concat(strictFlag, \"__\");\n      } else if (dep.namespaceObjectAsContext) {\n        content = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_ns\").concat(strictFlag, \"__[\").concat(JSON.stringify(dep._id), \"]\");\n      } else {\n        var exportData = Buffer.from(dep._id, \"utf-8\").toString(\"hex\");\n        content = \"__WEBPACK_MODULE_REFERENCE__\".concat(info.index, \"_\").concat(exportData).concat(callFlag).concat(strictFlag, \"__\");\n      }\n\n      if (dep.shorthand) {\n        content = dep.name + \": \" + content;\n      }\n\n      source.replace(dep.range[0], dep.range[1] - 1, content);\n    }\n  }]);\n\n  return HarmonyImportSpecifierDependencyConcatenatedTemplate;\n}();\n\nvar HarmonyImportSideEffectDependencyConcatenatedTemplate = /*#__PURE__*/function () {\n  function HarmonyImportSideEffectDependencyConcatenatedTemplate(originalTemplate, modulesMap) {\n    _classCallCheck(this, HarmonyImportSideEffectDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.modulesMap = modulesMap;\n  }\n\n  _createClass(HarmonyImportSideEffectDependencyConcatenatedTemplate, [{\n    key: \"getHarmonyInitOrder\",\n    value: function getHarmonyInitOrder(dep) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        return this.originalTemplate.getHarmonyInitOrder(dep);\n      }\n\n      return NaN;\n    }\n  }, {\n    key: \"harmonyInit\",\n    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.harmonyInit(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      var module = dep._module;\n      var info = this.modulesMap.get(module);\n\n      if (!info) {\n        this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);\n        return;\n      }\n    }\n  }]);\n\n  return HarmonyImportSideEffectDependencyConcatenatedTemplate;\n}();\n\nvar HarmonyExportExpressionDependencyConcatenatedTemplate = /*#__PURE__*/function () {\n  function HarmonyExportExpressionDependencyConcatenatedTemplate(originalTemplate, rootModule) {\n    _classCallCheck(this, HarmonyExportExpressionDependencyConcatenatedTemplate);\n\n    this.originalTemplate = originalTemplate;\n    this.rootModule = rootModule;\n  }\n\n  _createClass(HarmonyExportExpressionDependencyConcatenatedTemplate, [{\n    key: \"apply\",\n    value: function apply(dep, source, runtime, dependencyTemplates) {\n      var content = \"/* harmony default export */ var __WEBPACK_MODULE_DEFAULT_EXPORT__ = \";\n\n      if (dep.originModule === this.rootModule) {\n        var used = dep.originModule.isUsed(\"default\");\n        var exportsName = dep.originModule.exportsArgument;\n        if (used) content += \"\".concat(exportsName, \"[\").concat(JSON.stringify(used), \"] = \");\n      }\n\n      if (dep.range) {\n        source.replace(dep.rangeStatement[0], dep.range[0] - 1, content + \"(\" + dep.prefix);\n        source.replace(dep.range[1], dep.rangeStatement[1] - 1, \");\");\n        return;\n      }\n\n      source.replace(dep.rangeStatement[0], dep.rangeStatement[1] - 1, content + dep.prefix);\n    }\n  }]);\n\n  return HarmonyExportExpressionDependencyConcatenatedTemplate;\n}();\n\nvar NullTemplate = /*#__PURE__*/function () {\n  function NullTemplate() {\n    _classCallCheck(this, NullTemplate);\n  }\n\n  _createClass(NullTemplate, [{\n    key: \"apply\",\n    value: function apply() {}\n  }]);\n\n  return NullTemplate;\n}();\n\nmodule.exports = ConcatenatedModule;","map":null,"metadata":{},"sourceType":"module"}