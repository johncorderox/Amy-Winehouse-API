{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\n\nvar RequireEnsureDependency = require(\"./RequireEnsureDependency\");\n\nvar NullFactory = require(\"../NullFactory\");\n\nvar RequireEnsureDependenciesBlockParserPlugin = require(\"./RequireEnsureDependenciesBlockParserPlugin\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar RequireEnsurePlugin = /*#__PURE__*/function () {\n  function RequireEnsurePlugin() {\n    _classCallCheck(this, RequireEnsurePlugin);\n  }\n\n  _createClass(RequireEnsurePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"RequireEnsurePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(RequireEnsureItemDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(RequireEnsureItemDependency, new RequireEnsureItemDependency.Template());\n        compilation.dependencyFactories.set(RequireEnsureDependency, new NullFactory());\n        compilation.dependencyTemplates.set(RequireEnsureDependency, new RequireEnsureDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.requireEnsure !== undefined && !parserOptions.requireEnsure) return;\n          new RequireEnsureDependenciesBlockParserPlugin().apply(parser);\n          parser.hooks.evaluateTypeof[\"for\"](\"require.ensure\").tap(\"RequireEnsurePlugin\", ParserHelpers.evaluateToString(\"function\"));\n          parser.hooks[\"typeof\"][\"for\"](\"require.ensure\").tap(\"RequireEnsurePlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n        };\n\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/auto\").tap(\"RequireEnsurePlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/dynamic\").tap(\"RequireEnsurePlugin\", handler);\n      });\n    }\n  }]);\n\n  return RequireEnsurePlugin;\n}();\n\nmodule.exports = RequireEnsurePlugin;","map":null,"metadata":{},"sourceType":"module"}