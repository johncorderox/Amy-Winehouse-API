{"ast":null,"code":"var stream = require('readable-stream');\n\nvar inherits = require('inherits');\n\nvar SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from([0]) : new Buffer([0]);\nmodule.exports = WriteStream;\n\nfunction WriteStream(opts, write, flush) {\n  if (!(this instanceof WriteStream)) return new WriteStream(opts, write, flush);\n\n  if (typeof opts === 'function') {\n    flush = write;\n    write = opts;\n    opts = {};\n  }\n\n  stream.Writable.call(this, opts);\n  this.destroyed = false;\n  this._worker = write || null;\n  this._flush = flush || null;\n}\n\ninherits(WriteStream, stream.Writable);\n\nWriteStream.obj = function (opts, worker, flush) {\n  if (typeof opts === 'function') return WriteStream.obj(null, opts, worker);\n  if (!opts) opts = {};\n  opts.objectMode = true;\n  return new WriteStream(opts, worker, flush);\n};\n\nWriteStream.prototype._write = function (data, enc, cb) {\n  if (SIGNAL_FLUSH === data) this._flush(cb);else this._worker(data, enc, cb);\n};\n\nWriteStream.prototype.end = function (data, enc, cb) {\n  if (!this._flush) return stream.Writable.prototype.end.apply(this, arguments);\n  if (typeof data === 'function') return this.end(null, null, data);\n  if (typeof enc === 'function') return this.end(data, null, enc);\n  if (data) this.write(data);\n  if (!this._writableState.ending) this.write(SIGNAL_FLUSH);\n  return stream.Writable.prototype.end.call(this, cb);\n};\n\nWriteStream.prototype.destroy = function (err) {\n  if (this.destroyed) return;\n  this.destroyed = true;\n  if (err) this.emit('error', err);\n  this.emit('close');\n};","map":null,"metadata":{},"sourceType":"module"}