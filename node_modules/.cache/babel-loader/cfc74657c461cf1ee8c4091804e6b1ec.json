{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nvar AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nvar AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nvar AMDRequireDependenciesBlock = require(\"./AMDRequireDependenciesBlock\");\n\nvar UnsupportedDependency = require(\"./UnsupportedDependency\");\n\nvar LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar LocalModulesHelpers = require(\"./LocalModulesHelpers\");\n\nvar ConstDependency = require(\"./ConstDependency\");\n\nvar getFunctionExpression = require(\"./getFunctionExpression\");\n\nvar UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\n\nvar AMDRequireDependenciesBlockParserPlugin = /*#__PURE__*/function () {\n  function AMDRequireDependenciesBlockParserPlugin(options) {\n    _classCallCheck(this, AMDRequireDependenciesBlockParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(AMDRequireDependenciesBlockParserPlugin, [{\n    key: \"processFunctionArgument\",\n    value: function processFunctionArgument(parser, expression) {\n      var bindThis = true;\n      var fnData = getFunctionExpression(expression);\n\n      if (fnData) {\n        parser.inScope(fnData.fn.params.filter(function (i) {\n          return ![\"require\", \"module\", \"exports\"].includes(i.name);\n        }), function () {\n          if (fnData.fn.body.type === \"BlockStatement\") {\n            parser.walkStatement(fnData.fn.body);\n          } else {\n            parser.walkExpression(fnData.fn.body);\n          }\n        });\n        parser.walkExpressions(fnData.expressions);\n\n        if (fnData.needThis === false) {\n          bindThis = false;\n        }\n      } else {\n        parser.walkExpression(expression);\n      }\n\n      return bindThis;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call[\"for\"](\"require\").tap(\"AMDRequireDependenciesBlockParserPlugin\", this.processCallRequire.bind(this, parser));\n    }\n  }, {\n    key: \"processArray\",\n    value: function processArray(parser, expr, param) {\n      if (param.isArray()) {\n        var _iterator = _createForOfIteratorHelper(param.items),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var p = _step.value;\n            var result = this.processItem(parser, expr, p);\n\n            if (result === undefined) {\n              this.processContext(parser, expr, p);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return true;\n      } else if (param.isConstArray()) {\n        var deps = [];\n\n        var _iterator2 = _createForOfIteratorHelper(param.array),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var request = _step2.value;\n\n            var _dep = void 0,\n                localModule = void 0;\n\n            if (request === \"require\") {\n              _dep = \"__webpack_require__\";\n            } else if ([\"exports\", \"module\"].includes(request)) {\n              _dep = request;\n            } else if (localModule = LocalModulesHelpers.getLocalModule(parser.state, request)) {\n              _dep = new LocalModuleDependency(localModule, undefined, false);\n              _dep.loc = expr.loc;\n              parser.state.current.addDependency(_dep);\n            } else {\n              _dep = this.newRequireItemDependency(request);\n              _dep.loc = expr.loc;\n              _dep.optional = !!parser.scope.inTry;\n              parser.state.current.addDependency(_dep);\n            }\n\n            deps.push(_dep);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var dep = this.newRequireArrayDependency(deps, param.range);\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      }\n    }\n  }, {\n    key: \"processItem\",\n    value: function processItem(parser, expr, param) {\n      if (param.isConditional()) {\n        var _iterator3 = _createForOfIteratorHelper(param.options),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var p = _step3.value;\n            var result = this.processItem(parser, expr, p);\n\n            if (result === undefined) {\n              this.processContext(parser, expr, p);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return true;\n      } else if (param.isString()) {\n        var dep, localModule;\n\n        if (param.string === \"require\") {\n          dep = new ConstDependency(\"__webpack_require__\", param.string);\n        } else if (param.string === \"module\") {\n          dep = new ConstDependency(parser.state.module.buildInfo.moduleArgument, param.range);\n        } else if (param.string === \"exports\") {\n          dep = new ConstDependency(parser.state.module.buildInfo.exportsArgument, param.range);\n        } else if (localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string)) {\n          dep = new LocalModuleDependency(localModule, param.range, false);\n        } else {\n          dep = this.newRequireItemDependency(param.string, param.range);\n        }\n\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      }\n    }\n  }, {\n    key: \"processContext\",\n    value: function processContext(parser, expr, param) {\n      var dep = ContextDependencyHelpers.create(AMDRequireContextDependency, param.range, param, expr, this.options, {}, parser);\n      if (!dep) return;\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    }\n  }, {\n    key: \"processArrayForRequestString\",\n    value: function processArrayForRequestString(param) {\n      var _this = this;\n\n      if (param.isArray()) {\n        var result = param.items.map(function (item) {\n          return _this.processItemForRequestString(item);\n        });\n        if (result.every(Boolean)) return result.join(\" \");\n      } else if (param.isConstArray()) {\n        return param.array.join(\" \");\n      }\n    }\n  }, {\n    key: \"processItemForRequestString\",\n    value: function processItemForRequestString(param) {\n      var _this2 = this;\n\n      if (param.isConditional()) {\n        var result = param.options.map(function (item) {\n          return _this2.processItemForRequestString(item);\n        });\n        if (result.every(Boolean)) return result.join(\"|\");\n      } else if (param.isString()) {\n        return param.string;\n      }\n    }\n  }, {\n    key: \"processCallRequire\",\n    value: function processCallRequire(parser, expr) {\n      var _this3 = this;\n\n      var param;\n      var dep;\n      var result;\n      var old = parser.state.current;\n\n      if (expr.arguments.length >= 1) {\n        param = parser.evaluateExpression(expr.arguments[0]);\n        dep = this.newRequireDependenciesBlock(expr, param.range, expr.arguments.length > 1 ? expr.arguments[1].range : null, expr.arguments.length > 2 ? expr.arguments[2].range : null, parser.state.module, expr.loc, this.processArrayForRequestString(param));\n        parser.state.current = dep;\n      }\n\n      if (expr.arguments.length === 1) {\n        parser.inScope([], function () {\n          result = _this3.processArray(parser, expr, param);\n        });\n        parser.state.current = old;\n        if (!result) return;\n        parser.state.current.addBlock(dep);\n        return true;\n      }\n\n      if (expr.arguments.length === 2 || expr.arguments.length === 3) {\n        try {\n          parser.inScope([], function () {\n            result = _this3.processArray(parser, expr, param);\n          });\n\n          if (!result) {\n            dep = new UnsupportedDependency(\"unsupported\", expr.range);\n            old.addDependency(dep);\n\n            if (parser.state.module) {\n              parser.state.module.errors.push(new UnsupportedFeatureWarning(parser.state.module, \"Cannot statically analyse 'require(…, …)' in line \" + expr.loc.start.line, expr.loc));\n            }\n\n            dep = null;\n            return true;\n          }\n\n          dep.functionBindThis = this.processFunctionArgument(parser, expr.arguments[1]);\n\n          if (expr.arguments.length === 3) {\n            dep.errorCallbackBindThis = this.processFunctionArgument(parser, expr.arguments[2]);\n          }\n        } finally {\n          parser.state.current = old;\n          if (dep) parser.state.current.addBlock(dep);\n        }\n\n        return true;\n      }\n    }\n  }, {\n    key: \"newRequireDependenciesBlock\",\n    value: function newRequireDependenciesBlock(expr, arrayRange, functionRange, errorCallbackRange, module, loc, request) {\n      return new AMDRequireDependenciesBlock(expr, arrayRange, functionRange, errorCallbackRange, module, loc, request);\n    }\n  }, {\n    key: \"newRequireItemDependency\",\n    value: function newRequireItemDependency(request, range) {\n      return new AMDRequireItemDependency(request, range);\n    }\n  }, {\n    key: \"newRequireArrayDependency\",\n    value: function newRequireArrayDependency(depsArray, range) {\n      return new AMDRequireArrayDependency(depsArray, range);\n    }\n  }]);\n\n  return AMDRequireDependenciesBlockParserPlugin;\n}();\n\nmodule.exports = AMDRequireDependenciesBlockParserPlugin;","map":null,"metadata":{},"sourceType":"module"}