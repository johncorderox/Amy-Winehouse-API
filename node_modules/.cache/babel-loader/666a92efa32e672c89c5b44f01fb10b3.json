{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ConstDependency = require(\"./ConstDependency\");\n\nvar CommonJsRequireDependency = require(\"./CommonJsRequireDependency\");\n\nvar CommonJsRequireContextDependency = require(\"./CommonJsRequireContextDependency\");\n\nvar RequireResolveDependency = require(\"./RequireResolveDependency\");\n\nvar RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\n\nvar RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\n\nvar RequireHeaderDependency = require(\"./RequireHeaderDependency\");\n\nvar NullFactory = require(\"../NullFactory\");\n\nvar RequireResolveDependencyParserPlugin = require(\"./RequireResolveDependencyParserPlugin\");\n\nvar CommonJsRequireDependencyParserPlugin = require(\"./CommonJsRequireDependencyParserPlugin\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar CommonJsPlugin = /*#__PURE__*/function () {\n  function CommonJsPlugin(options) {\n    _classCallCheck(this, CommonJsPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(CommonJsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"CommonJsPlugin\", function (compilation, _ref) {\n        var contextModuleFactory = _ref.contextModuleFactory,\n            normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(CommonJsRequireDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(CommonJsRequireDependency, new CommonJsRequireDependency.Template());\n        compilation.dependencyFactories.set(CommonJsRequireContextDependency, contextModuleFactory);\n        compilation.dependencyTemplates.set(CommonJsRequireContextDependency, new CommonJsRequireContextDependency.Template());\n        compilation.dependencyFactories.set(RequireResolveDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(RequireResolveDependency, new RequireResolveDependency.Template());\n        compilation.dependencyFactories.set(RequireResolveContextDependency, contextModuleFactory);\n        compilation.dependencyTemplates.set(RequireResolveContextDependency, new RequireResolveContextDependency.Template());\n        compilation.dependencyFactories.set(RequireResolveHeaderDependency, new NullFactory());\n        compilation.dependencyTemplates.set(RequireResolveHeaderDependency, new RequireResolveHeaderDependency.Template());\n        compilation.dependencyFactories.set(RequireHeaderDependency, new NullFactory());\n        compilation.dependencyTemplates.set(RequireHeaderDependency, new RequireHeaderDependency.Template());\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.commonjs !== undefined && !parserOptions.commonjs) return;\n          var requireExpressions = [\"require\", \"require.resolve\", \"require.resolveWeak\"];\n\n          for (var _i = 0, _requireExpressions = requireExpressions; _i < _requireExpressions.length; _i++) {\n            var expression = _requireExpressions[_i];\n            parser.hooks[\"typeof\"][\"for\"](expression).tap(\"CommonJsPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n            parser.hooks.evaluateTypeof[\"for\"](expression).tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"function\"));\n            parser.hooks.evaluateIdentifier[\"for\"](expression).tap(\"CommonJsPlugin\", ParserHelpers.evaluateToIdentifier(expression, true));\n          }\n\n          parser.hooks.evaluateTypeof[\"for\"](\"module\").tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n          parser.hooks.assign[\"for\"](\"require\").tap(\"CommonJsPlugin\", function (expr) {\n            // to not leak to global \"require\", we need to define a local require here.\n            var dep = new ConstDependency(\"var require;\", 0);\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            parser.scope.definitions.add(\"require\");\n            return true;\n          });\n          parser.hooks.canRename[\"for\"](\"require\").tap(\"CommonJsPlugin\", function () {\n            return true;\n          });\n          parser.hooks.rename[\"for\"](\"require\").tap(\"CommonJsPlugin\", function (expr) {\n            // define the require variable. It's still undefined, but not \"not defined\".\n            var dep = new ConstDependency(\"var require;\", 0);\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            return false;\n          });\n          parser.hooks[\"typeof\"][\"for\"](\"module\").tap(\"CommonJsPlugin\", function () {\n            return true;\n          });\n          parser.hooks.evaluateTypeof[\"for\"](\"exports\").tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n          new CommonJsRequireDependencyParserPlugin(options).apply(parser);\n          new RequireResolveDependencyParserPlugin(options).apply(parser);\n        };\n\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/auto\").tap(\"CommonJsPlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/dynamic\").tap(\"CommonJsPlugin\", handler);\n      });\n    }\n  }]);\n\n  return CommonJsPlugin;\n}();\n\nmodule.exports = CommonJsPlugin;","map":null,"metadata":{},"sourceType":"module"}