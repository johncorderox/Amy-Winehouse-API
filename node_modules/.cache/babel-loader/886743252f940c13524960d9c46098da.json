{"ast":null,"code":"var dotenv = require('dotenv');\n/**\n * Merges two objects.\n * @param {Object} apply - The overwriter\n * @param {Object} defaults - The defaults to be overwritten\n * @returns {Object} The merged results.\n */\n\n\nvar merge = function merge() {\n  var apply = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.assign({}, defaults, apply);\n};\n/**\n * Parses objects like before, but with defaults!\n * @param {String} src - The original src.\n * @param {String} [defaultSrc=''] - The new-and-improved default source.\n * @returns {Object} The parsed results.\n */\n\n\nvar parse = function parse(src) {\n  var defaultSrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var parsedSrc = dotenv.parse(src);\n  var parsedDefault = dotenv.parse(defaultSrc);\n  return merge(parsedSrc, parsedDefault);\n};\n/**\n * Runs the configurations and applies it to process.env.\n * @param {Object} [options={}] - The options to determnie how this goes\n * @returns {Object} The parsed results.\n */\n\n\nvar config = function config() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var src = dotenv.config(options); // we run this second so it doesn't override things set from src\n\n  var defaults = dotenv.config(Object.assign({}, options, {\n    path: options.defaults || '.env.defaults'\n  }));\n  return {\n    parsed: merge(src.parsed, defaults.parsed)\n  };\n};\n\nmodule.exports = {\n  parse: parse,\n  config: config\n};","map":null,"metadata":{},"sourceType":"module"}