{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport * as leb from \"@webassemblyjs/leb128\";\nimport * as ieee754 from \"@webassemblyjs/ieee754\";\nimport * as utf8 from \"@webassemblyjs/utf8\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { encodeNode } from \"../index\";\n\nfunction assertNotIdentifierNode(n) {\n  if (n.type === \"Identifier\") {\n    throw new Error(\"Unsupported node Identifier\");\n  }\n}\n\nexport function encodeVersion(v) {\n  var bytes = constants.moduleVersion;\n  bytes[0] = v;\n  return bytes;\n}\nexport function encodeHeader() {\n  return constants.magicModuleHeader;\n}\nexport function encodeU32(v) {\n  var uint8view = new Uint8Array(leb.encodeU32(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\nexport function encodeI32(v) {\n  var uint8view = new Uint8Array(leb.encodeI32(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\nexport function encodeI64(v) {\n  var uint8view = new Uint8Array(leb.encodeI64(v));\n\n  var array = _toConsumableArray(uint8view);\n\n  return array;\n}\nexport function encodeVec(elements) {\n  var size = encodeU32(elements.length);\n  return _toConsumableArray(size).concat(_toConsumableArray(elements));\n}\nexport function encodeValtype(v) {\n  var _byte = constants.valtypesByString[v];\n\n  if (typeof _byte === \"undefined\") {\n    throw new Error(\"Unknown valtype: \" + v);\n  }\n\n  return parseInt(_byte, 10);\n}\nexport function encodeMutability(v) {\n  var _byte2 = constants.globalTypesByString[v];\n\n  if (typeof _byte2 === \"undefined\") {\n    throw new Error(\"Unknown mutability: \" + v);\n  }\n\n  return parseInt(_byte2, 10);\n}\nexport function encodeUTF8Vec(str) {\n  return encodeVec(utf8.encode(str));\n}\nexport function encodeLimits(n) {\n  var out = [];\n\n  if (typeof n.max === \"number\") {\n    out.push(0x01);\n    out.push.apply(out, _toConsumableArray(encodeU32(n.min))); // $FlowIgnore: ensured by the typeof\n\n    out.push.apply(out, _toConsumableArray(encodeU32(n.max)));\n  } else {\n    out.push(0x00);\n    out.push.apply(out, _toConsumableArray(encodeU32(n.min)));\n  }\n\n  return out;\n}\nexport function encodeModuleImport(n) {\n  var out = [];\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.module)));\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.name)));\n\n  switch (n.descr.type) {\n    case \"GlobalType\":\n      {\n        out.push(0x03); // $FlowIgnore: GlobalType ensure that these props exists\n\n        out.push(encodeValtype(n.descr.valtype)); // $FlowIgnore: GlobalType ensure that these props exists\n\n        out.push(encodeMutability(n.descr.mutability));\n        break;\n      }\n\n    case \"Memory\":\n      {\n        out.push(0x02); // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeLimits(n.descr.limits)));\n        break;\n      }\n\n    case \"Table\":\n      {\n        out.push(0x01);\n        out.push(0x70); // element type\n        // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeLimits(n.descr.limits)));\n        break;\n      }\n\n    case \"FuncImportDescr\":\n      {\n        out.push(0x00); // $FlowIgnore\n\n        assertNotIdentifierNode(n.descr.id); // $FlowIgnore\n\n        out.push.apply(out, _toConsumableArray(encodeU32(n.descr.id.value)));\n        break;\n      }\n\n    default:\n      throw new Error(\"Unsupport operation: encode module import of type: \" + n.descr.type);\n  }\n\n  return out;\n}\nexport function encodeSectionMetadata(n) {\n  var out = [];\n  var sectionId = constants.sections[n.section];\n\n  if (typeof sectionId === \"undefined\") {\n    throw new Error(\"Unknown section: \" + n.section);\n  }\n\n  if (n.section === \"start\") {\n    /**\n     * This is not implemented yet because it's a special case which\n     * doesn't have a vector in its section.\n     */\n    throw new Error(\"Unsupported section encoding of type start\");\n  }\n\n  out.push(sectionId);\n  out.push.apply(out, _toConsumableArray(encodeU32(n.size.value)));\n  out.push.apply(out, _toConsumableArray(encodeU32(n.vectorOfSize.value)));\n  return out;\n}\nexport function encodeCallInstruction(n) {\n  var out = [];\n  assertNotIdentifierNode(n.index);\n  out.push(0x10); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.index.value)));\n  return out;\n}\nexport function encodeCallIndirectInstruction(n) {\n  var out = []; // $FlowIgnore\n\n  assertNotIdentifierNode(n.index);\n  out.push(0x11); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.index.value))); // add a reserved byte\n\n  out.push(0x00);\n  return out;\n}\nexport function encodeModuleExport(n) {\n  var out = [];\n  assertNotIdentifierNode(n.descr.id);\n  var exportTypeByteString = constants.exportTypesByName[n.descr.exportType];\n\n  if (typeof exportTypeByteString === \"undefined\") {\n    throw new Error(\"Unknown export of type: \" + n.descr.exportType);\n  }\n\n  var exportTypeByte = parseInt(exportTypeByteString, 10);\n  out.push.apply(out, _toConsumableArray(encodeUTF8Vec(n.name)));\n  out.push(exportTypeByte); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.descr.id.value)));\n  return out;\n}\nexport function encodeTypeInstruction(n) {\n  var out = [0x60];\n  var params = n.functype.params.map(function (x) {\n    return x.valtype;\n  }).map(encodeValtype);\n  var results = n.functype.results.map(encodeValtype);\n  out.push.apply(out, _toConsumableArray(encodeVec(params)));\n  out.push.apply(out, _toConsumableArray(encodeVec(results)));\n  return out;\n}\nexport function encodeInstr(n) {\n  var out = [];\n  var instructionName = n.id;\n\n  if (typeof n.object === \"string\") {\n    instructionName = \"\".concat(n.object, \".\").concat(String(n.id));\n  }\n\n  var byteString = constants.symbolsByName[instructionName];\n\n  if (typeof byteString === \"undefined\") {\n    throw new Error(\"encodeInstr: unknown instruction \" + JSON.stringify(instructionName));\n  }\n\n  var _byte3 = parseInt(byteString, 10);\n\n  out.push(_byte3);\n\n  if (n.args) {\n    n.args.forEach(function (arg) {\n      var encoder = encodeU32; // find correct encoder\n\n      if (n.object === \"i32\") {\n        encoder = encodeI32;\n      }\n\n      if (n.object === \"i64\") {\n        encoder = encodeI64;\n      }\n\n      if (n.object === \"f32\") {\n        encoder = ieee754.encodeF32;\n      }\n\n      if (n.object === \"f64\") {\n        encoder = ieee754.encodeF64;\n      }\n\n      if (arg.type === \"NumberLiteral\" || arg.type === \"FloatLiteral\" || arg.type === \"LongNumberLiteral\") {\n        // $FlowIgnore\n        out.push.apply(out, _toConsumableArray(encoder(arg.value)));\n      } else {\n        throw new Error(\"Unsupported instruction argument encoding \" + JSON.stringify(arg.type));\n      }\n    });\n  }\n\n  return out;\n}\n\nfunction encodeExpr(instrs) {\n  var out = [];\n  instrs.forEach(function (instr) {\n    // $FlowIgnore\n    var n = encodeNode(instr);\n    out.push.apply(out, _toConsumableArray(n));\n  });\n  return out;\n}\n\nexport function encodeStringLiteral(n) {\n  return encodeUTF8Vec(n.value);\n}\nexport function encodeGlobal(n) {\n  var out = [];\n  var _n$globalType = n.globalType,\n      valtype = _n$globalType.valtype,\n      mutability = _n$globalType.mutability;\n  out.push(encodeValtype(valtype));\n  out.push(encodeMutability(mutability));\n  out.push.apply(out, _toConsumableArray(encodeExpr(n.init)));\n  return out;\n}\nexport function encodeFuncBody(n) {\n  var out = [];\n  out.push(-1); // temporary function body size\n  // FIXME(sven): get the func locals?\n\n  var localBytes = encodeVec([]);\n  out.push.apply(out, _toConsumableArray(localBytes));\n  var funcBodyBytes = encodeExpr(n.body);\n  out[0] = funcBodyBytes.length + localBytes.length;\n  out.push.apply(out, _toConsumableArray(funcBodyBytes));\n  return out;\n}\nexport function encodeIndexInFuncSection(n) {\n  assertNotIdentifierNode(n.index); // $FlowIgnore\n\n  return encodeU32(n.index.value);\n}\nexport function encodeElem(n) {\n  var out = [];\n  assertNotIdentifierNode(n.table); // $FlowIgnore\n\n  out.push.apply(out, _toConsumableArray(encodeU32(n.table.value)));\n  out.push.apply(out, _toConsumableArray(encodeExpr(n.offset))); // $FlowIgnore\n\n  var funcs = n.funcs.reduce(function (acc, x) {\n    return _toConsumableArray(acc).concat(_toConsumableArray(encodeU32(x.value)));\n  }, []);\n  out.push.apply(out, _toConsumableArray(encodeVec(funcs)));\n  return out;\n}","map":null,"metadata":{},"sourceType":"module"}