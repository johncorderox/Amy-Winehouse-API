{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _toArray(arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n}\n\nfunction con(n) {\n  return 0x80 | n & 0x3f;\n}\n\nexport function encode(str) {\n  var arr = str.split(\"\").map(function (x) {\n    return x.charCodeAt(0);\n  });\n  return _encode(arr);\n}\n\nfunction _encode(arr) {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  var _arr = _toArray(arr),\n      n = _arr[0],\n      ns = _arr.slice(1);\n\n  if (n < 0) {\n    throw new Error(\"utf8\");\n  }\n\n  if (n < 0x80) {\n    return [n].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x800) {\n    return [0xc0 | n >>> 6, con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x10000) {\n    return [0xe0 | n >>> 12, con(n >>> 6), con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x110000) {\n    return [0xf0 | n >>> 18, con(n >>> 12), con(n >>> 6), con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  throw new Error(\"utf8\");\n}","map":null,"metadata":{},"sourceType":"module"}