{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar ChunkGroup = require(\"./ChunkGroup\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\n\n\nvar Entrypoint = /*#__PURE__*/function (_ChunkGroup) {\n  _inherits(Entrypoint, _ChunkGroup);\n\n  var _super = _createSuper(Entrypoint);\n\n  /**\n   * Creates an instance of Entrypoint.\n   * @param {string} name the name of the entrypoint\n   */\n  function Entrypoint(name) {\n    var _this;\n\n    _classCallCheck(this, Entrypoint);\n\n    _this = _super.call(this, name);\n    /** @type {Chunk=} */\n\n    _this.runtimeChunk = undefined;\n    return _this;\n  }\n  /**\n   * isInitial will always return true for Entrypoint ChunkGroup.\n   * @returns {true} returns true as all entrypoints are initial ChunkGroups\n   */\n\n\n  _createClass(Entrypoint, [{\n    key: \"isInitial\",\n    value: function isInitial() {\n      return true;\n    }\n    /**\n     * Sets the runtimeChunk for an entrypoint.\n     * @param {Chunk} chunk the chunk being set as the runtime chunk.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setRuntimeChunk\",\n    value: function setRuntimeChunk(chunk) {\n      this.runtimeChunk = chunk;\n    }\n    /**\n     * Fetches the chunk reference containing the webpack bootstrap code\n     * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n     */\n\n  }, {\n    key: \"getRuntimeChunk\",\n    value: function getRuntimeChunk() {\n      return this.runtimeChunk || this.chunks[0];\n    }\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunk that will be replaced with\n     * @returns {boolean} returns true if the replacement was successful\n     */\n\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      if (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n      return _get(_getPrototypeOf(Entrypoint.prototype), \"replaceChunk\", this).call(this, oldChunk, newChunk);\n    }\n  }]);\n\n  return Entrypoint;\n}(ChunkGroup);\n\nmodule.exports = Entrypoint;","map":null,"metadata":{},"sourceType":"module"}