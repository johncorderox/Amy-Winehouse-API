{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Queue = require(\"../util/Queue\");\n\nvar _require = require(\"../util/SetHelpers\"),\n    intersect = _require.intersect;\n\nvar getParentChunksWithModule = function getParentChunksWithModule(currentChunk, module) {\n  var chunks = [];\n  var stack = new Set(currentChunk.parentsIterable);\n\n  var _iterator = _createForOfIteratorHelper(stack),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var chunk = _step.value;\n\n      if (chunk.containsModule(module)) {\n        chunks.push(chunk);\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(chunk.parentsIterable),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var parent = _step2.value;\n            stack.add(parent);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return chunks;\n};\n\nvar RemoveParentModulesPlugin = /*#__PURE__*/function () {\n  function RemoveParentModulesPlugin() {\n    _classCallCheck(this, RemoveParentModulesPlugin);\n  }\n\n  _createClass(RemoveParentModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"RemoveParentModulesPlugin\", function (compilation) {\n        var handler = function handler(chunks, chunkGroups) {\n          var queue = new Queue();\n          var availableModulesMap = new WeakMap();\n\n          var _iterator3 = _createForOfIteratorHelper(compilation.entrypoints.values()),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _chunkGroup = _step3.value;\n              // initialize available modules for chunks without parents\n              availableModulesMap.set(_chunkGroup, new Set());\n\n              var _iterator10 = _createForOfIteratorHelper(_chunkGroup.childrenIterable),\n                  _step10;\n\n              try {\n                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                  var _child = _step10.value;\n                  queue.enqueue(_child);\n                }\n              } catch (err) {\n                _iterator10.e(err);\n              } finally {\n                _iterator10.f();\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          while (queue.length > 0) {\n            var chunkGroup = queue.dequeue();\n            var availableModules = availableModulesMap.get(chunkGroup);\n            var changed = false;\n\n            var _iterator4 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var parent = _step4.value;\n                var availableModulesInParent = availableModulesMap.get(parent);\n\n                if (availableModulesInParent !== undefined) {\n                  // If we know the available modules in parent: process these\n                  if (availableModules === undefined) {\n                    // if we have not own info yet: create new entry\n                    availableModules = new Set(availableModulesInParent);\n\n                    var _iterator6 = _createForOfIteratorHelper(parent.chunks),\n                        _step6;\n\n                    try {\n                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                        var chunk = _step6.value;\n\n                        var _iterator7 = _createForOfIteratorHelper(chunk.modulesIterable),\n                            _step7;\n\n                        try {\n                          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                            var m = _step7.value;\n                            availableModules.add(m);\n                          }\n                        } catch (err) {\n                          _iterator7.e(err);\n                        } finally {\n                          _iterator7.f();\n                        }\n                      }\n                    } catch (err) {\n                      _iterator6.e(err);\n                    } finally {\n                      _iterator6.f();\n                    }\n\n                    availableModulesMap.set(chunkGroup, availableModules);\n                    changed = true;\n                  } else {\n                    var _iterator8 = _createForOfIteratorHelper(availableModules),\n                        _step8;\n\n                    try {\n                      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                        var _m = _step8.value;\n\n                        if (!parent.containsModule(_m) && !availableModulesInParent.has(_m)) {\n                          availableModules[\"delete\"](_m);\n                          changed = true;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator8.e(err);\n                    } finally {\n                      _iterator8.f();\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n\n            if (changed) {\n              // if something changed: enqueue our children\n              var _iterator5 = _createForOfIteratorHelper(chunkGroup.childrenIterable),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var child = _step5.value;\n                  queue.enqueue(child);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } // now we have available modules for every chunk\n\n\n          var _iterator9 = _createForOfIteratorHelper(chunks),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var _chunk = _step9.value;\n              var availableModulesSets = Array.from(_chunk.groupsIterable, function (chunkGroup) {\n                return availableModulesMap.get(chunkGroup);\n              });\n              if (availableModulesSets.some(function (s) {\n                return s === undefined;\n              })) continue; // No info about this chunk group\n\n              var _availableModules = availableModulesSets.length === 1 ? availableModulesSets[0] : intersect(availableModulesSets);\n\n              var numberOfModules = _chunk.getNumberOfModules();\n\n              var toRemove = new Set();\n\n              if (numberOfModules < _availableModules.size) {\n                var _iterator11 = _createForOfIteratorHelper(_chunk.modulesIterable),\n                    _step11;\n\n                try {\n                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                    var _m2 = _step11.value;\n\n                    if (_availableModules.has(_m2)) {\n                      toRemove.add(_m2);\n                    }\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n              } else {\n                var _iterator12 = _createForOfIteratorHelper(_availableModules),\n                    _step12;\n\n                try {\n                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                    var _m3 = _step12.value;\n\n                    if (_chunk.containsModule(_m3)) {\n                      toRemove.add(_m3);\n                    }\n                  }\n                } catch (err) {\n                  _iterator12.e(err);\n                } finally {\n                  _iterator12.f();\n                }\n              }\n\n              var _iterator13 = _createForOfIteratorHelper(toRemove),\n                  _step13;\n\n              try {\n                for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                  var _module = _step13.value;\n\n                  _module.rewriteChunkInReasons(_chunk, getParentChunksWithModule(_chunk, _module));\n\n                  _chunk.removeModule(_module);\n                }\n              } catch (err) {\n                _iterator13.e(err);\n              } finally {\n                _iterator13.f();\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        };\n\n        compilation.hooks.optimizeChunksBasic.tap(\"RemoveParentModulesPlugin\", handler);\n        compilation.hooks.optimizeExtractedChunksBasic.tap(\"RemoveParentModulesPlugin\", handler);\n      });\n    }\n  }]);\n\n  return RemoveParentModulesPlugin;\n}();\n\nmodule.exports = RemoveParentModulesPlugin;","map":null,"metadata":{},"sourceType":"module"}