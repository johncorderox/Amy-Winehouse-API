{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar JsonParser = require(\"./JsonParser\");\n\nvar JsonGenerator = require(\"./JsonGenerator\");\n\nvar JsonModulesPlugin = /*#__PURE__*/function () {\n  function JsonModulesPlugin() {\n    _classCallCheck(this, JsonModulesPlugin);\n  }\n\n  _createClass(JsonModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"JsonModulesPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        normalModuleFactory.hooks.createParser[\"for\"](\"json\").tap(\"JsonModulesPlugin\", function () {\n          return new JsonParser();\n        });\n        normalModuleFactory.hooks.createGenerator[\"for\"](\"json\").tap(\"JsonModulesPlugin\", function () {\n          return new JsonGenerator();\n        });\n      });\n    }\n  }]);\n\n  return JsonModulesPlugin;\n}();\n\nmodule.exports = JsonModulesPlugin;","map":null,"metadata":{},"sourceType":"module"}