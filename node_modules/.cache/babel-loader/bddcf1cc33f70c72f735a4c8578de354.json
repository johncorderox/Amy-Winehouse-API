{"ast":null,"code":"'use strict';\n\nmodule.exports = RunQueue;\n\nvar validate = require('aproba');\n\nfunction RunQueue(opts) {\n  validate('Z|O', [opts]);\n  if (!opts) opts = {};\n  this.finished = false;\n  this.inflight = 0;\n  this.maxConcurrency = opts.maxConcurrency || 1;\n  this.queued = 0;\n  this.queue = [];\n  this.currentPrio = null;\n  this.currentQueue = null;\n  this.Promise = opts.Promise || global.Promise;\n  this.deferred = {};\n}\n\nRunQueue.prototype = {};\n\nRunQueue.prototype.run = function () {\n  if (arguments.length !== 0) throw new Error('RunQueue.run takes no arguments');\n  var self = this;\n  var deferred = this.deferred;\n\n  if (!deferred.promise) {\n    deferred.promise = new this.Promise(function (resolve, reject) {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n\n      self._runQueue();\n    });\n  }\n\n  return deferred.promise;\n};\n\nRunQueue.prototype._runQueue = function () {\n  var self = this;\n\n  while (this.inflight < this.maxConcurrency && this.queued) {\n    if (!this.currentQueue || this.currentQueue.length === 0) {\n      // wait till the current priority is entirely processed before\n      // starting a new one\n      if (this.inflight) return;\n      var prios = Object.keys(this.queue);\n\n      for (var ii = 0; ii < prios.length; ++ii) {\n        var prioQueue = this.queue[prios[ii]];\n\n        if (prioQueue.length) {\n          this.currentQueue = prioQueue;\n          this.currentPrio = prios[ii];\n          break;\n        }\n      }\n    }\n\n    --this.queued;\n    ++this.inflight;\n    var next = this.currentQueue.shift();\n    var args = next.args || []; // we explicitly construct a promise here so that queue items can throw\n    // or immediately return to resolve\n\n    var queueEntry = new this.Promise(function (resolve) {\n      resolve(next.cmd.apply(null, args));\n    });\n    queueEntry.then(function () {\n      --self.inflight;\n      if (self.finished) return;\n\n      if (self.queued <= 0 && self.inflight <= 0) {\n        self.finished = true;\n        self.deferred.resolve();\n      }\n\n      self._runQueue();\n    }, function (err) {\n      self.finished = true;\n      self.deferred.reject(err);\n    });\n  }\n};\n\nRunQueue.prototype.add = function (prio, cmd, args) {\n  if (this.finished) throw new Error(\"Can't add to a finished queue. Create a new queue.\");\n  if (Math.abs(Math.floor(prio)) !== prio) throw new Error('Priorities must be a positive integer value.');\n  validate('NFA|NFZ', [prio, cmd, args]);\n  prio = Number(prio);\n  if (!this.queue[prio]) this.queue[prio] = [];\n  ++this.queued;\n  this.queue[prio].push({\n    cmd: cmd,\n    args: args\n  }); // if this priority is higher than the one we're currently processing,\n  // switch back to processing its queue.\n\n  if (this.currentPrio > prio) {\n    this.currentQueue = this.queue[prio];\n    this.currentPrio = prio;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}