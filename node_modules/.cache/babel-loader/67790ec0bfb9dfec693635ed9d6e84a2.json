{"ast":null,"code":"function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _sliceIterator(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _slicedToArray(arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    return _sliceIterator(arr, i);\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n}\n\nimport { isAnonymous, isInstruction } from \"@webassemblyjs/ast\";\nimport Long from \"@xtuc/long\";\nvar compact = false;\nvar space = \" \";\n\nvar quote = function quote(str) {\n  return \"\\\"\".concat(str, \"\\\"\");\n};\n\nfunction indent(nb) {\n  return Array(nb).fill(space + space).join(\"\");\n} // TODO(sven): allow arbitrary ast nodes\n\n\nexport function print(n) {\n  if (n.type === \"Program\") {\n    return printProgram(n, 0);\n  } else {\n    throw new Error(\"Unsupported node in print of type: \" + String(n.type));\n  }\n}\n\nfunction printProgram(n, depth) {\n  return n.body.reduce(function (acc, child) {\n    if (child.type === \"Module\") {\n      acc += printModule(child, depth + 1);\n    }\n\n    if (child.type === \"Func\") {\n      acc += printFunc(child, depth + 1);\n    }\n\n    if (child.type === \"BlockComment\") {\n      acc += printBlockComment(child);\n    }\n\n    if (child.type === \"LeadingComment\") {\n      acc += printLeadingComment(child);\n    }\n\n    if (compact === false) {\n      acc += \"\\n\";\n    }\n\n    return acc;\n  }, \"\");\n}\n\nfunction printTypeInstruction(n) {\n  var out = \"\";\n  out += \"(\";\n  out += \"type\";\n  out += space;\n\n  if (n.id != null) {\n    out += printIndex(n.id);\n    out += space;\n  }\n\n  out += \"(\";\n  out += \"func\";\n  n.functype.params.forEach(function (param) {\n    out += space;\n    out += \"(\";\n    out += \"param\";\n    out += space;\n    out += printFuncParam(param);\n    out += \")\";\n  });\n  n.functype.results.forEach(function (result) {\n    out += space;\n    out += \"(\";\n    out += \"result\";\n    out += space;\n    out += result;\n    out += \")\";\n  });\n  out += \")\"; // func\n\n  out += \")\";\n  return out;\n}\n\nfunction printModule(n, depth) {\n  var out = \"(\";\n  out += \"module\";\n\n  if (typeof n.id === \"string\") {\n    out += space;\n    out += n.id;\n  }\n\n  if (compact === false) {\n    out += \"\\n\";\n  } else {\n    out += space;\n  }\n\n  n.fields.forEach(function (field) {\n    if (compact === false) {\n      out += indent(depth);\n    }\n\n    switch (field.type) {\n      case \"Func\":\n        {\n          out += printFunc(field, depth + 1);\n          break;\n        }\n\n      case \"TypeInstruction\":\n        {\n          out += printTypeInstruction(field);\n          break;\n        }\n\n      case \"Table\":\n        {\n          out += printTable(field);\n          break;\n        }\n\n      case \"Global\":\n        {\n          out += printGlobal(field, depth + 1);\n          break;\n        }\n\n      case \"ModuleExport\":\n        {\n          out += printModuleExport(field);\n          break;\n        }\n\n      case \"ModuleImport\":\n        {\n          out += printModuleImport(field);\n          break;\n        }\n\n      case \"Memory\":\n        {\n          out += printMemory(field);\n          break;\n        }\n\n      case \"BlockComment\":\n        {\n          out += printBlockComment(field);\n          break;\n        }\n\n      case \"LeadingComment\":\n        {\n          out += printLeadingComment(field);\n          break;\n        }\n\n      case \"Start\":\n        {\n          out += printStart(field);\n          break;\n        }\n\n      case \"Elem\":\n        {\n          out += printElem(field, depth);\n          break;\n        }\n\n      case \"Data\":\n        {\n          out += printData(field, depth);\n          break;\n        }\n\n      default:\n        throw new Error(\"Unsupported node in printModule: \" + String(field.type));\n    }\n\n    if (compact === false) {\n      out += \"\\n\";\n    }\n  });\n  out += \")\";\n  return out;\n}\n\nfunction printData(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"data\";\n  out += space;\n  out += printIndex(n.memoryIndex);\n  out += space;\n  out += printInstruction(n.offset, depth);\n  out += space;\n  out += '\"';\n  n.init.values.forEach(function (_byte) {\n    // Avoid non-displayable characters\n    if (_byte <= 31 || _byte == 34 || _byte == 92 || _byte >= 127) {\n      out += \"\\\\\";\n      out += (\"00\" + _byte.toString(16)).substr(-2);\n    } else if (_byte > 255) {\n      throw new Error(\"Unsupported byte in data segment: \" + _byte);\n    } else {\n      out += String.fromCharCode(_byte);\n    }\n  });\n  out += '\"';\n  out += \")\";\n  return out;\n}\n\nfunction printElem(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"elem\";\n  out += space;\n  out += printIndex(n.table);\n\n  var _n$offset = _slicedToArray(n.offset, 1),\n      firstOffset = _n$offset[0];\n\n  out += space;\n  out += \"(\";\n  out += \"offset\";\n  out += space;\n  out += printInstruction(firstOffset, depth);\n  out += \")\";\n  n.funcs.forEach(function (func) {\n    out += space;\n    out += printIndex(func);\n  });\n  out += \")\";\n  return out;\n}\n\nfunction printStart(n) {\n  var out = \"\";\n  out += \"(\";\n  out += \"start\";\n  out += space;\n  out += printIndex(n.index);\n  out += \")\";\n  return out;\n}\n\nfunction printLeadingComment(n) {\n  // Don't print leading comments in compact mode\n  if (compact === true) {\n    return \"\";\n  }\n\n  var out = \"\";\n  out += \";;\";\n  out += n.value;\n  out += \"\\n\";\n  return out;\n}\n\nfunction printBlockComment(n) {\n  // Don't print block comments in compact mode\n  if (compact === true) {\n    return \"\";\n  }\n\n  var out = \"\";\n  out += \"(;\";\n  out += n.value;\n  out += \";)\";\n  out += \"\\n\";\n  return out;\n}\n\nfunction printSignature(n) {\n  var out = \"\";\n  n.params.forEach(function (param) {\n    out += space;\n    out += \"(\";\n    out += \"param\";\n    out += space;\n    out += printFuncParam(param);\n    out += \")\";\n  });\n  n.results.forEach(function (result) {\n    out += space;\n    out += \"(\";\n    out += \"result\";\n    out += space;\n    out += result;\n    out += \")\";\n  });\n  return out;\n}\n\nfunction printModuleImportDescr(n) {\n  var out = \"\";\n\n  if (n.type === \"FuncImportDescr\") {\n    out += \"(\";\n    out += \"func\";\n\n    if (isAnonymous(n.id) === false) {\n      out += space;\n      out += printIdentifier(n.id);\n    }\n\n    out += printSignature(n.signature);\n    out += \")\";\n  }\n\n  if (n.type === \"GlobalType\") {\n    out += \"(\";\n    out += \"global\";\n    out += space;\n    out += printGlobalType(n);\n    out += \")\";\n  }\n\n  if (n.type === \"Table\") {\n    out += printTable(n);\n  }\n\n  return out;\n}\n\nfunction printModuleImport(n) {\n  var out = \"\";\n  out += \"(\";\n  out += \"import\";\n  out += space;\n  out += quote(n.module);\n  out += space;\n  out += quote(n.name);\n  out += space;\n  out += printModuleImportDescr(n.descr);\n  out += \")\";\n  return out;\n}\n\nfunction printGlobalType(n) {\n  var out = \"\";\n\n  if (n.mutability === \"var\") {\n    out += \"(\";\n    out += \"mut\";\n    out += space;\n    out += n.valtype;\n    out += \")\";\n  } else {\n    out += n.valtype;\n  }\n\n  return out;\n}\n\nfunction printGlobal(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"global\";\n  out += space;\n\n  if (n.name != null && isAnonymous(n.name) === false) {\n    out += printIdentifier(n.name);\n    out += space;\n  }\n\n  out += printGlobalType(n.globalType);\n  out += space;\n  n.init.forEach(function (i) {\n    out += printInstruction(i, depth + 1);\n  });\n  out += \")\";\n  return out;\n}\n\nfunction printTable(n) {\n  var out = \"\";\n  out += \"(\";\n  out += \"table\";\n  out += space;\n\n  if (n.name != null && isAnonymous(n.name) === false) {\n    out += printIdentifier(n.name);\n    out += space;\n  }\n\n  out += printLimit(n.limits);\n  out += space;\n  out += n.elementType;\n  out += \")\";\n  return out;\n}\n\nfunction printFuncParam(n) {\n  var out = \"\";\n\n  if (typeof n.id === \"string\") {\n    out += \"$\" + n.id;\n    out += space;\n  }\n\n  out += n.valtype;\n  return out;\n}\n\nfunction printFunc(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"func\";\n\n  if (n.name != null) {\n    if (n.name.type === \"Identifier\" && isAnonymous(n.name) === false) {\n      out += space;\n      out += printIdentifier(n.name);\n    }\n  }\n\n  if (n.signature.type === \"Signature\") {\n    out += printSignature(n.signature);\n  } else {\n    var index = n.signature;\n    out += space;\n    out += \"(\";\n    out += \"type\";\n    out += space;\n    out += printIndex(index);\n    out += \")\";\n  }\n\n  if (n.body.length > 0) {\n    // func is empty since we ignore the default end instruction\n    if (n.body.length === 1 && n.body[0].id === \"end\") {\n      out += \")\";\n      return out;\n    }\n\n    if (compact === false) {\n      out += \"\\n\";\n    }\n\n    n.body.forEach(function (i) {\n      if (i.id !== \"end\") {\n        out += indent(depth);\n        out += printInstruction(i, depth);\n\n        if (compact === false) {\n          out += \"\\n\";\n        }\n      }\n    });\n    out += indent(depth - 1) + \")\";\n  } else {\n    out += \")\";\n  }\n\n  return out;\n}\n\nfunction printInstruction(n, depth) {\n  switch (n.type) {\n    case \"Instr\":\n      // $FlowIgnore\n      return printGenericInstruction(n, depth + 1);\n\n    case \"BlockInstruction\":\n      // $FlowIgnore\n      return printBlockInstruction(n, depth + 1);\n\n    case \"IfInstruction\":\n      // $FlowIgnore\n      return printIfInstruction(n, depth + 1);\n\n    case \"CallInstruction\":\n      // $FlowIgnore\n      return printCallInstruction(n, depth + 1);\n\n    case \"CallIndirectInstruction\":\n      // $FlowIgnore\n      return printCallIndirectIntruction(n, depth + 1);\n\n    case \"LoopInstruction\":\n      // $FlowIgnore\n      return printLoopInstruction(n, depth + 1);\n\n    default:\n      throw new Error(\"Unsupported instruction: \" + JSON.stringify(n.type));\n  }\n}\n\nfunction printCallIndirectIntruction(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"call_indirect\";\n\n  if (n.signature.type === \"Signature\") {\n    out += printSignature(n.signature);\n  } else if (n.signature.type === \"Identifier\") {\n    out += space;\n    out += \"(\";\n    out += \"type\";\n    out += space;\n    out += printIdentifier(n.signature);\n    out += \")\";\n  } else {\n    throw new Error(\"CallIndirectInstruction: unsupported signature \" + JSON.stringify(n.signature.type));\n  }\n\n  out += space;\n\n  if (n.intrs != null) {\n    // $FlowIgnore\n    n.intrs.forEach(function (i, index) {\n      // $FlowIgnore\n      out += printInstruction(i, depth + 1); // $FlowIgnore\n\n      if (index !== n.intrs.length - 1) {\n        out += space;\n      }\n    });\n  }\n\n  out += \")\";\n  return out;\n}\n\nfunction printLoopInstruction(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"loop\";\n\n  if (n.label != null && isAnonymous(n.label) === false) {\n    out += space;\n    out += printIdentifier(n.label);\n  }\n\n  if (typeof n.resulttype === \"string\") {\n    out += space;\n    out += \"(\";\n    out += \"result\";\n    out += space;\n    out += n.resulttype;\n    out += \")\";\n  }\n\n  if (n.instr.length > 0) {\n    n.instr.forEach(function (e) {\n      if (compact === false) {\n        out += \"\\n\";\n      }\n\n      out += indent(depth);\n      out += printInstruction(e, depth + 1);\n    });\n\n    if (compact === false) {\n      out += \"\\n\";\n      out += indent(depth - 1);\n    }\n  }\n\n  out += \")\";\n  return out;\n}\n\nfunction printCallInstruction(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"call\";\n  out += space;\n  out += printIndex(n.index);\n\n  if (_typeof(n.instrArgs) === \"object\") {\n    // $FlowIgnore\n    n.instrArgs.forEach(function (arg) {\n      out += space;\n      out += printFuncInstructionArg(arg, depth + 1);\n    });\n  }\n\n  out += \")\";\n  return out;\n}\n\nfunction printIfInstruction(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"if\";\n\n  if (n.testLabel != null && isAnonymous(n.testLabel) === false) {\n    out += space;\n    out += printIdentifier(n.testLabel);\n  }\n\n  if (typeof n.result === \"string\") {\n    out += space;\n    out += \"(\";\n    out += \"result\";\n    out += space;\n    out += n.result;\n    out += \")\";\n  }\n\n  if (n.test.length > 0) {\n    out += space;\n    n.test.forEach(function (i) {\n      out += printInstruction(i, depth + 1);\n    });\n  }\n\n  if (n.consequent.length > 0) {\n    if (compact === false) {\n      out += \"\\n\";\n    }\n\n    out += indent(depth);\n    out += \"(\";\n    out += \"then\";\n    depth++;\n    n.consequent.forEach(function (i) {\n      if (compact === false) {\n        out += \"\\n\";\n      }\n\n      out += indent(depth);\n      out += printInstruction(i, depth + 1);\n    });\n    depth--;\n\n    if (compact === false) {\n      out += \"\\n\";\n      out += indent(depth);\n    }\n\n    out += \")\";\n  } else {\n    if (compact === false) {\n      out += \"\\n\";\n      out += indent(depth);\n    }\n\n    out += \"(\";\n    out += \"then\";\n    out += \")\";\n  }\n\n  if (n.alternate.length > 0) {\n    if (compact === false) {\n      out += \"\\n\";\n    }\n\n    out += indent(depth);\n    out += \"(\";\n    out += \"else\";\n    depth++;\n    n.alternate.forEach(function (i) {\n      if (compact === false) {\n        out += \"\\n\";\n      }\n\n      out += indent(depth);\n      out += printInstruction(i, depth + 1);\n    });\n    depth--;\n\n    if (compact === false) {\n      out += \"\\n\";\n      out += indent(depth);\n    }\n\n    out += \")\";\n  } else {\n    if (compact === false) {\n      out += \"\\n\";\n      out += indent(depth);\n    }\n\n    out += \"(\";\n    out += \"else\";\n    out += \")\";\n  }\n\n  if (compact === false) {\n    out += \"\\n\";\n    out += indent(depth - 1);\n  }\n\n  out += \")\";\n  return out;\n}\n\nfunction printBlockInstruction(n, depth) {\n  var out = \"\";\n  out += \"(\";\n  out += \"block\";\n\n  if (n.label != null && isAnonymous(n.label) === false) {\n    out += space;\n    out += printIdentifier(n.label);\n  }\n\n  if (typeof n.result === \"string\") {\n    out += space;\n    out += \"(\";\n    out += \"result\";\n    out += space;\n    out += n.result;\n    out += \")\";\n  }\n\n  if (n.instr.length > 0) {\n    n.instr.forEach(function (i) {\n      if (compact === false) {\n        out += \"\\n\";\n      }\n\n      out += indent(depth);\n      out += printInstruction(i, depth + 1);\n    });\n\n    if (compact === false) {\n      out += \"\\n\";\n    }\n\n    out += indent(depth - 1);\n    out += \")\";\n  } else {\n    out += \")\";\n  }\n\n  return out;\n}\n\nfunction printGenericInstruction(n, depth) {\n  var out = \"\";\n  out += \"(\";\n\n  if (typeof n.object === \"string\") {\n    out += n.object;\n    out += \".\";\n  }\n\n  out += n.id;\n  n.args.forEach(function (arg) {\n    out += space;\n    out += printFuncInstructionArg(arg, depth + 1);\n  });\n  out += \")\";\n  return out;\n}\n\nfunction printLongNumberLiteral(n) {\n  if (typeof n.raw === \"string\") {\n    return n.raw;\n  }\n\n  var _n$value = n.value,\n      low = _n$value.low,\n      high = _n$value.high;\n  var v = new Long(low, high);\n  return v.toString();\n}\n\nfunction printFloatLiteral(n) {\n  if (typeof n.raw === \"string\") {\n    return n.raw;\n  }\n\n  return String(n.value);\n}\n\nfunction printFuncInstructionArg(n, depth) {\n  var out = \"\";\n\n  if (n.type === \"NumberLiteral\") {\n    out += printNumberLiteral(n);\n  }\n\n  if (n.type === \"LongNumberLiteral\") {\n    out += printLongNumberLiteral(n);\n  }\n\n  if (n.type === \"Identifier\" && isAnonymous(n) === false) {\n    out += printIdentifier(n);\n  }\n\n  if (n.type === \"ValtypeLiteral\") {\n    out += n.name;\n  }\n\n  if (n.type === \"FloatLiteral\") {\n    out += printFloatLiteral(n);\n  }\n\n  if (isInstruction(n)) {\n    out += printInstruction(n, depth + 1);\n  }\n\n  return out;\n}\n\nfunction printNumberLiteral(n) {\n  if (typeof n.raw === \"string\") {\n    return n.raw;\n  }\n\n  return String(n.value);\n}\n\nfunction printModuleExport(n) {\n  var out = \"\";\n  out += \"(\";\n  out += \"export\";\n  out += space;\n  out += quote(n.name);\n\n  if (n.descr.exportType === \"Func\") {\n    out += space;\n    out += \"(\";\n    out += \"func\";\n    out += space;\n    out += printIndex(n.descr.id);\n    out += \")\";\n  } else if (n.descr.exportType === \"Global\") {\n    out += space;\n    out += \"(\";\n    out += \"global\";\n    out += space;\n    out += printIndex(n.descr.id);\n    out += \")\";\n  } else if (n.descr.exportType === \"Memory\" || n.descr.exportType === \"Mem\") {\n    out += space;\n    out += \"(\";\n    out += \"memory\";\n    out += space;\n    out += printIndex(n.descr.id);\n    out += \")\";\n  } else if (n.descr.exportType === \"Table\") {\n    out += space;\n    out += \"(\";\n    out += \"table\";\n    out += space;\n    out += printIndex(n.descr.id);\n    out += \")\";\n  } else {\n    throw new Error(\"printModuleExport: unknown type: \" + n.descr.exportType);\n  }\n\n  out += \")\";\n  return out;\n}\n\nfunction printIdentifier(n) {\n  return \"$\" + n.value;\n}\n\nfunction printIndex(n) {\n  if (n.type === \"Identifier\") {\n    return printIdentifier(n);\n  } else if (n.type === \"NumberLiteral\") {\n    return printNumberLiteral(n);\n  } else {\n    throw new Error(\"Unsupported index: \" + n.type);\n  }\n}\n\nfunction printMemory(n) {\n  var out = \"\";\n  out += \"(\";\n  out += \"memory\";\n\n  if (n.id != null) {\n    out += space;\n    out += printIndex(n.id);\n    out += space;\n  }\n\n  out += printLimit(n.limits);\n  out += \")\";\n  return out;\n}\n\nfunction printLimit(n) {\n  var out = \"\";\n  out += n.min + \"\";\n\n  if (n.max != null) {\n    out += space;\n    out += String(n.max);\n  }\n\n  return out;\n}","map":null,"metadata":{},"sourceType":"module"}