{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// eslint-disable-next-line no-unused-vars\nvar hotAddUpdateChunk = undefined;\nvar parentHotUpdateCallback = undefined;\nvar $require$ = undefined;\nvar $hotChunkFilename$ = undefined;\nvar $hotMainFilename$ = undefined;\nvar installedChunks = undefined;\nvar importScripts = undefined;\n\nmodule.exports = function () {\n  // eslint-disable-next-line no-unused-vars\n  function webpackHotUpdateCallback(chunkId, moreModules) {\n    hotAddUpdateChunk(chunkId, moreModules);\n    if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);\n  } //$semicolon\n  // eslint-disable-next-line no-unused-vars\n\n\n  function hotDownloadUpdateChunk(chunkId) {\n    importScripts($require$.p + $hotChunkFilename$);\n  } // eslint-disable-next-line no-unused-vars\n\n\n  function hotDownloadManifest(requestTimeout) {\n    requestTimeout = requestTimeout || 10000;\n    return new Promise(function (resolve, reject) {\n      if (typeof XMLHttpRequest === \"undefined\") {\n        return reject(new Error(\"No browser support\"));\n      }\n\n      try {\n        var request = new XMLHttpRequest();\n        var requestPath = $require$.p + $hotMainFilename$;\n        request.open(\"GET\", requestPath, true);\n        request.timeout = requestTimeout;\n        request.send(null);\n      } catch (err) {\n        return reject(err);\n      }\n\n      request.onreadystatechange = function () {\n        if (request.readyState !== 4) return;\n\n        if (request.status === 0) {\n          // timeout\n          reject(new Error(\"Manifest request to \" + requestPath + \" timed out.\"));\n        } else if (request.status === 404) {\n          // no update available\n          resolve();\n        } else if (request.status !== 200 && request.status !== 304) {\n          // other failure\n          reject(new Error(\"Manifest request to \" + requestPath + \" failed.\"));\n        } else {\n          // success\n          try {\n            var update = JSON.parse(request.responseText);\n          } catch (e) {\n            reject(e);\n            return;\n          }\n\n          resolve(update);\n        }\n      };\n    });\n  } //eslint-disable-next-line no-unused-vars\n\n\n  function hotDisposeChunk(chunkId) {\n    delete installedChunks[chunkId];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}