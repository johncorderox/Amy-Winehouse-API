{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\n\nvar SourceMapGenerator = require(\"source-map\").SourceMapGenerator;\n\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\n\nvar fromStringWithSourceMap = require(\"source-list-map\").fromStringWithSourceMap;\n\nvar Source = require(\"./Source\");\n\nvar applySourceMap = require(\"./applySourceMap\");\n\nvar SourceMapSource = /*#__PURE__*/function (_Source) {\n  _inherits(SourceMapSource, _Source);\n\n  var _super = _createSuper(SourceMapSource);\n\n  function SourceMapSource(value, name, sourceMap, originalSource, innerSourceMap, removeOriginalSource) {\n    var _this;\n\n    _classCallCheck(this, SourceMapSource);\n\n    _this = _super.call(this);\n    _this._value = value;\n    _this._name = name;\n    _this._sourceMap = sourceMap;\n    _this._originalSource = originalSource;\n    _this._innerSourceMap = innerSourceMap;\n    _this._removeOriginalSource = removeOriginalSource;\n    return _this;\n  }\n\n  _createClass(SourceMapSource, [{\n    key: \"source\",\n    value: function source() {\n      return this._value;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var sourceMap = this._sourceMap;\n      var node = SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));\n      node.setSourceContent(this._name, this._originalSource);\n      var innerSourceMap = this._innerSourceMap;\n\n      if (innerSourceMap) {\n        node = applySourceMap(node, new SourceMapConsumer(innerSourceMap), this._name, this._removeOriginalSource);\n      }\n\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      options = options || {};\n      if (options.module === false) return new SourceListMap(this._value, this._name, this._value);\n      return fromStringWithSourceMap(this._value, typeof this._sourceMap === \"string\" ? JSON.parse(this._sourceMap) : this._sourceMap);\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this._value);\n      if (this._originalSource) hash.update(this._originalSource);\n    }\n  }]);\n\n  return SourceMapSource;\n}(Source);\n\nrequire(\"./SourceAndMapMixin\")(SourceMapSource.prototype);\n\nmodule.exports = SourceMapSource;","map":null,"metadata":{},"sourceType":"module"}