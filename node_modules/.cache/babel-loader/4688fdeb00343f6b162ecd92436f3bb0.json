{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction findParent(_ref, cb) {\n  var parentPath = _ref.parentPath;\n\n  if (parentPath == null) {\n    throw new Error(\"node is root\");\n  }\n\n  var currentPath = parentPath;\n\n  while (cb(currentPath) !== false) {\n    // Hit the root node, stop\n    // $FlowIgnore\n    if (currentPath.parentPath == null) {\n      return null;\n    } // $FlowIgnore\n\n\n    currentPath = currentPath.parentPath;\n  }\n\n  return currentPath.node;\n}\n\nfunction insertBefore(context, newNode) {\n  return insert(context, newNode);\n}\n\nfunction insertAfter(context, newNode) {\n  return insert(context, newNode, 1);\n}\n\nfunction insert(_ref2, newNode) {\n  var node = _ref2.node,\n      inList = _ref2.inList,\n      parentPath = _ref2.parentPath,\n      parentKey = _ref2.parentKey;\n  var indexOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!inList) {\n    throw new Error('inList' + \" error: \" + (\"insert can only be used for nodes that are within lists\" || \"unknown\"));\n  }\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  } // $FlowIgnore\n\n\n  var parentList = parentPath.node[parentKey];\n  var indexInList = parentList.findIndex(function (n) {\n    return n === node;\n  });\n  parentList.splice(indexInList + indexOffset, 0, newNode);\n}\n\nfunction remove(_ref3) {\n  var node = _ref3.node,\n      parentKey = _ref3.parentKey,\n      parentPath = _ref3.parentPath;\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  } // $FlowIgnore\n\n\n  var parentNode = parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    // $FlowIgnore\n    parentNode[parentKey] = parentProperty.filter(function (n) {\n      return n !== node;\n    });\n  } else {\n    // $FlowIgnore\n    delete parentNode[parentKey];\n  }\n\n  node._deleted = true;\n}\n\nfunction stop(context) {\n  context.shouldStop = true;\n}\n\nfunction replaceWith(context, newNode) {\n  // $FlowIgnore\n  var parentNode = context.parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[context.parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    var indexInList = parentProperty.findIndex(function (n) {\n      return n === context.node;\n    });\n    parentProperty.splice(indexInList, 1, newNode);\n  } else {\n    // $FlowIgnore\n    parentNode[context.parentKey] = newNode;\n  }\n\n  context.node._deleted = true;\n  context.node = newNode;\n} // bind the context to the first argument of node operations\n\n\nfunction bindNodeOperations(operations, context) {\n  var keys = Object.keys(operations);\n  var boundOperations = {};\n  keys.forEach(function (key) {\n    boundOperations[key] = operations[key].bind(null, context);\n  });\n  return boundOperations;\n}\n\nfunction createPathOperations(context) {\n  // $FlowIgnore\n  return bindNodeOperations({\n    findParent: findParent,\n    replaceWith: replaceWith,\n    remove: remove,\n    insertBefore: insertBefore,\n    insertAfter: insertAfter,\n    stop: stop\n  }, context);\n}\n\nexport function createPath(context) {\n  var path = _extends({}, context); // $FlowIgnore\n\n\n  Object.assign(path, createPathOperations(path)); // $FlowIgnore\n\n  return path;\n}","map":null,"metadata":{},"sourceType":"module"}