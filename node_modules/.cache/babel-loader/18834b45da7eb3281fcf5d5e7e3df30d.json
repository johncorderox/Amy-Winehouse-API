{"ast":null,"code":"/* @flow */\n\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\nvar fs = require('fs');\n\nvar path = require('path');\n\nfunction log(message\n/*: string */\n) {\n  console.log(\"[dotenv][DEBUG] \".concat(message));\n}\n\nvar NEWLINE = '\\n';\nvar RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/;\nvar RE_NEWLINES = /\\\\n/g;\nvar NEWLINES_MATCH = /\\n|\\r|\\r\\n/; // Parses src into an Object\n\nfunction parse(src\n/*: string | Buffer */\n, options\n/*: ?DotenvParseOptions */\n)\n/*: DotenvParseOutput */\n{\n  var debug = Boolean(options && options.debug);\n  var obj = {}; // convert Buffers before splitting into lines and processing\n\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    var keyValueArr = line.match(RE_INI_KEY_VAL); // matched?\n\n    if (keyValueArr != null) {\n      var key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      var val = keyValueArr[2] || '';\n      var end = val.length - 1;\n      var isDoubleQuoted = val[0] === '\"' && val[end] === '\"';\n      var isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"; // if single or double quoted, remove quotes\n\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end); // if double quoted, expand newlines\n\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE);\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim();\n      }\n\n      obj[key] = val;\n    } else if (debug) {\n      log(\"did not match key and value when parsing line \".concat(idx + 1, \": \").concat(line));\n    }\n  });\n  return obj;\n} // Populates process.env from .env file\n\n\nfunction config(options\n/*: ?DotenvConfigOptions */\n)\n/*: DotenvConfigOutput */\n{\n  var dotenvPath = path.resolve(process.cwd(), '.env');\n  var encoding\n  /*: string */\n  = 'utf8';\n  var debug = false;\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path;\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n\n    if (options.debug != null) {\n      debug = true;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    var parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding: encoding\n    }), {\n      debug: debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key];\n      } else if (debug) {\n        log(\"\\\"\".concat(key, \"\\\" is already defined in `process.env` and will not be overwritten\"));\n      }\n    });\n    return {\n      parsed: parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\n\nmodule.exports.config = config;\nmodule.exports.parse = parse;","map":null,"metadata":{},"sourceType":"module"}