{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CommonJsRequireDependency = require(\"./CommonJsRequireDependency\");\n\nvar CommonJsRequireContextDependency = require(\"./CommonJsRequireContextDependency\");\n\nvar RequireHeaderDependency = require(\"./RequireHeaderDependency\");\n\nvar LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar LocalModulesHelpers = require(\"./LocalModulesHelpers\");\n\nvar ParserHelpers = require(\"../ParserHelpers\");\n\nvar CommonJsRequireDependencyParserPlugin = /*#__PURE__*/function () {\n  function CommonJsRequireDependencyParserPlugin(options) {\n    _classCallCheck(this, CommonJsRequireDependencyParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(CommonJsRequireDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var options = this.options;\n\n      var processItem = function processItem(expr, param) {\n        if (param.isString()) {\n          var dep = new CommonJsRequireDependency(param.string, param.range);\n          dep.loc = expr.loc;\n          dep.optional = !!parser.scope.inTry;\n          parser.state.current.addDependency(dep);\n          return true;\n        }\n      };\n\n      var processContext = function processContext(expr, param) {\n        var dep = ContextDependencyHelpers.create(CommonJsRequireContextDependency, expr.range, param, expr, options, {}, parser);\n        if (!dep) return;\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      };\n\n      parser.hooks.expression[\"for\"](\"require.cache\").tap(\"CommonJsRequireDependencyParserPlugin\", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, \"__webpack_require__.c\"));\n      parser.hooks.expression[\"for\"](\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", function (expr) {\n        var dep = new CommonJsRequireContextDependency({\n          request: options.unknownContextRequest,\n          recursive: options.unknownContextRecursive,\n          regExp: options.unknownContextRegExp,\n          mode: \"sync\"\n        }, expr.range);\n        dep.critical = options.unknownContextCritical && \"require function is used in a way in which dependencies cannot be statically extracted\";\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n\n      var createHandler = function createHandler(callNew) {\n        return function (expr) {\n          if (expr.arguments.length !== 1) return;\n          var localModule;\n          var param = parser.evaluateExpression(expr.arguments[0]);\n\n          if (param.isConditional()) {\n            var isExpression = false;\n            var prevLength = parser.state.current.dependencies.length;\n            var dep = new RequireHeaderDependency(expr.callee.range);\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n\n            var _iterator = _createForOfIteratorHelper(param.options),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var p = _step.value;\n                var result = processItem(expr, p);\n\n                if (result === undefined) {\n                  isExpression = true;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            if (isExpression) {\n              parser.state.current.dependencies.length = prevLength;\n            } else {\n              return true;\n            }\n          }\n\n          if (param.isString() && (localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string))) {\n            var _dep = new LocalModuleDependency(localModule, expr.range, callNew);\n\n            _dep.loc = expr.loc;\n            parser.state.current.addDependency(_dep);\n            return true;\n          } else {\n            var _result = processItem(expr, param);\n\n            if (_result === undefined) {\n              processContext(expr, param);\n            } else {\n              var _dep2 = new RequireHeaderDependency(expr.callee.range);\n\n              _dep2.loc = expr.loc;\n              parser.state.current.addDependency(_dep2);\n            }\n\n            return true;\n          }\n        };\n      };\n\n      parser.hooks.call[\"for\"](\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(false));\n      parser.hooks[\"new\"][\"for\"](\"require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(true));\n      parser.hooks.call[\"for\"](\"module.require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(false));\n      parser.hooks[\"new\"][\"for\"](\"module.require\").tap(\"CommonJsRequireDependencyParserPlugin\", createHandler(true));\n    }\n  }]);\n\n  return CommonJsRequireDependencyParserPlugin;\n}();\n\nmodule.exports = CommonJsRequireDependencyParserPlugin;","map":null,"metadata":{},"sourceType":"module"}