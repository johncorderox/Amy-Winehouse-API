{"ast":null,"code":"import { encodeU32 } from \"@webassemblyjs/wasm-gen\";\nimport { getSectionMetadata, traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nexport function resizeSectionByteSize(ast, uint8Buffer, section, deltaBytes) {\n  var sectionMetadata = getSectionMetadata(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.size.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.size.loc.start.column;\n  var end = sectionMetadata.size.loc.end.column;\n  var newSectionSize = sectionMetadata.size.value + deltaBytes;\n  var newBytes = encodeU32(newSectionSize);\n  /**\n   * update AST\n   */\n\n  sectionMetadata.size.value = newSectionSize;\n  var oldu32EncodedLen = end - start;\n  var newu32EncodedLen = newBytes.length; // the new u32 has a different encoded length\n\n  if (newu32EncodedLen !== oldu32EncodedLen) {\n    var deltaInSizeEncoding = newu32EncodedLen - oldu32EncodedLen;\n    sectionMetadata.size.loc.end.column = start + newu32EncodedLen;\n    deltaBytes += deltaInSizeEncoding; // move the vec size pointer size the section size is now smaller\n\n    sectionMetadata.vectorOfSize.loc.start.column += deltaInSizeEncoding;\n    sectionMetadata.vectorOfSize.loc.end.column += deltaInSizeEncoding;\n  } // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return overrideBytesInBuffer(uint8Buffer, start, end, newBytes);\n}\nexport function resizeSectionVecSize(ast, uint8Buffer, section, deltaElements) {\n  var sectionMetadata = getSectionMetadata(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.vectorOfSize.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // Section has no vector\n\n\n  if (sectionMetadata.vectorOfSize.value === -1) {\n    return uint8Buffer;\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.vectorOfSize.loc.start.column;\n  var end = sectionMetadata.vectorOfSize.loc.end.column;\n  var newValue = sectionMetadata.vectorOfSize.value + deltaElements;\n  var newBytes = encodeU32(newValue); // Update AST\n\n  sectionMetadata.vectorOfSize.value = newValue;\n  sectionMetadata.vectorOfSize.loc.end.column = start + newBytes.length;\n  return overrideBytesInBuffer(uint8Buffer, start, end, newBytes);\n}","map":null,"metadata":{},"sourceType":"module"}