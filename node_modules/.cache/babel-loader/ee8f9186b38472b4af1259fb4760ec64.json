{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar asyncLib = require(\"neo-async\");\n\nvar util = require(\"util\");\n\nvar _require = require(\"webpack-sources\"),\n    CachedSource = _require.CachedSource;\n\nvar _require2 = require(\"tapable\"),\n    Tapable = _require2.Tapable,\n    SyncHook = _require2.SyncHook,\n    SyncBailHook = _require2.SyncBailHook,\n    SyncWaterfallHook = _require2.SyncWaterfallHook,\n    AsyncSeriesHook = _require2.AsyncSeriesHook;\n\nvar EntryModuleNotFoundError = require(\"./EntryModuleNotFoundError\");\n\nvar ModuleNotFoundError = require(\"./ModuleNotFoundError\");\n\nvar ModuleDependencyWarning = require(\"./ModuleDependencyWarning\");\n\nvar ModuleDependencyError = require(\"./ModuleDependencyError\");\n\nvar ChunkGroup = require(\"./ChunkGroup\");\n\nvar Chunk = require(\"./Chunk\");\n\nvar Entrypoint = require(\"./Entrypoint\");\n\nvar MainTemplate = require(\"./MainTemplate\");\n\nvar ChunkTemplate = require(\"./ChunkTemplate\");\n\nvar HotUpdateChunkTemplate = require(\"./HotUpdateChunkTemplate\");\n\nvar ModuleTemplate = require(\"./ModuleTemplate\");\n\nvar RuntimeTemplate = require(\"./RuntimeTemplate\");\n\nvar ChunkRenderError = require(\"./ChunkRenderError\");\n\nvar Stats = require(\"./Stats\");\n\nvar Semaphore = require(\"./util/Semaphore\");\n\nvar _createHash = require(\"./util/createHash\");\n\nvar SortableSet = require(\"./util/SortableSet\");\n\nvar GraphHelpers = require(\"./GraphHelpers\");\n\nvar ModuleDependency = require(\"./dependencies/ModuleDependency\");\n\nvar compareLocations = require(\"./compareLocations\");\n\nvar _require3 = require(\"./logging/Logger\"),\n    Logger = _require3.Logger,\n    LogType = _require3.LogType;\n\nvar ErrorHelpers = require(\"./ErrorHelpers\");\n\nvar buildChunkGraph = require(\"./buildChunkGraph\");\n\nvar WebpackError = require(\"./WebpackError\");\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./DependenciesBlockVariable\")} DependenciesBlockVariable */\n\n/** @typedef {import(\"./dependencies/SingleEntryDependency\")} SingleEntryDependency */\n\n/** @typedef {import(\"./dependencies/MultiEntryDependency\")} MultiEntryDependency */\n\n/** @typedef {import(\"./dependencies/DllEntryDependency\")} DllEntryDependency */\n\n/** @typedef {import(\"./dependencies/DependencyReference\")} DependencyReference */\n\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n// TODO use @callback\n\n/** @typedef {{[assetName: string]: Source}} CompilationAssets */\n\n/** @typedef {(err: Error|null, result?: Module) => void } ModuleCallback */\n\n/** @typedef {(err?: Error|null, result?: Module) => void } ModuleChainCallback */\n\n/** @typedef {(module: Module) => void} OnModuleCallback */\n\n/** @typedef {(err?: Error|null) => void} Callback */\n\n/** @typedef {(d: Dependency) => any} DepBlockVarDependenciesCallback */\n\n/** @typedef {new (...args: any[]) => Dependency} DepConstructor */\n\n/** @typedef {{apply: () => void}} Plugin */\n\n/**\n * @typedef {Object} ModuleFactoryCreateDataContextInfo\n * @property {string} issuer\n * @property {string} compiler\n */\n\n/**\n * @typedef {Object} ModuleFactoryCreateData\n * @property {ModuleFactoryCreateDataContextInfo} contextInfo\n * @property {any=} resolveOptions\n * @property {string} context\n * @property {Dependency[]} dependencies\n */\n\n/**\n * @typedef {Object} ModuleFactory\n * @property {(data: ModuleFactoryCreateData, callback: ModuleCallback) => any} create\n */\n\n/**\n * @typedef {Object} SortedDependency\n * @property {ModuleFactory} factory\n * @property {Dependency[]} dependencies\n */\n\n/**\n * @typedef {Object} DependenciesBlockLike\n * @property {Dependency[]} dependencies\n * @property {AsyncDependenciesBlock[]} blocks\n * @property {DependenciesBlockVariable[]} variables\n */\n\n/**\n * @typedef {Object} LogEntry\n * @property {string} type\n * @property {any[]} args\n * @property {number} time\n * @property {string[]=} trace\n */\n\n/**\n * @typedef {Object} AssetInfo\n * @property {boolean=} immutable true, if the asset can be long term cached forever (contains a hash)\n * @property {number=} size size in bytes, only set after asset has been emitted\n * @property {boolean=} development true, when asset is only used for development and doesn't count towards user-facing assets\n * @property {boolean=} hotModuleReplacement true, when asset ships data for updating an existing application (HMR)\n */\n\n/**\n * @typedef {Object} Asset\n * @property {string} name the filename of the asset\n * @property {Source} source source of the asset\n * @property {AssetInfo} info info about the asset\n */\n\n/**\n * @param {Chunk} a first chunk to sort by id\n * @param {Chunk} b second chunk to sort by id\n * @returns {-1|0|1} sort value\n */\n\n\nvar byId = function byId(a, b) {\n  if (_typeof(a.id) !== _typeof(b.id)) {\n    return _typeof(a.id) < _typeof(b.id) ? -1 : 1;\n  }\n\n  if (a.id < b.id) return -1;\n  if (a.id > b.id) return 1;\n  return 0;\n};\n/**\n * @param {Module} a first module to sort by\n * @param {Module} b second module to sort by\n * @returns {-1|0|1} sort value\n */\n\n\nvar byIdOrIdentifier = function byIdOrIdentifier(a, b) {\n  if (_typeof(a.id) !== _typeof(b.id)) {\n    return _typeof(a.id) < _typeof(b.id) ? -1 : 1;\n  }\n\n  if (a.id < b.id) return -1;\n  if (a.id > b.id) return 1;\n  var identA = a.identifier();\n  var identB = b.identifier();\n  if (identA < identB) return -1;\n  if (identA > identB) return 1;\n  return 0;\n};\n/**\n * @param {Module} a first module to sort by\n * @param {Module} b second module to sort by\n * @returns {-1|0|1} sort value\n */\n\n\nvar byIndexOrIdentifier = function byIndexOrIdentifier(a, b) {\n  if (a.index < b.index) return -1;\n  if (a.index > b.index) return 1;\n  var identA = a.identifier();\n  var identB = b.identifier();\n  if (identA < identB) return -1;\n  if (identA > identB) return 1;\n  return 0;\n};\n/**\n * @param {Compilation} a first compilation to sort by\n * @param {Compilation} b second compilation to sort by\n * @returns {-1|0|1} sort value\n */\n\n\nvar byNameOrHash = function byNameOrHash(a, b) {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  if (a.fullHash < b.fullHash) return -1;\n  if (a.fullHash > b.fullHash) return 1;\n  return 0;\n};\n/**\n * @param {DependenciesBlockVariable[]} variables DepBlock Variables to iterate over\n * @param {DepBlockVarDependenciesCallback} fn callback to apply on iterated elements\n * @returns {void}\n */\n\n\nvar iterationBlockVariable = function iterationBlockVariable(variables, fn) {\n  for (var indexVariable = 0; indexVariable < variables.length; indexVariable++) {\n    var varDep = variables[indexVariable].dependencies;\n\n    for (var indexVDep = 0; indexVDep < varDep.length; indexVDep++) {\n      fn(varDep[indexVDep]);\n    }\n  }\n};\n/**\n * @template T\n * @param {T[]} arr array of elements to iterate over\n * @param {function(T): void} fn callback applied to each element\n * @returns {void}\n */\n\n\nvar iterationOfArrayCallback = function iterationOfArrayCallback(arr, fn) {\n  for (var index = 0; index < arr.length; index++) {\n    fn(arr[index]);\n  }\n};\n/**\n * @template T\n * @param {Set<T>} set set to add items to\n * @param {Set<T>} otherSet set to add items from\n * @returns {void}\n */\n\n\nvar addAllToSet = function addAllToSet(set, otherSet) {\n  var _iterator = _createForOfIteratorHelper(otherSet),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      set.add(item);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * @param {Source} a a source\n * @param {Source} b another source\n * @returns {boolean} true, when both sources are equal\n */\n\n\nvar isSourceEqual = function isSourceEqual(a, b) {\n  if (a === b) return true; // TODO webpack 5: check .buffer() instead, it's called anyway during emit\n\n  /** @type {Buffer|string} */\n\n  var aSource = a.source();\n  /** @type {Buffer|string} */\n\n  var bSource = b.source();\n  if (aSource === bSource) return true;\n  if (typeof aSource === \"string\" && typeof bSource === \"string\") return false;\n  if (!Buffer.isBuffer(aSource)) aSource = Buffer.from(aSource, \"utf-8\");\n  if (!Buffer.isBuffer(bSource)) bSource = Buffer.from(bSource, \"utf-8\");\n  return aSource.equals(bSource);\n};\n\nvar Compilation = /*#__PURE__*/function (_Tapable) {\n  _inherits(Compilation, _Tapable);\n\n  var _super = _createSuper(Compilation);\n\n  /**\n   * Creates an instance of Compilation.\n   * @param {Compiler} compiler the compiler which created the compilation\n   */\n  function Compilation(compiler) {\n    var _this;\n\n    _classCallCheck(this, Compilation);\n\n    _this = _super.call(this);\n    _this.hooks = {\n      /** @type {SyncHook<Module>} */\n      buildModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook<Module>} */\n      rebuildModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook<Module, Error>} */\n      failedModule: new SyncHook([\"module\", \"error\"]),\n\n      /** @type {SyncHook<Module>} */\n      succeedModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook<Dependency, string>} */\n      addEntry: new SyncHook([\"entry\", \"name\"]),\n\n      /** @type {SyncHook<Dependency, string, Error>} */\n      failedEntry: new SyncHook([\"entry\", \"name\", \"error\"]),\n\n      /** @type {SyncHook<Dependency, string, Module>} */\n      succeedEntry: new SyncHook([\"entry\", \"name\", \"module\"]),\n\n      /** @type {SyncWaterfallHook<DependencyReference, Dependency, Module>} */\n      dependencyReference: new SyncWaterfallHook([\"dependencyReference\", \"dependency\", \"module\"]),\n\n      /** @type {AsyncSeriesHook<Module[]>} */\n      finishModules: new AsyncSeriesHook([\"modules\"]),\n\n      /** @type {SyncHook<Module>} */\n      finishRebuildingModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook} */\n      unseal: new SyncHook([]),\n\n      /** @type {SyncHook} */\n      seal: new SyncHook([]),\n\n      /** @type {SyncHook} */\n      beforeChunks: new SyncHook([]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterChunks: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeDependenciesBasic: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeDependencies: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeDependenciesAdvanced: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      afterOptimizeDependencies: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook} */\n      optimize: new SyncHook([]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeModulesBasic: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeModules: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeModulesAdvanced: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      afterOptimizeModules: new SyncHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], ChunkGroup[]>} */\n      optimizeChunksBasic: new SyncBailHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {SyncBailHook<Chunk[], ChunkGroup[]>} */\n      optimizeChunks: new SyncBailHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {SyncBailHook<Chunk[], ChunkGroup[]>} */\n      optimizeChunksAdvanced: new SyncBailHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {SyncHook<Chunk[], ChunkGroup[]>} */\n      afterOptimizeChunks: new SyncHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {AsyncSeriesHook<Chunk[], Module[]>} */\n      optimizeTree: new AsyncSeriesHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncHook<Chunk[], Module[]>} */\n      afterOptimizeTree: new SyncHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], Module[]>} */\n      optimizeChunkModulesBasic: new SyncBailHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], Module[]>} */\n      optimizeChunkModules: new SyncBailHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], Module[]>} */\n      optimizeChunkModulesAdvanced: new SyncBailHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncHook<Chunk[], Module[]>} */\n      afterOptimizeChunkModules: new SyncHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook} */\n      shouldRecord: new SyncBailHook([]),\n\n      /** @type {SyncHook<Module[], any>} */\n      reviveModules: new SyncHook([\"modules\", \"records\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      optimizeModuleOrder: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      advancedOptimizeModuleOrder: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      beforeModuleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      moduleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      optimizeModuleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      afterOptimizeModuleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Chunk[], any>} */\n      reviveChunks: new SyncHook([\"chunks\", \"records\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      optimizeChunkOrder: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      beforeChunkIds: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      optimizeChunkIds: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterOptimizeChunkIds: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Module[], any>} */\n      recordModules: new SyncHook([\"modules\", \"records\"]),\n\n      /** @type {SyncHook<Chunk[], any>} */\n      recordChunks: new SyncHook([\"chunks\", \"records\"]),\n\n      /** @type {SyncHook} */\n      beforeHash: new SyncHook([]),\n\n      /** @type {SyncHook<Chunk>} */\n      contentHash: new SyncHook([\"chunk\"]),\n\n      /** @type {SyncHook} */\n      afterHash: new SyncHook([]),\n\n      /** @type {SyncHook<any>} */\n      recordHash: new SyncHook([\"records\"]),\n\n      /** @type {SyncHook<Compilation, any>} */\n      record: new SyncHook([\"compilation\", \"records\"]),\n\n      /** @type {SyncHook} */\n      beforeModuleAssets: new SyncHook([]),\n\n      /** @type {SyncBailHook} */\n      shouldGenerateChunkAssets: new SyncBailHook([]),\n\n      /** @type {SyncHook} */\n      beforeChunkAssets: new SyncHook([]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      additionalChunkAssets: new SyncHook([\"chunks\"]),\n\n      /** @type {AsyncSeriesHook} */\n      additionalAssets: new AsyncSeriesHook([]),\n\n      /** @type {AsyncSeriesHook<Chunk[]>} */\n      optimizeChunkAssets: new AsyncSeriesHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterOptimizeChunkAssets: new SyncHook([\"chunks\"]),\n\n      /** @type {AsyncSeriesHook<CompilationAssets>} */\n      optimizeAssets: new AsyncSeriesHook([\"assets\"]),\n\n      /** @type {SyncHook<CompilationAssets>} */\n      afterOptimizeAssets: new SyncHook([\"assets\"]),\n\n      /** @type {SyncBailHook} */\n      needAdditionalSeal: new SyncBailHook([]),\n\n      /** @type {AsyncSeriesHook} */\n      afterSeal: new AsyncSeriesHook([]),\n\n      /** @type {SyncHook<Chunk, Hash>} */\n      chunkHash: new SyncHook([\"chunk\", \"chunkHash\"]),\n\n      /** @type {SyncHook<Module, string>} */\n      moduleAsset: new SyncHook([\"module\", \"filename\"]),\n\n      /** @type {SyncHook<Chunk, string>} */\n      chunkAsset: new SyncHook([\"chunk\", \"filename\"]),\n\n      /** @type {SyncWaterfallHook<string, TODO>} */\n      assetPath: new SyncWaterfallHook([\"filename\", \"data\"]),\n      // TODO MainTemplate\n\n      /** @type {SyncBailHook} */\n      needAdditionalPass: new SyncBailHook([]),\n\n      /** @type {SyncHook<Compiler, string, number>} */\n      childCompiler: new SyncHook([\"childCompiler\", \"compilerName\", \"compilerIndex\"]),\n\n      /** @type {SyncBailHook<string, LogEntry>} */\n      log: new SyncBailHook([\"origin\", \"logEntry\"]),\n      // TODO the following hooks are weirdly located here\n      // TODO move them for webpack 5\n\n      /** @type {SyncHook<object, Module>} */\n      normalModuleLoader: new SyncHook([\"loaderContext\", \"module\"]),\n\n      /** @type {SyncBailHook<Chunk[]>} */\n      optimizeExtractedChunksBasic: new SyncBailHook([\"chunks\"]),\n\n      /** @type {SyncBailHook<Chunk[]>} */\n      optimizeExtractedChunks: new SyncBailHook([\"chunks\"]),\n\n      /** @type {SyncBailHook<Chunk[]>} */\n      optimizeExtractedChunksAdvanced: new SyncBailHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterOptimizeExtractedChunks: new SyncHook([\"chunks\"])\n    };\n\n    _this._pluginCompat.tap(\"Compilation\", function (options) {\n      switch (options.name) {\n        case \"optimize-tree\":\n        case \"additional-assets\":\n        case \"optimize-chunk-assets\":\n        case \"optimize-assets\":\n        case \"after-seal\":\n          options.async = true;\n          break;\n      }\n    });\n    /** @type {string=} */\n\n\n    _this.name = undefined;\n    /** @type {Compiler} */\n\n    _this.compiler = compiler;\n    _this.resolverFactory = compiler.resolverFactory;\n    _this.inputFileSystem = compiler.inputFileSystem;\n    _this.requestShortener = compiler.requestShortener;\n    var options = compiler.options;\n    _this.options = options;\n    _this.outputOptions = options && options.output;\n    /** @type {boolean=} */\n\n    _this.bail = options && options.bail;\n    _this.profile = options && options.profile;\n    _this.performance = options && options.performance;\n    _this.mainTemplate = new MainTemplate(_this.outputOptions);\n    _this.chunkTemplate = new ChunkTemplate(_this.outputOptions);\n    _this.hotUpdateChunkTemplate = new HotUpdateChunkTemplate(_this.outputOptions);\n    _this.runtimeTemplate = new RuntimeTemplate(_this.outputOptions, _this.requestShortener);\n    _this.moduleTemplates = {\n      javascript: new ModuleTemplate(_this.runtimeTemplate, \"javascript\"),\n      webassembly: new ModuleTemplate(_this.runtimeTemplate, \"webassembly\")\n    };\n    _this.semaphore = new Semaphore(options.parallelism || 100);\n    _this.entries = [];\n    /** @private @type {{name: string, request: string, module: Module}[]} */\n\n    _this._preparedEntrypoints = [];\n    /** @type {Map<string, Entrypoint>} */\n\n    _this.entrypoints = new Map();\n    /** @type {Chunk[]} */\n\n    _this.chunks = [];\n    /** @type {ChunkGroup[]} */\n\n    _this.chunkGroups = [];\n    /** @type {Map<string, ChunkGroup>} */\n\n    _this.namedChunkGroups = new Map();\n    /** @type {Map<string, Chunk>} */\n\n    _this.namedChunks = new Map();\n    /** @type {Module[]} */\n\n    _this.modules = [];\n    /** @private @type {Map<string, Module>} */\n\n    _this._modules = new Map();\n    _this.cache = null;\n    _this.records = null;\n    /** @type {string[]} */\n\n    _this.additionalChunkAssets = [];\n    /** @type {CompilationAssets} */\n\n    _this.assets = {};\n    /** @type {Map<string, AssetInfo>} */\n\n    _this.assetsInfo = new Map();\n    /** @type {WebpackError[]} */\n\n    _this.errors = [];\n    /** @type {WebpackError[]} */\n\n    _this.warnings = [];\n    /** @type {Compilation[]} */\n\n    _this.children = [];\n    /** @type {Map<string, LogEntry[]>} */\n\n    _this.logging = new Map();\n    /** @type {Map<DepConstructor, ModuleFactory>} */\n\n    _this.dependencyFactories = new Map();\n    /** @type {Map<DepConstructor, DependencyTemplate>} */\n\n    _this.dependencyTemplates = new Map(); // TODO refactor this in webpack 5 to a custom DependencyTemplates class with a hash property\n    // @ts-ignore\n\n    _this.dependencyTemplates.set(\"hash\", \"\");\n\n    _this.childrenCounters = {};\n    /** @type {Set<number|string>} */\n\n    _this.usedChunkIds = null;\n    /** @type {Set<number>} */\n\n    _this.usedModuleIds = null;\n    /** @type {Map<string, number>=} */\n\n    _this.fileTimestamps = undefined;\n    /** @type {Map<string, number>=} */\n\n    _this.contextTimestamps = undefined;\n    /** @type {Set<string>=} */\n\n    _this.compilationDependencies = undefined;\n    /** @private @type {Map<Module, Callback[]>} */\n\n    _this._buildingModules = new Map();\n    /** @private @type {Map<Module, Callback[]>} */\n\n    _this._rebuildingModules = new Map();\n    /** @type {Set<string>} */\n\n    _this.emittedAssets = new Set();\n    return _this;\n  }\n\n  _createClass(Compilation, [{\n    key: \"getStats\",\n    value: function getStats() {\n      return new Stats(this);\n    }\n    /**\n     * @param {string | (function(): string)} name name of the logger, or function called once to get the logger name\n     * @returns {Logger} a logger with that name\n     */\n\n  }, {\n    key: \"getLogger\",\n    value: function getLogger(name) {\n      var _this2 = this;\n\n      if (!name) {\n        throw new TypeError(\"Compilation.getLogger(name) called without a name\");\n      }\n      /** @type {LogEntry[] | undefined} */\n\n\n      var logEntries;\n      return new Logger(function (type, args) {\n        if (typeof name === \"function\") {\n          name = name();\n\n          if (!name) {\n            throw new TypeError(\"Compilation.getLogger(name) called with a function not returning a name\");\n          }\n        }\n\n        var trace;\n\n        switch (type) {\n          case LogType.warn:\n          case LogType.error:\n          case LogType.trace:\n            trace = ErrorHelpers.cutOffLoaderExecution(new Error(\"Trace\").stack).split(\"\\n\").slice(3);\n            break;\n        }\n        /** @type {LogEntry} */\n\n\n        var logEntry = {\n          time: Date.now(),\n          type: type,\n          args: args,\n          trace: trace\n        };\n\n        if (_this2.hooks.log.call(name, logEntry) === undefined) {\n          if (logEntry.type === LogType.profileEnd) {\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            if (typeof console.profileEnd === \"function\") {\n              // eslint-disable-next-line node/no-unsupported-features/node-builtins\n              console.profileEnd(\"[\".concat(name, \"] \").concat(logEntry.args[0]));\n            }\n          }\n\n          if (logEntries === undefined) {\n            logEntries = _this2.logging.get(name);\n\n            if (logEntries === undefined) {\n              logEntries = [];\n\n              _this2.logging.set(name, logEntries);\n            }\n          }\n\n          logEntries.push(logEntry);\n\n          if (logEntry.type === LogType.profile) {\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            if (typeof console.profile === \"function\") {\n              // eslint-disable-next-line node/no-unsupported-features/node-builtins\n              console.profile(\"[\".concat(name, \"] \").concat(logEntry.args[0]));\n            }\n          }\n        }\n      });\n    }\n    /**\n     * @typedef {Object} AddModuleResult\n     * @property {Module} module the added or existing module\n     * @property {boolean} issuer was this the first request for this module\n     * @property {boolean} build should the module be build\n     * @property {boolean} dependencies should dependencies be walked\n     */\n\n    /**\n     * @param {Module} module module to be added that was created\n     * @param {any=} cacheGroup cacheGroup it is apart of\n     * @returns {AddModuleResult} returns meta about whether or not the module had built\n     * had an issuer, or any dependnecies\n     */\n\n  }, {\n    key: \"addModule\",\n    value: function addModule(module, cacheGroup) {\n      var identifier = module.identifier();\n\n      var alreadyAddedModule = this._modules.get(identifier);\n\n      if (alreadyAddedModule) {\n        return {\n          module: alreadyAddedModule,\n          issuer: false,\n          build: false,\n          dependencies: false\n        };\n      }\n\n      var cacheName = (cacheGroup || \"m\") + identifier;\n\n      if (this.cache && this.cache[cacheName]) {\n        var cacheModule = this.cache[cacheName];\n\n        if (typeof cacheModule.updateCacheModule === \"function\") {\n          cacheModule.updateCacheModule(module);\n        }\n\n        var rebuild = true;\n\n        if (this.fileTimestamps && this.contextTimestamps) {\n          rebuild = cacheModule.needRebuild(this.fileTimestamps, this.contextTimestamps);\n        }\n\n        if (!rebuild) {\n          cacheModule.disconnect();\n\n          this._modules.set(identifier, cacheModule);\n\n          this.modules.push(cacheModule);\n\n          var _iterator2 = _createForOfIteratorHelper(cacheModule.errors),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var err = _step2.value;\n              this.errors.push(err);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(cacheModule.warnings),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _err = _step3.value;\n              this.warnings.push(_err);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          return {\n            module: cacheModule,\n            issuer: true,\n            build: false,\n            dependencies: true\n          };\n        }\n\n        cacheModule.unbuild();\n        module = cacheModule;\n      }\n\n      this._modules.set(identifier, module);\n\n      if (this.cache) {\n        this.cache[cacheName] = module;\n      }\n\n      this.modules.push(module);\n      return {\n        module: module,\n        issuer: true,\n        build: true,\n        dependencies: true\n      };\n    }\n    /**\n     * Fetches a module from a compilation by its identifier\n     * @param {Module} module the module provided\n     * @returns {Module} the module requested\n     */\n\n  }, {\n    key: \"getModule\",\n    value: function getModule(module) {\n      var identifier = module.identifier();\n      return this._modules.get(identifier);\n    }\n    /**\n     * Attempts to search for a module by its identifier\n     * @param {string} identifier identifier (usually path) for module\n     * @returns {Module|undefined} attempt to search for module and return it, else undefined\n     */\n\n  }, {\n    key: \"findModule\",\n    value: function findModule(identifier) {\n      return this._modules.get(identifier);\n    }\n    /**\n     * @param {Module} module module with its callback list\n     * @param {Callback} callback the callback function\n     * @returns {void}\n     */\n\n  }, {\n    key: \"waitForBuildingFinished\",\n    value: function waitForBuildingFinished(module, callback) {\n      var callbackList = this._buildingModules.get(module);\n\n      if (callbackList) {\n        callbackList.push(function () {\n          return callback();\n        });\n      } else {\n        process.nextTick(callback);\n      }\n    }\n    /**\n     * Builds the module object\n     *\n     * @param {Module} module module to be built\n     * @param {boolean} optional optional flag\n     * @param {Module=} origin origin module this module build was requested from\n     * @param {Dependency[]=} dependencies optional dependencies from the module to be built\n     * @param {TODO} thisCallback the callback\n     * @returns {TODO} returns the callback function with results\n     */\n\n  }, {\n    key: \"buildModule\",\n    value: function buildModule(module, optional, origin, dependencies, thisCallback) {\n      var _this3 = this;\n\n      var callbackList = this._buildingModules.get(module);\n\n      if (callbackList) {\n        callbackList.push(thisCallback);\n        return;\n      }\n\n      this._buildingModules.set(module, callbackList = [thisCallback]);\n\n      var callback = function callback(err) {\n        _this3._buildingModules[\"delete\"](module);\n\n        var _iterator4 = _createForOfIteratorHelper(callbackList),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var cb = _step4.value;\n            cb(err);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      };\n\n      this.hooks.buildModule.call(module);\n      module.build(this.options, this, this.resolverFactory.get(\"normal\", module.resolveOptions), this.inputFileSystem, function (error) {\n        var errors = module.errors;\n\n        for (var indexError = 0; indexError < errors.length; indexError++) {\n          var err = errors[indexError];\n          err.origin = origin;\n          err.dependencies = dependencies;\n\n          if (optional) {\n            _this3.warnings.push(err);\n          } else {\n            _this3.errors.push(err);\n          }\n        }\n\n        var warnings = module.warnings;\n\n        for (var indexWarning = 0; indexWarning < warnings.length; indexWarning++) {\n          var war = warnings[indexWarning];\n          war.origin = origin;\n          war.dependencies = dependencies;\n\n          _this3.warnings.push(war);\n        }\n\n        var originalMap = module.dependencies.reduce(function (map, v, i) {\n          map.set(v, i);\n          return map;\n        }, new Map());\n        module.dependencies.sort(function (a, b) {\n          var cmp = compareLocations(a.loc, b.loc);\n          if (cmp) return cmp;\n          return originalMap.get(a) - originalMap.get(b);\n        });\n\n        if (error) {\n          _this3.hooks.failedModule.call(module, error);\n\n          return callback(error);\n        }\n\n        _this3.hooks.succeedModule.call(module);\n\n        return callback();\n      });\n    }\n    /**\n     * @param {Module} module to be processed for deps\n     * @param {ModuleCallback} callback callback to be triggered\n     * @returns {void}\n     */\n\n  }, {\n    key: \"processModuleDependencies\",\n    value: function processModuleDependencies(module, callback) {\n      var _this4 = this;\n\n      var dependencies = new Map();\n\n      var addDependency = function addDependency(dep) {\n        var resourceIdent = dep.getResourceIdentifier();\n\n        if (resourceIdent) {\n          var factory = _this4.dependencyFactories.get(dep.constructor);\n\n          if (factory === undefined) {\n            throw new Error(\"No module factory available for dependency type: \".concat(dep.constructor.name));\n          }\n\n          var innerMap = dependencies.get(factory);\n\n          if (innerMap === undefined) {\n            dependencies.set(factory, innerMap = new Map());\n          }\n\n          var list = innerMap.get(resourceIdent);\n          if (list === undefined) innerMap.set(resourceIdent, list = []);\n          list.push(dep);\n        }\n      };\n\n      var addDependenciesBlock = function addDependenciesBlock(block) {\n        if (block.dependencies) {\n          iterationOfArrayCallback(block.dependencies, addDependency);\n        }\n\n        if (block.blocks) {\n          iterationOfArrayCallback(block.blocks, addDependenciesBlock);\n        }\n\n        if (block.variables) {\n          iterationBlockVariable(block.variables, addDependency);\n        }\n      };\n\n      try {\n        addDependenciesBlock(module);\n      } catch (e) {\n        callback(e);\n      }\n\n      var sortedDependencies = [];\n\n      var _iterator5 = _createForOfIteratorHelper(dependencies),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var pair1 = _step5.value;\n\n          var _iterator6 = _createForOfIteratorHelper(pair1[1]),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var pair2 = _step6.value;\n              sortedDependencies.push({\n                factory: pair1[0],\n                dependencies: pair2[1]\n              });\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      this.addModuleDependencies(module, sortedDependencies, this.bail, null, true, callback);\n    }\n    /**\n     * @param {Module} module module to add deps to\n     * @param {SortedDependency[]} dependencies set of sorted dependencies to iterate through\n     * @param {(boolean|null)=} bail whether to bail or not\n     * @param {TODO} cacheGroup optional cacheGroup\n     * @param {boolean} recursive whether it is recursive traversal\n     * @param {function} callback callback for when dependencies are finished being added\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addModuleDependencies\",\n    value: function addModuleDependencies(module, dependencies, bail, cacheGroup, recursive, callback) {\n      var _this5 = this;\n\n      var start = this.profile && Date.now();\n      var currentProfile = this.profile && {};\n      asyncLib.forEach(dependencies, function (item, callback) {\n        var dependencies = item.dependencies;\n\n        var errorAndCallback = function errorAndCallback(err) {\n          err.origin = module;\n          err.dependencies = dependencies;\n\n          _this5.errors.push(err);\n\n          if (bail) {\n            callback(err);\n          } else {\n            callback();\n          }\n        };\n\n        var warningAndCallback = function warningAndCallback(err) {\n          err.origin = module;\n\n          _this5.warnings.push(err);\n\n          callback();\n        };\n\n        var semaphore = _this5.semaphore;\n        semaphore.acquire(function () {\n          var factory = item.factory;\n          factory.create({\n            contextInfo: {\n              issuer: module.nameForCondition && module.nameForCondition(),\n              compiler: _this5.compiler.name\n            },\n            resolveOptions: module.resolveOptions,\n            context: module.context,\n            dependencies: dependencies\n          }, function (err, dependentModule) {\n            var afterFactory;\n\n            var isOptional = function isOptional() {\n              return dependencies.every(function (d) {\n                return d.optional;\n              });\n            };\n\n            var errorOrWarningAndCallback = function errorOrWarningAndCallback(err) {\n              if (isOptional()) {\n                return warningAndCallback(err);\n              } else {\n                return errorAndCallback(err);\n              }\n            };\n\n            if (err) {\n              semaphore.release();\n              return errorOrWarningAndCallback(new ModuleNotFoundError(module, err));\n            }\n\n            if (!dependentModule) {\n              semaphore.release();\n              return process.nextTick(callback);\n            }\n\n            if (currentProfile) {\n              afterFactory = Date.now();\n              currentProfile.factory = afterFactory - start;\n            }\n\n            var iterationDependencies = function iterationDependencies(depend) {\n              for (var index = 0; index < depend.length; index++) {\n                var dep = depend[index];\n                dep.module = dependentModule;\n                dependentModule.addReason(module, dep);\n              }\n            };\n\n            var addModuleResult = _this5.addModule(dependentModule, cacheGroup);\n\n            dependentModule = addModuleResult.module;\n            iterationDependencies(dependencies);\n\n            var afterBuild = function afterBuild() {\n              if (recursive && addModuleResult.dependencies) {\n                _this5.processModuleDependencies(dependentModule, callback);\n              } else {\n                return callback();\n              }\n            };\n\n            if (addModuleResult.issuer) {\n              if (currentProfile) {\n                dependentModule.profile = currentProfile;\n              }\n\n              dependentModule.issuer = module;\n            } else {\n              if (_this5.profile) {\n                if (module.profile) {\n                  var time = Date.now() - start;\n\n                  if (!module.profile.dependencies || time > module.profile.dependencies) {\n                    module.profile.dependencies = time;\n                  }\n                }\n              }\n            }\n\n            if (addModuleResult.build) {\n              _this5.buildModule(dependentModule, isOptional(), module, dependencies, function (err) {\n                if (err) {\n                  semaphore.release();\n                  return errorOrWarningAndCallback(err);\n                }\n\n                if (currentProfile) {\n                  var afterBuilding = Date.now();\n                  currentProfile.building = afterBuilding - afterFactory;\n                }\n\n                semaphore.release();\n                afterBuild();\n              });\n            } else {\n              semaphore.release();\n\n              _this5.waitForBuildingFinished(dependentModule, afterBuild);\n            }\n          });\n        });\n      }, function (err) {\n        // In V8, the Error objects keep a reference to the functions on the stack. These warnings &\n        // errors are created inside closures that keep a reference to the Compilation, so errors are\n        // leaking the Compilation object.\n        if (err) {\n          // eslint-disable-next-line no-self-assign\n          err.stack = err.stack;\n          return callback(err);\n        }\n\n        return process.nextTick(callback);\n      });\n    }\n    /**\n     *\n     * @param {string} context context string path\n     * @param {Dependency} dependency dependency used to create Module chain\n     * @param {OnModuleCallback} onModule function invoked on modules creation\n     * @param {ModuleChainCallback} callback callback for when module chain is complete\n     * @returns {void} will throw if dependency instance is not a valid Dependency\n     */\n\n  }, {\n    key: \"_addModuleChain\",\n    value: function _addModuleChain(context, dependency, onModule, callback) {\n      var _this6 = this;\n\n      var start = this.profile && Date.now();\n      var currentProfile = this.profile && {};\n      var errorAndCallback = this.bail ? function (err) {\n        callback(err);\n      } : function (err) {\n        err.dependencies = [dependency];\n\n        _this6.errors.push(err);\n\n        callback();\n      };\n\n      if (_typeof(dependency) !== \"object\" || dependency === null || !dependency.constructor) {\n        throw new Error(\"Parameter 'dependency' must be a Dependency\");\n      }\n\n      var Dep =\n      /** @type {DepConstructor} */\n      dependency.constructor;\n      var moduleFactory = this.dependencyFactories.get(Dep);\n\n      if (!moduleFactory) {\n        throw new Error(\"No dependency factory available for this dependency type: \".concat(dependency.constructor.name));\n      }\n\n      this.semaphore.acquire(function () {\n        moduleFactory.create({\n          contextInfo: {\n            issuer: \"\",\n            compiler: _this6.compiler.name\n          },\n          context: context,\n          dependencies: [dependency]\n        }, function (err, module) {\n          if (err) {\n            _this6.semaphore.release();\n\n            return errorAndCallback(new EntryModuleNotFoundError(err));\n          }\n\n          var afterFactory;\n\n          if (currentProfile) {\n            afterFactory = Date.now();\n            currentProfile.factory = afterFactory - start;\n          }\n\n          var addModuleResult = _this6.addModule(module);\n\n          module = addModuleResult.module;\n          onModule(module);\n          dependency.module = module;\n          module.addReason(null, dependency);\n\n          var afterBuild = function afterBuild() {\n            if (addModuleResult.dependencies) {\n              _this6.processModuleDependencies(module, function (err) {\n                if (err) return callback(err);\n                callback(null, module);\n              });\n            } else {\n              return callback(null, module);\n            }\n          };\n\n          if (addModuleResult.issuer) {\n            if (currentProfile) {\n              module.profile = currentProfile;\n            }\n          }\n\n          if (addModuleResult.build) {\n            _this6.buildModule(module, false, null, null, function (err) {\n              if (err) {\n                _this6.semaphore.release();\n\n                return errorAndCallback(err);\n              }\n\n              if (currentProfile) {\n                var afterBuilding = Date.now();\n                currentProfile.building = afterBuilding - afterFactory;\n              }\n\n              _this6.semaphore.release();\n\n              afterBuild();\n            });\n          } else {\n            _this6.semaphore.release();\n\n            _this6.waitForBuildingFinished(module, afterBuild);\n          }\n        });\n      });\n    }\n    /**\n     *\n     * @param {string} context context path for entry\n     * @param {Dependency} entry entry dependency being created\n     * @param {string} name name of entry\n     * @param {ModuleCallback} callback callback function\n     * @returns {void} returns\n     */\n\n  }, {\n    key: \"addEntry\",\n    value: function addEntry(context, entry, name, callback) {\n      var _this7 = this;\n\n      this.hooks.addEntry.call(entry, name);\n      var slot = {\n        name: name,\n        // TODO webpack 5 remove `request`\n        request: null,\n        module: null\n      };\n\n      if (entry instanceof ModuleDependency) {\n        slot.request = entry.request;\n      } // TODO webpack 5: merge modules instead when multiple entry modules are supported\n\n\n      var idx = this._preparedEntrypoints.findIndex(function (slot) {\n        return slot.name === name;\n      });\n\n      if (idx >= 0) {\n        // Overwrite existing entrypoint\n        this._preparedEntrypoints[idx] = slot;\n      } else {\n        this._preparedEntrypoints.push(slot);\n      }\n\n      this._addModuleChain(context, entry, function (module) {\n        _this7.entries.push(module);\n      }, function (err, module) {\n        if (err) {\n          _this7.hooks.failedEntry.call(entry, name, err);\n\n          return callback(err);\n        }\n\n        if (module) {\n          slot.module = module;\n        } else {\n          var _idx = _this7._preparedEntrypoints.indexOf(slot);\n\n          if (_idx >= 0) {\n            _this7._preparedEntrypoints.splice(_idx, 1);\n          }\n        }\n\n        _this7.hooks.succeedEntry.call(entry, name, module);\n\n        return callback(null, module);\n      });\n    }\n    /**\n     * @param {string} context context path string\n     * @param {Dependency} dependency dep used to create module\n     * @param {ModuleCallback} callback module callback sending module up a level\n     * @returns {void}\n     */\n\n  }, {\n    key: \"prefetch\",\n    value: function prefetch(context, dependency, callback) {\n      this._addModuleChain(context, dependency, function (module) {\n        module.prefetched = true;\n      }, callback);\n    }\n    /**\n     * @param {Module} module module to be rebuilt\n     * @param {Callback} thisCallback callback when module finishes rebuilding\n     * @returns {void}\n     */\n\n  }, {\n    key: \"rebuildModule\",\n    value: function rebuildModule(module, thisCallback) {\n      var _this8 = this;\n\n      var callbackList = this._rebuildingModules.get(module);\n\n      if (callbackList) {\n        callbackList.push(thisCallback);\n        return;\n      }\n\n      this._rebuildingModules.set(module, callbackList = [thisCallback]);\n\n      var callback = function callback(err) {\n        _this8._rebuildingModules[\"delete\"](module);\n\n        var _iterator7 = _createForOfIteratorHelper(callbackList),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var cb = _step7.value;\n            cb(err);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      };\n\n      this.hooks.rebuildModule.call(module);\n      var oldDependencies = module.dependencies.slice();\n      var oldVariables = module.variables.slice();\n      var oldBlocks = module.blocks.slice();\n      module.unbuild();\n      this.buildModule(module, false, module, null, function (err) {\n        if (err) {\n          _this8.hooks.finishRebuildingModule.call(module);\n\n          return callback(err);\n        }\n\n        _this8.processModuleDependencies(module, function (err) {\n          if (err) return callback(err);\n\n          _this8.removeReasonsOfDependencyBlock(module, {\n            dependencies: oldDependencies,\n            variables: oldVariables,\n            blocks: oldBlocks\n          });\n\n          _this8.hooks.finishRebuildingModule.call(module);\n\n          callback();\n        });\n      });\n    }\n  }, {\n    key: \"finish\",\n    value: function finish(callback) {\n      var _this9 = this;\n\n      var modules = this.modules;\n      this.hooks.finishModules.callAsync(modules, function (err) {\n        if (err) return callback(err);\n\n        for (var index = 0; index < modules.length; index++) {\n          var _module = modules[index];\n\n          _this9.reportDependencyErrorsAndWarnings(_module, [_module]);\n        }\n\n        callback();\n      });\n    }\n  }, {\n    key: \"unseal\",\n    value: function unseal() {\n      this.hooks.unseal.call();\n      this.chunks.length = 0;\n      this.chunkGroups.length = 0;\n      this.namedChunks.clear();\n      this.namedChunkGroups.clear();\n      this.additionalChunkAssets.length = 0;\n      this.assets = {};\n      this.assetsInfo.clear();\n\n      var _iterator8 = _createForOfIteratorHelper(this.modules),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _module2 = _step8.value;\n\n          _module2.unseal();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n    /**\n     * @param {Callback} callback signals when the seal method is finishes\n     * @returns {void}\n     */\n\n  }, {\n    key: \"seal\",\n    value: function seal(callback) {\n      var _this10 = this;\n\n      this.hooks.seal.call();\n\n      while (this.hooks.optimizeDependenciesBasic.call(this.modules) || this.hooks.optimizeDependencies.call(this.modules) || this.hooks.optimizeDependenciesAdvanced.call(this.modules)) {\n        /* empty */\n      }\n\n      this.hooks.afterOptimizeDependencies.call(this.modules);\n      this.hooks.beforeChunks.call();\n\n      var _iterator9 = _createForOfIteratorHelper(this._preparedEntrypoints),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var preparedEntrypoint = _step9.value;\n          var _module3 = preparedEntrypoint.module;\n          var name = preparedEntrypoint.name;\n          var chunk = this.addChunk(name);\n          var entrypoint = new Entrypoint(name);\n          entrypoint.setRuntimeChunk(chunk);\n          entrypoint.addOrigin(null, name, preparedEntrypoint.request);\n          this.namedChunkGroups.set(name, entrypoint);\n          this.entrypoints.set(name, entrypoint);\n          this.chunkGroups.push(entrypoint);\n          GraphHelpers.connectChunkGroupAndChunk(entrypoint, chunk);\n          GraphHelpers.connectChunkAndModule(chunk, _module3);\n          chunk.entryModule = _module3;\n          chunk.name = name;\n          this.assignDepth(_module3);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      buildChunkGraph(this,\n      /** @type {Entrypoint[]} */\n      this.chunkGroups.slice());\n      this.sortModules(this.modules);\n      this.hooks.afterChunks.call(this.chunks);\n      this.hooks.optimize.call();\n\n      while (this.hooks.optimizeModulesBasic.call(this.modules) || this.hooks.optimizeModules.call(this.modules) || this.hooks.optimizeModulesAdvanced.call(this.modules)) {\n        /* empty */\n      }\n\n      this.hooks.afterOptimizeModules.call(this.modules);\n\n      while (this.hooks.optimizeChunksBasic.call(this.chunks, this.chunkGroups) || this.hooks.optimizeChunks.call(this.chunks, this.chunkGroups) || this.hooks.optimizeChunksAdvanced.call(this.chunks, this.chunkGroups)) {\n        /* empty */\n      }\n\n      this.hooks.afterOptimizeChunks.call(this.chunks, this.chunkGroups);\n      this.hooks.optimizeTree.callAsync(this.chunks, this.modules, function (err) {\n        if (err) {\n          return callback(err);\n        }\n\n        _this10.hooks.afterOptimizeTree.call(_this10.chunks, _this10.modules);\n\n        while (_this10.hooks.optimizeChunkModulesBasic.call(_this10.chunks, _this10.modules) || _this10.hooks.optimizeChunkModules.call(_this10.chunks, _this10.modules) || _this10.hooks.optimizeChunkModulesAdvanced.call(_this10.chunks, _this10.modules)) {\n          /* empty */\n        }\n\n        _this10.hooks.afterOptimizeChunkModules.call(_this10.chunks, _this10.modules);\n\n        var shouldRecord = _this10.hooks.shouldRecord.call() !== false;\n\n        _this10.hooks.reviveModules.call(_this10.modules, _this10.records);\n\n        _this10.hooks.optimizeModuleOrder.call(_this10.modules);\n\n        _this10.hooks.advancedOptimizeModuleOrder.call(_this10.modules);\n\n        _this10.hooks.beforeModuleIds.call(_this10.modules);\n\n        _this10.hooks.moduleIds.call(_this10.modules);\n\n        _this10.applyModuleIds();\n\n        _this10.hooks.optimizeModuleIds.call(_this10.modules);\n\n        _this10.hooks.afterOptimizeModuleIds.call(_this10.modules);\n\n        _this10.sortItemsWithModuleIds();\n\n        _this10.hooks.reviveChunks.call(_this10.chunks, _this10.records);\n\n        _this10.hooks.optimizeChunkOrder.call(_this10.chunks);\n\n        _this10.hooks.beforeChunkIds.call(_this10.chunks);\n\n        _this10.applyChunkIds();\n\n        _this10.hooks.optimizeChunkIds.call(_this10.chunks);\n\n        _this10.hooks.afterOptimizeChunkIds.call(_this10.chunks);\n\n        _this10.sortItemsWithChunkIds();\n\n        if (shouldRecord) {\n          _this10.hooks.recordModules.call(_this10.modules, _this10.records);\n\n          _this10.hooks.recordChunks.call(_this10.chunks, _this10.records);\n        }\n\n        _this10.hooks.beforeHash.call();\n\n        _this10.createHash();\n\n        _this10.hooks.afterHash.call();\n\n        if (shouldRecord) {\n          _this10.hooks.recordHash.call(_this10.records);\n        }\n\n        _this10.hooks.beforeModuleAssets.call();\n\n        _this10.createModuleAssets();\n\n        if (_this10.hooks.shouldGenerateChunkAssets.call() !== false) {\n          _this10.hooks.beforeChunkAssets.call();\n\n          _this10.createChunkAssets();\n        }\n\n        _this10.hooks.additionalChunkAssets.call(_this10.chunks);\n\n        _this10.summarizeDependencies();\n\n        if (shouldRecord) {\n          _this10.hooks.record.call(_this10, _this10.records);\n        }\n\n        _this10.hooks.additionalAssets.callAsync(function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          _this10.hooks.optimizeChunkAssets.callAsync(_this10.chunks, function (err) {\n            if (err) {\n              return callback(err);\n            }\n\n            _this10.hooks.afterOptimizeChunkAssets.call(_this10.chunks);\n\n            _this10.hooks.optimizeAssets.callAsync(_this10.assets, function (err) {\n              if (err) {\n                return callback(err);\n              }\n\n              _this10.hooks.afterOptimizeAssets.call(_this10.assets);\n\n              if (_this10.hooks.needAdditionalSeal.call()) {\n                _this10.unseal();\n\n                return _this10.seal(callback);\n              }\n\n              return _this10.hooks.afterSeal.callAsync(callback);\n            });\n          });\n        });\n      });\n    }\n    /**\n     * @param {Module[]} modules the modules array on compilation to perform the sort for\n     * @returns {void}\n     */\n\n  }, {\n    key: \"sortModules\",\n    value: function sortModules(modules) {\n      // TODO webpack 5: this should only be enabled when `moduleIds: \"natural\"`\n      // TODO move it into a plugin (NaturalModuleIdsPlugin) and use this in WebpackOptionsApply\n      // TODO remove this method\n      modules.sort(byIndexOrIdentifier);\n    }\n    /**\n     * @param {Module} module moulde to report from\n     * @param {DependenciesBlock[]} blocks blocks to report from\n     * @returns {void}\n     */\n\n  }, {\n    key: \"reportDependencyErrorsAndWarnings\",\n    value: function reportDependencyErrorsAndWarnings(module, blocks) {\n      for (var indexBlock = 0; indexBlock < blocks.length; indexBlock++) {\n        var block = blocks[indexBlock];\n        var dependencies = block.dependencies;\n\n        for (var indexDep = 0; indexDep < dependencies.length; indexDep++) {\n          var d = dependencies[indexDep];\n          var warnings = d.getWarnings();\n\n          if (warnings) {\n            for (var indexWar = 0; indexWar < warnings.length; indexWar++) {\n              var w = warnings[indexWar];\n              var warning = new ModuleDependencyWarning(module, w, d.loc);\n              this.warnings.push(warning);\n            }\n          }\n\n          var errors = d.getErrors();\n\n          if (errors) {\n            for (var indexErr = 0; indexErr < errors.length; indexErr++) {\n              var e = errors[indexErr];\n              var error = new ModuleDependencyError(module, e, d.loc);\n              this.errors.push(error);\n            }\n          }\n        }\n\n        this.reportDependencyErrorsAndWarnings(module, block.blocks);\n      }\n    }\n    /**\n     * @param {TODO} groupOptions options for the chunk group\n     * @param {Module} module the module the references the chunk group\n     * @param {DependencyLocation} loc the location from with the chunk group is referenced (inside of module)\n     * @param {string} request the request from which the the chunk group is referenced\n     * @returns {ChunkGroup} the new or existing chunk group\n     */\n\n  }, {\n    key: \"addChunkInGroup\",\n    value: function addChunkInGroup(groupOptions, module, loc, request) {\n      if (typeof groupOptions === \"string\") {\n        groupOptions = {\n          name: groupOptions\n        };\n      }\n\n      var name = groupOptions.name;\n\n      if (name) {\n        var _chunkGroup = this.namedChunkGroups.get(name);\n\n        if (_chunkGroup !== undefined) {\n          _chunkGroup.addOptions(groupOptions);\n\n          if (module) {\n            _chunkGroup.addOrigin(module, loc, request);\n          }\n\n          return _chunkGroup;\n        }\n      }\n\n      var chunkGroup = new ChunkGroup(groupOptions);\n      if (module) chunkGroup.addOrigin(module, loc, request);\n      var chunk = this.addChunk(name);\n      GraphHelpers.connectChunkGroupAndChunk(chunkGroup, chunk);\n      this.chunkGroups.push(chunkGroup);\n\n      if (name) {\n        this.namedChunkGroups.set(name, chunkGroup);\n      }\n\n      return chunkGroup;\n    }\n    /**\n     * This method first looks to see if a name is provided for a new chunk,\n     * and first looks to see if any named chunks already exist and reuse that chunk instead.\n     *\n     * @param {string=} name optional chunk name to be provided\n     * @returns {Chunk} create a chunk (invoked during seal event)\n     */\n\n  }, {\n    key: \"addChunk\",\n    value: function addChunk(name) {\n      if (name) {\n        var _chunk = this.namedChunks.get(name);\n\n        if (_chunk !== undefined) {\n          return _chunk;\n        }\n      }\n\n      var chunk = new Chunk(name);\n      this.chunks.push(chunk);\n\n      if (name) {\n        this.namedChunks.set(name, chunk);\n      }\n\n      return chunk;\n    }\n    /**\n     * @param {Module} module module to assign depth\n     * @returns {void}\n     */\n\n  }, {\n    key: \"assignDepth\",\n    value: function assignDepth(module) {\n      var queue = new Set([module]);\n      var depth;\n      module.depth = 0;\n      /**\n       * @param {Module} module module for processeing\n       * @returns {void}\n       */\n\n      var enqueueJob = function enqueueJob(module) {\n        var d = module.depth;\n        if (typeof d === \"number\" && d <= depth) return;\n        queue.add(module);\n        module.depth = depth;\n      };\n      /**\n       * @param {Dependency} dependency dependency to assign depth to\n       * @returns {void}\n       */\n\n\n      var assignDepthToDependency = function assignDepthToDependency(dependency) {\n        if (dependency.module) {\n          enqueueJob(dependency.module);\n        }\n      };\n      /**\n       * @param {DependenciesBlock} block block to assign depth to\n       * @returns {void}\n       */\n\n\n      var assignDepthToDependencyBlock = function assignDepthToDependencyBlock(block) {\n        if (block.variables) {\n          iterationBlockVariable(block.variables, assignDepthToDependency);\n        }\n\n        if (block.dependencies) {\n          iterationOfArrayCallback(block.dependencies, assignDepthToDependency);\n        }\n\n        if (block.blocks) {\n          iterationOfArrayCallback(block.blocks, assignDepthToDependencyBlock);\n        }\n      };\n\n      var _iterator10 = _createForOfIteratorHelper(queue),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          module = _step10.value;\n          queue[\"delete\"](module);\n          depth = module.depth;\n          depth++;\n          assignDepthToDependencyBlock(module);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n    /**\n     * @param {Module} module the module containing the dependency\n     * @param {Dependency} dependency the dependency\n     * @returns {DependencyReference} a reference for the dependency\n     */\n\n  }, {\n    key: \"getDependencyReference\",\n    value: function getDependencyReference(module, dependency) {\n      // TODO remove dep.getReference existence check in webpack 5\n      if (typeof dependency.getReference !== \"function\") return null;\n      var ref = dependency.getReference();\n      if (!ref) return null;\n      return this.hooks.dependencyReference.call(ref, dependency, module);\n    }\n    /**\n     *\n     * @param {Module} module module relationship for removal\n     * @param {DependenciesBlockLike} block //TODO: good description\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeReasonsOfDependencyBlock\",\n    value: function removeReasonsOfDependencyBlock(module, block) {\n      var _this11 = this;\n\n      var iteratorDependency = function iteratorDependency(d) {\n        if (!d.module) {\n          return;\n        }\n\n        if (d.module.removeReason(module, d)) {\n          var _iterator11 = _createForOfIteratorHelper(d.module.chunksIterable),\n              _step11;\n\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var chunk = _step11.value;\n\n              _this11.patchChunksAfterReasonRemoval(d.module, chunk);\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n        }\n      };\n\n      if (block.blocks) {\n        iterationOfArrayCallback(block.blocks, function (block) {\n          return _this11.removeReasonsOfDependencyBlock(module, block);\n        });\n      }\n\n      if (block.dependencies) {\n        iterationOfArrayCallback(block.dependencies, iteratorDependency);\n      }\n\n      if (block.variables) {\n        iterationBlockVariable(block.variables, iteratorDependency);\n      }\n    }\n    /**\n     * @param {Module} module module to patch tie\n     * @param {Chunk} chunk chunk to patch tie\n     * @returns {void}\n     */\n\n  }, {\n    key: \"patchChunksAfterReasonRemoval\",\n    value: function patchChunksAfterReasonRemoval(module, chunk) {\n      if (!module.hasReasons()) {\n        this.removeReasonsOfDependencyBlock(module, module);\n      }\n\n      if (!module.hasReasonForChunk(chunk)) {\n        if (module.removeChunk(chunk)) {\n          this.removeChunkFromDependencies(module, chunk);\n        }\n      }\n    }\n    /**\n     *\n     * @param {DependenciesBlock} block block tie for Chunk\n     * @param {Chunk} chunk chunk to remove from dep\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeChunkFromDependencies\",\n    value: function removeChunkFromDependencies(block, chunk) {\n      var _this12 = this;\n\n      var iteratorDependency = function iteratorDependency(d) {\n        if (!d.module) {\n          return;\n        }\n\n        _this12.patchChunksAfterReasonRemoval(d.module, chunk);\n      };\n\n      var blocks = block.blocks;\n\n      for (var indexBlock = 0; indexBlock < blocks.length; indexBlock++) {\n        var asyncBlock = blocks[indexBlock]; // Grab all chunks from the first Block's AsyncDepBlock\n\n        var chunks = asyncBlock.chunkGroup.chunks; // For each chunk in chunkGroup\n\n        for (var indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n          var iteratedChunk = chunks[indexChunk];\n          asyncBlock.chunkGroup.removeChunk(iteratedChunk);\n          asyncBlock.chunkGroup.removeParent(iteratedChunk); // Recurse\n\n          this.removeChunkFromDependencies(block, iteratedChunk);\n        }\n      }\n\n      if (block.dependencies) {\n        iterationOfArrayCallback(block.dependencies, iteratorDependency);\n      }\n\n      if (block.variables) {\n        iterationBlockVariable(block.variables, iteratorDependency);\n      }\n    }\n  }, {\n    key: \"applyModuleIds\",\n    value: function applyModuleIds() {\n      var unusedIds = [];\n      var nextFreeModuleId = 0;\n      var usedIds = new Set();\n\n      if (this.usedModuleIds) {\n        var _iterator12 = _createForOfIteratorHelper(this.usedModuleIds),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var id = _step12.value;\n            usedIds.add(id);\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n      }\n\n      var modules1 = this.modules;\n\n      for (var indexModule1 = 0; indexModule1 < modules1.length; indexModule1++) {\n        var module1 = modules1[indexModule1];\n\n        if (module1.id !== null) {\n          usedIds.add(module1.id);\n        }\n      }\n\n      if (usedIds.size > 0) {\n        var usedIdMax = -1;\n\n        var _iterator13 = _createForOfIteratorHelper(usedIds),\n            _step13;\n\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var usedIdKey = _step13.value;\n\n            if (typeof usedIdKey !== \"number\") {\n              continue;\n            }\n\n            usedIdMax = Math.max(usedIdMax, usedIdKey);\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n\n        var lengthFreeModules = nextFreeModuleId = usedIdMax + 1;\n\n        while (lengthFreeModules--) {\n          if (!usedIds.has(lengthFreeModules)) {\n            unusedIds.push(lengthFreeModules);\n          }\n        }\n      }\n\n      var modules2 = this.modules;\n\n      for (var indexModule2 = 0; indexModule2 < modules2.length; indexModule2++) {\n        var module2 = modules2[indexModule2];\n\n        if (module2.id === null) {\n          if (unusedIds.length > 0) {\n            module2.id = unusedIds.pop();\n          } else {\n            module2.id = nextFreeModuleId++;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"applyChunkIds\",\n    value: function applyChunkIds() {\n      /** @type {Set<number>} */\n      var usedIds = new Set(); // Get used ids from usedChunkIds property (i. e. from records)\n\n      if (this.usedChunkIds) {\n        var _iterator14 = _createForOfIteratorHelper(this.usedChunkIds),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var id = _step14.value;\n\n            if (typeof id !== \"number\") {\n              continue;\n            }\n\n            usedIds.add(id);\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n      } // Get used ids from existing chunks\n\n\n      var chunks = this.chunks;\n\n      for (var indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n        var chunk = chunks[indexChunk];\n        var usedIdValue = chunk.id;\n\n        if (typeof usedIdValue !== \"number\") {\n          continue;\n        }\n\n        usedIds.add(usedIdValue);\n      } // Calculate maximum assigned chunk id\n\n\n      var nextFreeChunkId = -1;\n\n      var _iterator15 = _createForOfIteratorHelper(usedIds),\n          _step15;\n\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _id = _step15.value;\n          nextFreeChunkId = Math.max(nextFreeChunkId, _id);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n\n      nextFreeChunkId++; // Determine free chunk ids from 0 to maximum\n\n      /** @type {number[]} */\n\n      var unusedIds = [];\n\n      if (nextFreeChunkId > 0) {\n        var index = nextFreeChunkId;\n\n        while (index--) {\n          if (!usedIds.has(index)) {\n            unusedIds.push(index);\n          }\n        }\n      } // Assign ids to chunk which has no id\n\n\n      for (var _indexChunk = 0; _indexChunk < chunks.length; _indexChunk++) {\n        var _chunk2 = chunks[_indexChunk];\n\n        if (_chunk2.id === null) {\n          if (unusedIds.length > 0) {\n            _chunk2.id = unusedIds.pop();\n          } else {\n            _chunk2.id = nextFreeChunkId++;\n          }\n        }\n\n        if (!_chunk2.ids) {\n          _chunk2.ids = [_chunk2.id];\n        }\n      }\n    }\n  }, {\n    key: \"sortItemsWithModuleIds\",\n    value: function sortItemsWithModuleIds() {\n      this.modules.sort(byIdOrIdentifier);\n      var modules = this.modules;\n\n      for (var indexModule = 0; indexModule < modules.length; indexModule++) {\n        modules[indexModule].sortItems(false);\n      }\n\n      var chunks = this.chunks;\n\n      for (var indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n        chunks[indexChunk].sortItems();\n      }\n\n      chunks.sort(function (a, b) {\n        return a.compareTo(b);\n      });\n    }\n  }, {\n    key: \"sortItemsWithChunkIds\",\n    value: function sortItemsWithChunkIds() {\n      var _iterator16 = _createForOfIteratorHelper(this.chunkGroups),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var chunkGroup = _step16.value;\n          chunkGroup.sortItems();\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      this.chunks.sort(byId);\n\n      for (var indexModule = 0; indexModule < this.modules.length; indexModule++) {\n        this.modules[indexModule].sortItems(true);\n      }\n\n      var chunks = this.chunks;\n\n      for (var indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n        chunks[indexChunk].sortItems();\n      }\n      /**\n       * Used to sort errors and warnings in compilation. this.warnings, and\n       * this.errors contribute to the compilation hash and therefore should be\n       * updated whenever other references (having a chunk id) are sorted. This preserves the hash\n       * integrity\n       *\n       * @param {WebpackError} a first WebpackError instance (including subclasses)\n       * @param {WebpackError} b second WebpackError instance (including subclasses)\n       * @returns {-1|0|1} sort order index\n       */\n\n\n      var byMessage = function byMessage(a, b) {\n        var ma = \"\".concat(a.message);\n        var mb = \"\".concat(b.message);\n        if (ma < mb) return -1;\n        if (mb < ma) return 1;\n        return 0;\n      };\n\n      this.errors.sort(byMessage);\n      this.warnings.sort(byMessage);\n      this.children.sort(byNameOrHash);\n    }\n  }, {\n    key: \"summarizeDependencies\",\n    value: function summarizeDependencies() {\n      this.fileDependencies = new SortableSet(this.compilationDependencies);\n      this.contextDependencies = new SortableSet();\n      this.missingDependencies = new SortableSet();\n\n      for (var indexChildren = 0; indexChildren < this.children.length; indexChildren++) {\n        var child = this.children[indexChildren];\n        addAllToSet(this.fileDependencies, child.fileDependencies);\n        addAllToSet(this.contextDependencies, child.contextDependencies);\n        addAllToSet(this.missingDependencies, child.missingDependencies);\n      }\n\n      for (var indexModule = 0; indexModule < this.modules.length; indexModule++) {\n        var _module4 = this.modules[indexModule];\n\n        if (_module4.buildInfo.fileDependencies) {\n          addAllToSet(this.fileDependencies, _module4.buildInfo.fileDependencies);\n        }\n\n        if (_module4.buildInfo.contextDependencies) {\n          addAllToSet(this.contextDependencies, _module4.buildInfo.contextDependencies);\n        }\n      }\n\n      var _iterator17 = _createForOfIteratorHelper(this.errors),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var error = _step17.value;\n\n          if (_typeof(error.missing) === \"object\" && error.missing && error.missing[Symbol.iterator]) {\n            addAllToSet(this.missingDependencies, error.missing);\n          }\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      this.fileDependencies.sort();\n      this.contextDependencies.sort();\n      this.missingDependencies.sort();\n    }\n  }, {\n    key: \"createHash\",\n    value: function createHash() {\n      var outputOptions = this.outputOptions;\n      var hashFunction = outputOptions.hashFunction;\n      var hashDigest = outputOptions.hashDigest;\n      var hashDigestLength = outputOptions.hashDigestLength;\n\n      var hash = _createHash(hashFunction);\n\n      if (outputOptions.hashSalt) {\n        hash.update(outputOptions.hashSalt);\n      }\n\n      this.mainTemplate.updateHash(hash);\n      this.chunkTemplate.updateHash(hash);\n\n      var _iterator18 = _createForOfIteratorHelper(Object.keys(this.moduleTemplates).sort()),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var key = _step18.value;\n          this.moduleTemplates[key].updateHash(hash);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n\n      var _iterator19 = _createForOfIteratorHelper(this.children),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var child = _step19.value;\n          hash.update(child.hash);\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      var _iterator20 = _createForOfIteratorHelper(this.warnings),\n          _step20;\n\n      try {\n        for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n          var warning = _step20.value;\n          hash.update(\"\".concat(warning.message));\n        }\n      } catch (err) {\n        _iterator20.e(err);\n      } finally {\n        _iterator20.f();\n      }\n\n      var _iterator21 = _createForOfIteratorHelper(this.errors),\n          _step21;\n\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var error = _step21.value;\n          hash.update(\"\".concat(error.message));\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n\n      var modules = this.modules;\n\n      for (var i = 0; i < modules.length; i++) {\n        var _module5 = modules[i];\n\n        var moduleHash = _createHash(hashFunction);\n\n        _module5.updateHash(moduleHash);\n\n        _module5.hash =\n        /** @type {string} */\n        moduleHash.digest(hashDigest);\n        _module5.renderedHash = _module5.hash.substr(0, hashDigestLength);\n      } // clone needed as sort below is inplace mutation\n\n\n      var chunks = this.chunks.slice();\n      /**\n       * sort here will bring all \"falsy\" values to the beginning\n       * this is needed as the \"hasRuntime()\" chunks are dependent on the\n       * hashes of the non-runtime chunks.\n       */\n\n      chunks.sort(function (a, b) {\n        var aEntry = a.hasRuntime();\n        var bEntry = b.hasRuntime();\n        if (aEntry && !bEntry) return 1;\n        if (!aEntry && bEntry) return -1;\n        return byId(a, b);\n      });\n\n      for (var _i = 0; _i < chunks.length; _i++) {\n        var chunk = chunks[_i];\n\n        var chunkHash = _createHash(hashFunction);\n\n        try {\n          if (outputOptions.hashSalt) {\n            chunkHash.update(outputOptions.hashSalt);\n          }\n\n          chunk.updateHash(chunkHash);\n          var template = chunk.hasRuntime() ? this.mainTemplate : this.chunkTemplate;\n          template.updateHashForChunk(chunkHash, chunk, this.moduleTemplates.javascript, this.dependencyTemplates);\n          this.hooks.chunkHash.call(chunk, chunkHash);\n          chunk.hash =\n          /** @type {string} */\n          chunkHash.digest(hashDigest);\n          hash.update(chunk.hash);\n          chunk.renderedHash = chunk.hash.substr(0, hashDigestLength);\n          this.hooks.contentHash.call(chunk);\n        } catch (err) {\n          this.errors.push(new ChunkRenderError(chunk, \"\", err));\n        }\n      }\n\n      this.fullHash =\n      /** @type {string} */\n      hash.digest(hashDigest);\n      this.hash = this.fullHash.substr(0, hashDigestLength);\n    }\n    /**\n     * @param {string} update extra information\n     * @returns {void}\n     */\n\n  }, {\n    key: \"modifyHash\",\n    value: function modifyHash(update) {\n      var outputOptions = this.outputOptions;\n      var hashFunction = outputOptions.hashFunction;\n      var hashDigest = outputOptions.hashDigest;\n      var hashDigestLength = outputOptions.hashDigestLength;\n\n      var hash = _createHash(hashFunction);\n\n      hash.update(this.fullHash);\n      hash.update(update);\n      this.fullHash =\n      /** @type {string} */\n      hash.digest(hashDigest);\n      this.hash = this.fullHash.substr(0, hashDigestLength);\n    }\n    /**\n     * @param {string} file file name\n     * @param {Source} source asset source\n     * @param {AssetInfo} assetInfo extra asset information\n     * @returns {void}\n     */\n\n  }, {\n    key: \"emitAsset\",\n    value: function emitAsset(file, source) {\n      var assetInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (this.assets[file]) {\n        if (!isSourceEqual(this.assets[file], source)) {\n          // TODO webpack 5: make this an error instead\n          this.warnings.push(new WebpackError(\"Conflict: Multiple assets emit different content to the same filename \".concat(file)));\n          this.assets[file] = source;\n          this.assetsInfo.set(file, assetInfo);\n          return;\n        }\n\n        var oldInfo = this.assetsInfo.get(file);\n        this.assetsInfo.set(file, Object.assign({}, oldInfo, assetInfo));\n        return;\n      }\n\n      this.assets[file] = source;\n      this.assetsInfo.set(file, assetInfo);\n    }\n    /**\n     * @param {string} file file name\n     * @param {Source | function(Source): Source} newSourceOrFunction new asset source or function converting old to new\n     * @param {AssetInfo | function(AssetInfo | undefined): AssetInfo} assetInfoUpdateOrFunction new asset info or function converting old to new\n     */\n\n  }, {\n    key: \"updateAsset\",\n    value: function updateAsset(file, newSourceOrFunction) {\n      var assetInfoUpdateOrFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n      if (!this.assets[file]) {\n        throw new Error(\"Called Compilation.updateAsset for not existing filename \".concat(file));\n      }\n\n      if (typeof newSourceOrFunction === \"function\") {\n        this.assets[file] = newSourceOrFunction(this.assets[file]);\n      } else {\n        this.assets[file] = newSourceOrFunction;\n      }\n\n      if (assetInfoUpdateOrFunction !== undefined) {\n        var oldInfo = this.assetsInfo.get(file);\n\n        if (typeof assetInfoUpdateOrFunction === \"function\") {\n          this.assetsInfo.set(file, assetInfoUpdateOrFunction(oldInfo || {}));\n        } else {\n          this.assetsInfo.set(file, Object.assign({}, oldInfo, assetInfoUpdateOrFunction));\n        }\n      }\n    }\n  }, {\n    key: \"getAssets\",\n    value: function getAssets() {\n      /** @type {Asset[]} */\n      var array = [];\n\n      for (var _i2 = 0, _Object$keys = Object.keys(this.assets); _i2 < _Object$keys.length; _i2++) {\n        var assetName = _Object$keys[_i2];\n\n        if (Object.prototype.hasOwnProperty.call(this.assets, assetName)) {\n          array.push({\n            name: assetName,\n            source: this.assets[assetName],\n            info: this.assetsInfo.get(assetName) || {}\n          });\n        }\n      }\n\n      return array;\n    }\n    /**\n     * @param {string} name the name of the asset\n     * @returns {Asset | undefined} the asset or undefined when not found\n     */\n\n  }, {\n    key: \"getAsset\",\n    value: function getAsset(name) {\n      if (!Object.prototype.hasOwnProperty.call(this.assets, name)) return undefined;\n      return {\n        name: name,\n        source: this.assets[name],\n        info: this.assetsInfo.get(name) || {}\n      };\n    }\n  }, {\n    key: \"createModuleAssets\",\n    value: function createModuleAssets() {\n      for (var i = 0; i < this.modules.length; i++) {\n        var _module6 = this.modules[i];\n\n        if (_module6.buildInfo.assets) {\n          var assetsInfo = _module6.buildInfo.assetsInfo;\n\n          for (var _i3 = 0, _Object$keys2 = Object.keys(_module6.buildInfo.assets); _i3 < _Object$keys2.length; _i3++) {\n            var assetName = _Object$keys2[_i3];\n            var fileName = this.getPath(assetName);\n            this.emitAsset(fileName, _module6.buildInfo.assets[assetName], assetsInfo ? assetsInfo.get(assetName) : undefined);\n            this.hooks.moduleAsset.call(_module6, fileName);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"createChunkAssets\",\n    value: function createChunkAssets() {\n      var outputOptions = this.outputOptions;\n      var cachedSourceMap = new Map();\n      /** @type {Map<string, {hash: string, source: Source, chunk: Chunk}>} */\n\n      var alreadyWrittenFiles = new Map();\n\n      for (var i = 0; i < this.chunks.length; i++) {\n        var chunk = this.chunks[i];\n        chunk.files = [];\n        var source = void 0;\n        var file = void 0;\n        var filenameTemplate = void 0;\n\n        try {\n          var template = chunk.hasRuntime() ? this.mainTemplate : this.chunkTemplate;\n          var manifest = template.getRenderManifest({\n            chunk: chunk,\n            hash: this.hash,\n            fullHash: this.fullHash,\n            outputOptions: outputOptions,\n            moduleTemplates: this.moduleTemplates,\n            dependencyTemplates: this.dependencyTemplates\n          }); // [{ render(), filenameTemplate, pathOptions, identifier, hash }]\n\n          var _iterator22 = _createForOfIteratorHelper(manifest),\n              _step22;\n\n          try {\n            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n              var fileManifest = _step22.value;\n              var cacheName = fileManifest.identifier;\n              var usedHash = fileManifest.hash;\n              filenameTemplate = fileManifest.filenameTemplate;\n              var pathAndInfo = this.getPathWithInfo(filenameTemplate, fileManifest.pathOptions);\n              file = pathAndInfo.path;\n              var assetInfo = pathAndInfo.info; // check if the same filename was already written by another chunk\n\n              var alreadyWritten = alreadyWrittenFiles.get(file);\n\n              if (alreadyWritten !== undefined) {\n                if (alreadyWritten.hash === usedHash) {\n                  if (this.cache) {\n                    this.cache[cacheName] = {\n                      hash: usedHash,\n                      source: alreadyWritten.source\n                    };\n                  }\n\n                  chunk.files.push(file);\n                  this.hooks.chunkAsset.call(chunk, file);\n                  continue;\n                } else {\n                  throw new Error(\"Conflict: Multiple chunks emit assets to the same filename \".concat(file) + \" (chunks \".concat(alreadyWritten.chunk.id, \" and \").concat(chunk.id, \")\"));\n                }\n              }\n\n              if (this.cache && this.cache[cacheName] && this.cache[cacheName].hash === usedHash) {\n                source = this.cache[cacheName].source;\n              } else {\n                source = fileManifest.render(); // Ensure that source is a cached source to avoid additional cost because of repeated access\n\n                if (!(source instanceof CachedSource)) {\n                  var cacheEntry = cachedSourceMap.get(source);\n\n                  if (cacheEntry) {\n                    source = cacheEntry;\n                  } else {\n                    var cachedSource = new CachedSource(source);\n                    cachedSourceMap.set(source, cachedSource);\n                    source = cachedSource;\n                  }\n                }\n\n                if (this.cache) {\n                  this.cache[cacheName] = {\n                    hash: usedHash,\n                    source: source\n                  };\n                }\n              }\n\n              this.emitAsset(file, source, assetInfo);\n              chunk.files.push(file);\n              this.hooks.chunkAsset.call(chunk, file);\n              alreadyWrittenFiles.set(file, {\n                hash: usedHash,\n                source: source,\n                chunk: chunk\n              });\n            }\n          } catch (err) {\n            _iterator22.e(err);\n          } finally {\n            _iterator22.f();\n          }\n        } catch (err) {\n          this.errors.push(new ChunkRenderError(chunk, file || filenameTemplate, err));\n        }\n      }\n    }\n    /**\n     * @param {string} filename used to get asset path with hash\n     * @param {TODO=} data // TODO: figure out this param type\n     * @returns {string} interpolated path\n     */\n\n  }, {\n    key: \"getPath\",\n    value: function getPath(filename, data) {\n      data = data || {};\n      data.hash = data.hash || this.hash;\n      return this.mainTemplate.getAssetPath(filename, data);\n    }\n    /**\n     * @param {string} filename used to get asset path with hash\n     * @param {TODO=} data // TODO: figure out this param type\n     * @returns {{ path: string, info: AssetInfo }} interpolated path and asset info\n     */\n\n  }, {\n    key: \"getPathWithInfo\",\n    value: function getPathWithInfo(filename, data) {\n      data = data || {};\n      data.hash = data.hash || this.hash;\n      return this.mainTemplate.getAssetPathWithInfo(filename, data);\n    }\n    /**\n     * This function allows you to run another instance of webpack inside of webpack however as\n     * a child with different settings and configurations (if desired) applied. It copies all hooks, plugins\n     * from parent (or top level compiler) and creates a child Compilation\n     *\n     * @param {string} name name of the child compiler\n     * @param {TODO} outputOptions // Need to convert config schema to types for this\n     * @param {Plugin[]} plugins webpack plugins that will be applied\n     * @returns {Compiler} creates a child Compiler instance\n     */\n\n  }, {\n    key: \"createChildCompiler\",\n    value: function createChildCompiler(name, outputOptions, plugins) {\n      var idx = this.childrenCounters[name] || 0;\n      this.childrenCounters[name] = idx + 1;\n      return this.compiler.createChildCompiler(this, name, idx, outputOptions, plugins);\n    }\n  }, {\n    key: \"checkConstraints\",\n    value: function checkConstraints() {\n      /** @type {Set<number|string>} */\n      var usedIds = new Set();\n      var modules = this.modules;\n\n      for (var indexModule = 0; indexModule < modules.length; indexModule++) {\n        var moduleId = modules[indexModule].id;\n        if (moduleId === null) continue;\n\n        if (usedIds.has(moduleId)) {\n          throw new Error(\"checkConstraints: duplicate module id \".concat(moduleId));\n        }\n\n        usedIds.add(moduleId);\n      }\n\n      var chunks = this.chunks;\n\n      for (var indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n        var chunk = chunks[indexChunk];\n\n        if (chunks.indexOf(chunk) !== indexChunk) {\n          throw new Error(\"checkConstraints: duplicate chunk in compilation \".concat(chunk.debugId));\n        }\n      }\n\n      var _iterator23 = _createForOfIteratorHelper(this.chunkGroups),\n          _step23;\n\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n          var chunkGroup = _step23.value;\n          chunkGroup.checkConstraints();\n        }\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n    }\n  }]);\n\n  return Compilation;\n}(Tapable); // TODO remove in webpack 5\n\n\nCompilation.prototype.applyPlugins = util.deprecate(\n/**\n * @deprecated\n * @param {string} name Name\n * @param {any[]} args Other arguments\n * @returns {void}\n * @this {Compilation}\n */\nfunction (name) {\n  var _this$hooks$name$repl;\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  (_this$hooks$name$repl = this.hooks[name.replace(/[- ]([a-z])/g, function (match) {\n    return match[1].toUpperCase();\n  })]).call.apply(_this$hooks$name$repl, args);\n}, \"Compilation.applyPlugins is deprecated. Use new API on `.hooks` instead\"); // TODO remove in webpack 5\n\nObject.defineProperty(Compilation.prototype, \"moduleTemplate\", {\n  configurable: false,\n  get: util.deprecate(\n  /**\n   * @deprecated\n   * @this {Compilation}\n   * @returns {TODO} module template\n   */\n  function () {\n    return this.moduleTemplates.javascript;\n  }, \"Compilation.moduleTemplate: Use Compilation.moduleTemplates.javascript instead\"),\n  set: util.deprecate(\n  /**\n   * @deprecated\n   * @param {ModuleTemplate} value Template value\n   * @this {Compilation}\n   * @returns {void}\n   */\n  function (value) {\n    this.moduleTemplates.javascript = value;\n  }, \"Compilation.moduleTemplate: Use Compilation.moduleTemplates.javascript instead.\")\n});\nmodule.exports = Compilation;","map":null,"metadata":{},"sourceType":"module"}