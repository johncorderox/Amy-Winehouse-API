{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Template = require(\"./Template\");\n/** @typedef {import(\"./Module\")} Module */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  function RuntimeTemplate(outputOptions, requestShortener) {\n    _classCallCheck(this, RuntimeTemplate);\n\n    this.outputOptions = outputOptions || {};\n    this.requestShortener = requestShortener;\n  }\n  /**\n   * Add a comment\n   * @param {object} options Information content of the comment\n   * @param {string=} options.request request string used originally\n   * @param {string=} options.chunkName name of the chunk referenced\n   * @param {string=} options.chunkReason reason information of the chunk\n   * @param {string=} options.message additional message\n   * @param {string=} options.exportName name of the export\n   * @returns {string} comment\n   */\n\n\n  _createClass(RuntimeTemplate, [{\n    key: \"comment\",\n    value: function comment(_ref) {\n      var _this = this;\n\n      var request = _ref.request,\n          chunkName = _ref.chunkName,\n          chunkReason = _ref.chunkReason,\n          message = _ref.message,\n          exportName = _ref.exportName;\n      var content;\n\n      if (this.outputOptions.pathinfo) {\n        content = [message, request, chunkName, chunkReason].filter(Boolean).map(function (item) {\n          return _this.requestShortener.shorten(item);\n        }).join(\" | \");\n      } else {\n        content = [message, chunkName, chunkReason].filter(Boolean).map(function (item) {\n          return _this.requestShortener.shorten(item);\n        }).join(\" | \");\n      }\n\n      if (!content) return \"\";\n\n      if (this.outputOptions.pathinfo) {\n        return Template.toComment(content) + \" \";\n      } else {\n        return Template.toNormalComment(content) + \" \";\n      }\n    }\n  }, {\n    key: \"throwMissingModuleErrorFunction\",\n    value: function throwMissingModuleErrorFunction(_ref2) {\n      var request = _ref2.request;\n      var err = \"Cannot find module '\".concat(request, \"'\");\n      return \"function webpackMissingModule() { var e = new Error(\".concat(JSON.stringify(err), \"); e.code = 'MODULE_NOT_FOUND'; throw e; }\");\n    }\n  }, {\n    key: \"missingModule\",\n    value: function missingModule(_ref3) {\n      var request = _ref3.request;\n      return \"!(\".concat(this.throwMissingModuleErrorFunction({\n        request: request\n      }), \"())\");\n    }\n  }, {\n    key: \"missingModuleStatement\",\n    value: function missingModuleStatement(_ref4) {\n      var request = _ref4.request;\n      return \"\".concat(this.missingModule({\n        request: request\n      }), \";\\n\");\n    }\n  }, {\n    key: \"missingModulePromise\",\n    value: function missingModulePromise(_ref5) {\n      var request = _ref5.request;\n      return \"Promise.resolve().then(\".concat(this.throwMissingModuleErrorFunction({\n        request: request\n      }), \")\");\n    }\n  }, {\n    key: \"moduleId\",\n    value: function moduleId(_ref6) {\n      var module = _ref6.module,\n          request = _ref6.request;\n\n      if (!module) {\n        return this.missingModule({\n          request: request\n        });\n      }\n\n      if (module.id === null) {\n        throw new Error(\"RuntimeTemplate.moduleId(): Module \".concat(module.identifier(), \" has no id. This should not happen.\"));\n      }\n\n      return \"\".concat(this.comment({\n        request: request\n      })).concat(JSON.stringify(module.id));\n    }\n  }, {\n    key: \"moduleRaw\",\n    value: function moduleRaw(_ref7) {\n      var module = _ref7.module,\n          request = _ref7.request;\n\n      if (!module) {\n        return this.missingModule({\n          request: request\n        });\n      }\n\n      return \"__webpack_require__(\".concat(this.moduleId({\n        module: module,\n        request: request\n      }), \")\");\n    }\n  }, {\n    key: \"moduleExports\",\n    value: function moduleExports(_ref8) {\n      var module = _ref8.module,\n          request = _ref8.request;\n      return this.moduleRaw({\n        module: module,\n        request: request\n      });\n    }\n  }, {\n    key: \"moduleNamespace\",\n    value: function moduleNamespace(_ref9) {\n      var module = _ref9.module,\n          request = _ref9.request,\n          strict = _ref9.strict;\n\n      if (!module) {\n        return this.missingModule({\n          request: request\n        });\n      }\n\n      var moduleId = this.moduleId({\n        module: module,\n        request: request\n      });\n      var exportsType = module.buildMeta && module.buildMeta.exportsType;\n\n      if (exportsType === \"namespace\") {\n        var rawModule = this.moduleRaw({\n          module: module,\n          request: request\n        });\n        return rawModule;\n      } else if (exportsType === \"named\") {\n        return \"__webpack_require__.t(\".concat(moduleId, \", 3)\");\n      } else if (strict) {\n        return \"__webpack_require__.t(\".concat(moduleId, \", 1)\");\n      } else {\n        return \"__webpack_require__.t(\".concat(moduleId, \", 7)\");\n      }\n    }\n  }, {\n    key: \"moduleNamespacePromise\",\n    value: function moduleNamespacePromise(_ref10) {\n      var block = _ref10.block,\n          module = _ref10.module,\n          request = _ref10.request,\n          message = _ref10.message,\n          strict = _ref10.strict,\n          weak = _ref10.weak;\n\n      if (!module) {\n        return this.missingModulePromise({\n          request: request\n        });\n      }\n\n      if (module.id === null) {\n        throw new Error(\"RuntimeTemplate.moduleNamespacePromise(): Module \".concat(module.identifier(), \" has no id. This should not happen.\"));\n      }\n\n      var promise = this.blockPromise({\n        block: block,\n        message: message\n      });\n      var getModuleFunction;\n      var idExpr = JSON.stringify(module.id);\n      var comment = this.comment({\n        request: request\n      });\n      var header = \"\";\n\n      if (weak) {\n        if (idExpr.length > 8) {\n          // 'var x=\"nnnnnn\";x,\"+x+\",x' vs '\"nnnnnn\",nnnnnn,\"nnnnnn\"'\n          header += \"var id = \".concat(idExpr, \"; \");\n          idExpr = \"id\";\n        }\n\n        header += \"if(!__webpack_require__.m[\".concat(idExpr, \"]) { var e = new Error(\\\"Module '\\\" + \").concat(idExpr, \" + \\\"' is not available (weak dependency)\\\"); e.code = 'MODULE_NOT_FOUND'; throw e; } \");\n      }\n\n      var moduleId = this.moduleId({\n        module: module,\n        request: request\n      });\n      var exportsType = module.buildMeta && module.buildMeta.exportsType;\n\n      if (exportsType === \"namespace\") {\n        if (header) {\n          var rawModule = this.moduleRaw({\n            module: module,\n            request: request\n          });\n          getModuleFunction = \"function() { \".concat(header, \"return \").concat(rawModule, \"; }\");\n        } else {\n          getModuleFunction = \"__webpack_require__.bind(null, \".concat(comment).concat(idExpr, \")\");\n        }\n      } else if (exportsType === \"named\") {\n        if (header) {\n          getModuleFunction = \"function() { \".concat(header, \"return __webpack_require__.t(\").concat(moduleId, \", 3); }\");\n        } else {\n          getModuleFunction = \"__webpack_require__.t.bind(null, \".concat(comment).concat(idExpr, \", 3)\");\n        }\n      } else if (strict) {\n        if (header) {\n          getModuleFunction = \"function() { \".concat(header, \"return __webpack_require__.t(\").concat(moduleId, \", 1); }\");\n        } else {\n          getModuleFunction = \"__webpack_require__.t.bind(null, \".concat(comment).concat(idExpr, \", 1)\");\n        }\n      } else {\n        if (header) {\n          getModuleFunction = \"function() { \".concat(header, \"return __webpack_require__.t(\").concat(moduleId, \", 7); }\");\n        } else {\n          getModuleFunction = \"__webpack_require__.t.bind(null, \".concat(comment).concat(idExpr, \", 7)\");\n        }\n      }\n\n      return \"\".concat(promise || \"Promise.resolve()\", \".then(\").concat(getModuleFunction, \")\");\n    }\n    /**\n     *\n     * @param {Object} options options object\n     * @param {boolean=} options.update whether a new variable should be created or the existing one updated\n     * @param {Module} options.module the module\n     * @param {string} options.request the request that should be printed as comment\n     * @param {string} options.importVar name of the import variable\n     * @param {Module} options.originModule module in which the statement is emitted\n     * @returns {string} the import statement\n     */\n\n  }, {\n    key: \"importStatement\",\n    value: function importStatement(_ref11) {\n      var update = _ref11.update,\n          module = _ref11.module,\n          request = _ref11.request,\n          importVar = _ref11.importVar,\n          originModule = _ref11.originModule;\n\n      if (!module) {\n        return this.missingModuleStatement({\n          request: request\n        });\n      }\n\n      var moduleId = this.moduleId({\n        module: module,\n        request: request\n      });\n      var optDeclaration = update ? \"\" : \"var \";\n      var exportsType = module.buildMeta && module.buildMeta.exportsType;\n      var content = \"/* harmony import */ \".concat(optDeclaration).concat(importVar, \" = __webpack_require__(\").concat(moduleId, \");\\n\");\n\n      if (!exportsType && !originModule.buildMeta.strictHarmonyModule) {\n        content += \"/* harmony import */ \".concat(optDeclaration).concat(importVar, \"_default = /*#__PURE__*/__webpack_require__.n(\").concat(importVar, \");\\n\");\n      }\n\n      if (exportsType === \"named\") {\n        if (Array.isArray(module.buildMeta.providedExports)) {\n          content += \"\".concat(optDeclaration).concat(importVar, \"_namespace = /*#__PURE__*/__webpack_require__.t(\").concat(moduleId, \", 1);\\n\");\n        } else {\n          content += \"\".concat(optDeclaration).concat(importVar, \"_namespace = /*#__PURE__*/__webpack_require__.t(\").concat(moduleId, \");\\n\");\n        }\n      }\n\n      return content;\n    }\n  }, {\n    key: \"exportFromImport\",\n    value: function exportFromImport(_ref12) {\n      var module = _ref12.module,\n          request = _ref12.request,\n          exportName = _ref12.exportName,\n          originModule = _ref12.originModule,\n          asiSafe = _ref12.asiSafe,\n          isCall = _ref12.isCall,\n          callContext = _ref12.callContext,\n          importVar = _ref12.importVar;\n\n      if (!module) {\n        return this.missingModule({\n          request: request\n        });\n      }\n\n      var exportsType = module.buildMeta && module.buildMeta.exportsType;\n\n      if (!exportsType) {\n        if (exportName === \"default\") {\n          if (!originModule.buildMeta.strictHarmonyModule) {\n            if (isCall) {\n              return \"\".concat(importVar, \"_default()\");\n            } else if (asiSafe) {\n              return \"(\".concat(importVar, \"_default())\");\n            } else {\n              return \"\".concat(importVar, \"_default.a\");\n            }\n          } else {\n            return importVar;\n          }\n        } else if (originModule.buildMeta.strictHarmonyModule) {\n          if (exportName) {\n            return \"/* non-default import from non-esm module */undefined\";\n          } else {\n            return \"/*#__PURE__*/__webpack_require__.t(\".concat(importVar, \")\");\n          }\n        }\n      }\n\n      if (exportsType === \"named\") {\n        if (exportName === \"default\") {\n          return importVar;\n        } else if (!exportName) {\n          return \"\".concat(importVar, \"_namespace\");\n        }\n      }\n\n      if (exportName) {\n        var used = module.isUsed(exportName);\n\n        if (!used) {\n          var _comment = Template.toNormalComment(\"unused export \".concat(exportName));\n\n          return \"\".concat(_comment, \" undefined\");\n        }\n\n        var comment = used !== exportName ? Template.toNormalComment(exportName) + \" \" : \"\";\n        var access = \"\".concat(importVar, \"[\").concat(comment).concat(JSON.stringify(used), \"]\");\n\n        if (isCall) {\n          if (callContext === false && asiSafe) {\n            return \"(0,\".concat(access, \")\");\n          } else if (callContext === false) {\n            return \"Object(\".concat(access, \")\");\n          }\n        }\n\n        return access;\n      } else {\n        return importVar;\n      }\n    }\n  }, {\n    key: \"blockPromise\",\n    value: function blockPromise(_ref13) {\n      var block = _ref13.block,\n          message = _ref13.message;\n\n      if (!block || !block.chunkGroup || block.chunkGroup.chunks.length === 0) {\n        var _comment2 = this.comment({\n          message: message\n        });\n\n        return \"Promise.resolve(\".concat(_comment2.trim(), \")\");\n      }\n\n      var chunks = block.chunkGroup.chunks.filter(function (chunk) {\n        return !chunk.hasRuntime() && chunk.id !== null;\n      });\n      var comment = this.comment({\n        message: message,\n        chunkName: block.chunkName,\n        chunkReason: block.chunkReason\n      });\n\n      if (chunks.length === 1) {\n        var chunkId = JSON.stringify(chunks[0].id);\n        return \"__webpack_require__.e(\".concat(comment).concat(chunkId, \")\");\n      } else if (chunks.length > 0) {\n        var requireChunkId = function requireChunkId(chunk) {\n          return \"__webpack_require__.e(\".concat(JSON.stringify(chunk.id), \")\");\n        };\n\n        return \"Promise.all(\".concat(comment.trim(), \"[\").concat(chunks.map(requireChunkId).join(\", \"), \"])\");\n      } else {\n        return \"Promise.resolve(\".concat(comment.trim(), \")\");\n      }\n    }\n  }, {\n    key: \"onError\",\n    value: function onError() {\n      return \"__webpack_require__.oe\";\n    }\n  }, {\n    key: \"defineEsModuleFlagStatement\",\n    value: function defineEsModuleFlagStatement(_ref14) {\n      var exportsArgument = _ref14.exportsArgument;\n      return \"__webpack_require__.r(\".concat(exportsArgument, \");\\n\");\n    }\n  }]);\n\n  return RuntimeTemplate;\n}();","map":null,"metadata":{},"sourceType":"module"}