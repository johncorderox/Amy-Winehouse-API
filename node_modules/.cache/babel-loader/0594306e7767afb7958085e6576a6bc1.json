{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isExtendable = require('is-extendable');\n\nvar assignSymbols = require('assign-symbols');\n\nmodule.exports = Object.assign || function (obj\n/*, objects*/\n) {\n  if (obj === null || typeof obj === 'undefined') {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  if (!isObject(obj)) {\n    obj = {};\n  }\n\n  for (var i = 1; i < arguments.length; i++) {\n    var val = arguments[i];\n\n    if (isString(val)) {\n      val = toObject(val);\n    }\n\n    if (isObject(val)) {\n      assign(obj, val);\n      assignSymbols(obj, val);\n    }\n  }\n\n  return obj;\n};\n\nfunction assign(a, b) {\n  for (var key in b) {\n    if (hasOwn(b, key)) {\n      a[key] = b[key];\n    }\n  }\n}\n\nfunction isString(val) {\n  return val && typeof val === 'string';\n}\n\nfunction toObject(str) {\n  var obj = {};\n\n  for (var i in str) {\n    obj[i] = str[i];\n  }\n\n  return obj;\n}\n\nfunction isObject(val) {\n  return val && _typeof(val) === 'object' || isExtendable(val);\n}\n/**\n * Returns true if the given `key` is an own property of `obj`.\n */\n\n\nfunction hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction isEnum(obj, key) {\n  return Object.prototype.propertyIsEnumerable.call(obj, key);\n}","map":null,"metadata":{},"sourceType":"module"}