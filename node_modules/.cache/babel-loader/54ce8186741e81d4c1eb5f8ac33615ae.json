{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SortableSet = require(\"./util/SortableSet\");\n\nvar compareLocations = require(\"./compareLocations\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {{module: Module, loc: TODO, request: string}} OriginRecord */\n\n/** @typedef {string|{name: string}} ChunkGroupOptions */\n\n\nvar debugId = 5000;\n/**\n * @template T\n * @param {SortableSet<T>} set set to convert to array.\n * @returns {T[]} the array format of existing set\n */\n\nvar getArray = function getArray(set) {\n  return Array.from(set);\n};\n/**\n * A convenience method used to sort chunks based on their id's\n * @param {ChunkGroup} a first sorting comparator\n * @param {ChunkGroup} b second sorting comparator\n * @returns {1|0|-1} a sorting index to determine order\n */\n\n\nvar sortById = function sortById(a, b) {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * @param {OriginRecord} a the first comparator in sort\n * @param {OriginRecord} b the second comparator in sort\n * @returns {1|-1|0} returns sorting order as index\n */\n\n\nvar sortOrigin = function sortOrigin(a, b) {\n  var aIdent = a.module ? a.module.identifier() : \"\";\n  var bIdent = b.module ? b.module.identifier() : \"\";\n  if (aIdent < bIdent) return -1;\n  if (aIdent > bIdent) return 1;\n  return compareLocations(a.loc, b.loc);\n};\n\nvar ChunkGroup = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of ChunkGroup.\n   * @param {ChunkGroupOptions=} options chunk group options passed to chunkGroup\n   */\n  function ChunkGroup(options) {\n    _classCallCheck(this, ChunkGroup);\n\n    if (typeof options === \"string\") {\n      options = {\n        name: options\n      };\n    } else if (!options) {\n      options = {\n        name: undefined\n      };\n    }\n    /** @type {number} */\n\n\n    this.groupDebugId = debugId++;\n    this.options = options;\n    /** @type {SortableSet<ChunkGroup>} */\n\n    this._children = new SortableSet(undefined, sortById);\n    this._parents = new SortableSet(undefined, sortById);\n    this._blocks = new SortableSet();\n    /** @type {Chunk[]} */\n\n    this.chunks = [];\n    /** @type {OriginRecord[]} */\n\n    this.origins = [];\n    /** Indices in top-down order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndices = new Map();\n    /** Indices in bottom-up order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndices2 = new Map();\n  }\n  /**\n   * when a new chunk is added to a chunkGroup, addingOptions will occur.\n   * @param {ChunkGroupOptions} options the chunkGroup options passed to addOptions\n   * @returns {void}\n   */\n\n\n  _createClass(ChunkGroup, [{\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n\n        if (this.options[key] === undefined) {\n          this.options[key] = options[key];\n        } else if (this.options[key] !== options[key]) {\n          if (key.endsWith(\"Order\")) {\n            this.options[key] = Math.max(this.options[key], options[key]);\n          } else {\n            throw new Error(\"ChunkGroup.addOptions: No option merge strategy for \".concat(key));\n          }\n        }\n      }\n    }\n    /**\n     * returns the name of current ChunkGroup\n     * @returns {string|undefined} returns the ChunkGroup name\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.options.name;\n    }\n    /**\n     * sets a new name for current ChunkGroup\n     * @param {string} value the new name for ChunkGroup\n     * @returns {void}\n     */\n    ,\n    set: function set(value) {\n      this.options.name = value;\n    }\n    /**\n     * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's\n     * @returns {string} a unique concatenation of chunk debugId's\n     */\n\n  }, {\n    key: \"debugId\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.debugId;\n      }).join(\"+\");\n    }\n    /**\n     * get a unique id for ChunkGroup, made up of its member Chunk id's\n     * @returns {string} a unique concatenation of chunk ids\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.id;\n      }).join(\"+\");\n    }\n    /**\n     * Performs an unshift of a specific chunk\n     * @param {Chunk} chunk chunk being unshifted\n     * @returns {boolean} returns true if attempted chunk shift is accepted\n     */\n\n  }, {\n    key: \"unshiftChunk\",\n    value: function unshiftChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n\n      if (oldIdx > 0) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.unshift(chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.unshift(chunk);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * inserts a chunk before another existing chunk in group\n     * @param {Chunk} chunk Chunk being inserted\n     * @param {Chunk} before Placeholder/target chunk marking new chunk insertion point\n     * @returns {boolean} return true if insertion was successful\n     */\n\n  }, {\n    key: \"insertChunk\",\n    value: function insertChunk(chunk, before) {\n      var oldIdx = this.chunks.indexOf(chunk);\n      var idx = this.chunks.indexOf(before);\n\n      if (idx < 0) {\n        throw new Error(\"before chunk not found\");\n      }\n\n      if (oldIdx >= 0 && oldIdx > idx) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.splice(idx, 0, chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.splice(idx, 0, chunk);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * add a chunk into ChunkGroup. Is pushed on or prepended\n     * @param {Chunk} chunk chunk being pushed into ChunkGroupS\n     * @returns {boolean} returns true if chunk addition was successful.\n     */\n\n  }, {\n    key: \"pushChunk\",\n    value: function pushChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n\n      if (oldIdx >= 0) {\n        return false;\n      }\n\n      this.chunks.push(chunk);\n      return true;\n    }\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunk that will be replaced with\n     * @returns {boolean} returns true if the replacement was successful\n     */\n\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      var oldIdx = this.chunks.indexOf(oldChunk);\n      if (oldIdx < 0) return false;\n      var newIdx = this.chunks.indexOf(newChunk);\n\n      if (newIdx < 0) {\n        this.chunks[oldIdx] = newChunk;\n        return true;\n      }\n\n      if (newIdx < oldIdx) {\n        this.chunks.splice(oldIdx, 1);\n        return true;\n      } else if (newIdx !== oldIdx) {\n        this.chunks[oldIdx] = newChunk;\n        this.chunks.splice(newIdx, 1);\n        return true;\n      }\n    }\n  }, {\n    key: \"removeChunk\",\n    value: function removeChunk(chunk) {\n      var idx = this.chunks.indexOf(chunk);\n\n      if (idx >= 0) {\n        this.chunks.splice(idx, 1);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isInitial\",\n    value: function isInitial() {\n      return false;\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(chunk) {\n      if (this._children.has(chunk)) {\n        return false;\n      }\n\n      this._children.add(chunk);\n\n      return true;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this._children.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfChildren\",\n    value: function getNumberOfChildren() {\n      return this._children.size;\n    }\n  }, {\n    key: \"childrenIterable\",\n    get: function get() {\n      return this._children;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(chunk) {\n      if (!this._children.has(chunk)) {\n        return false;\n      }\n\n      this._children[\"delete\"](chunk);\n\n      chunk.removeParent(this);\n      return true;\n    }\n  }, {\n    key: \"addParent\",\n    value: function addParent(parentChunk) {\n      if (!this._parents.has(parentChunk)) {\n        this._parents.add(parentChunk);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getParents\",\n    value: function getParents() {\n      return this._parents.getFromCache(getArray);\n    }\n  }, {\n    key: \"setParents\",\n    value: function setParents(newParents) {\n      this._parents.clear();\n\n      var _iterator = _createForOfIteratorHelper(newParents),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n\n          this._parents.add(p);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"getNumberOfParents\",\n    value: function getNumberOfParents() {\n      return this._parents.size;\n    }\n  }, {\n    key: \"hasParent\",\n    value: function hasParent(parent) {\n      return this._parents.has(parent);\n    }\n  }, {\n    key: \"parentsIterable\",\n    get: function get() {\n      return this._parents;\n    }\n  }, {\n    key: \"removeParent\",\n    value: function removeParent(chunk) {\n      if (this._parents[\"delete\"](chunk)) {\n        chunk.removeChunk(this);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @returns {Array} - an array containing the blocks\n     */\n\n  }, {\n    key: \"getBlocks\",\n    value: function getBlocks() {\n      return this._blocks.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfBlocks\",\n    value: function getNumberOfBlocks() {\n      return this._blocks.size;\n    }\n  }, {\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      return this._blocks.has(block);\n    }\n  }, {\n    key: \"blocksIterable\",\n    get: function get() {\n      return this._blocks;\n    }\n  }, {\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      if (!this._blocks.has(block)) {\n        this._blocks.add(block);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"addOrigin\",\n    value: function addOrigin(module, loc, request) {\n      this.origins.push({\n        module: module,\n        loc: loc,\n        request: request\n      });\n    }\n  }, {\n    key: \"containsModule\",\n    value: function containsModule(module) {\n      var _iterator2 = _createForOfIteratorHelper(this.chunks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var chunk = _step2.value;\n          if (chunk.containsModule(module)) return true;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getFiles\",\n    value: function getFiles() {\n      var files = new Set();\n\n      var _iterator3 = _createForOfIteratorHelper(this.chunks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var chunk = _step3.value;\n\n          var _iterator4 = _createForOfIteratorHelper(chunk.files),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var file = _step4.value;\n              files.add(file);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return Array.from(files);\n    }\n    /**\n     * @param {string=} reason reason for removing ChunkGroup\n     * @returns {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(reason) {\n      // cleanup parents\n      var _iterator5 = _createForOfIteratorHelper(this._parents),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var parentChunkGroup = _step5.value;\n\n          // remove this chunk from its parents\n          parentChunkGroup._children[\"delete\"](this); // cleanup \"sub chunks\"\n\n\n          var _iterator9 = _createForOfIteratorHelper(this._children),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var chunkGroup = _step9.value;\n\n              /**\n               * remove this chunk as \"intermediary\" and connect\n               * it \"sub chunks\" and parents directly\n               */\n              // add parent to each \"sub chunk\"\n              chunkGroup.addParent(parentChunkGroup); // add \"sub chunk\" to parent\n\n              parentChunkGroup.addChild(chunkGroup);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n        /**\n         * we need to iterate again over the children\n         * to remove this from the child's parents.\n         * This can not be done in the above loop\n         * as it is not guaranteed that `this._parents` contains anything.\n         */\n\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this._children),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _chunkGroup = _step6.value;\n\n          // remove this as parent of every \"sub chunk\"\n          _chunkGroup._parents[\"delete\"](this);\n        } // cleanup blocks\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this._blocks),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var block = _step7.value;\n          block.chunkGroup = null;\n        } // remove chunks\n\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(this.chunks),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var chunk = _step8.value;\n          chunk.removeGroup(this);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      this.origins.sort(sortOrigin);\n\n      this._parents.sort();\n\n      this._children.sort();\n    }\n    /**\n     * Sorting predicate which allows current ChunkGroup to be compared against another.\n     * Sorting values are based off of number of chunks in ChunkGroup.\n     *\n     * @param {ChunkGroup} otherGroup the chunkGroup to compare this against\n     * @returns {-1|0|1} sort position for comparison\n     */\n\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(otherGroup) {\n      if (this.chunks.length > otherGroup.chunks.length) return -1;\n      if (this.chunks.length < otherGroup.chunks.length) return 1;\n      var a = this.chunks[Symbol.iterator]();\n      var b = otherGroup.chunks[Symbol.iterator](); // eslint-disable-next-line no-constant-condition\n\n      while (true) {\n        var aItem = a.next();\n        var bItem = b.next();\n        if (aItem.done) return 0;\n        var cmp = aItem.value.compareTo(bItem.value);\n        if (cmp !== 0) return cmp;\n      }\n    }\n  }, {\n    key: \"getChildrenByOrders\",\n    value: function getChildrenByOrders() {\n      var lists = new Map();\n\n      var _iterator10 = _createForOfIteratorHelper(this._children),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var childGroup = _step10.value;\n\n          // TODO webpack 5 remove this check for options\n          if (_typeof(childGroup.options) === \"object\") {\n            for (var _i2 = 0, _Object$keys2 = Object.keys(childGroup.options); _i2 < _Object$keys2.length; _i2++) {\n              var key = _Object$keys2[_i2];\n\n              if (key.endsWith(\"Order\")) {\n                var name = key.substr(0, key.length - \"Order\".length);\n                var list = lists.get(name);\n\n                if (list === undefined) {\n                  lists.set(name, list = []);\n                }\n\n                list.push({\n                  order: childGroup.options[key],\n                  group: childGroup\n                });\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      var result = Object.create(null);\n\n      var _iterator11 = _createForOfIteratorHelper(lists),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _ref3 = _step11.value;\n\n          var _ref2 = _slicedToArray(_ref3, 2);\n\n          var _name = _ref2[0];\n          var _list = _ref2[1];\n\n          _list.sort(function (a, b) {\n            var cmp = b.order - a.order;\n            if (cmp !== 0) return cmp; // TODO webpack 5 remove this check of compareTo\n\n            if (a.group.compareTo) {\n              return a.group.compareTo(b.group);\n            }\n\n            return 0;\n          });\n\n          result[_name] = _list.map(function (i) {\n            return i.group;\n          });\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return result;\n    }\n    /**\n     * Sets the top-down index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setModuleIndex\",\n    value: function setModuleIndex(module, index) {\n      this._moduleIndices.set(module, index);\n    }\n    /**\n     * Gets the top-down index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n\n  }, {\n    key: \"getModuleIndex\",\n    value: function getModuleIndex(module) {\n      return this._moduleIndices.get(module);\n    }\n    /**\n     * Sets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setModuleIndex2\",\n    value: function setModuleIndex2(module, index) {\n      this._moduleIndices2.set(module, index);\n    }\n    /**\n     * Gets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n\n  }, {\n    key: \"getModuleIndex2\",\n    value: function getModuleIndex2(module) {\n      return this._moduleIndices2.get(module);\n    }\n  }, {\n    key: \"checkConstraints\",\n    value: function checkConstraints() {\n      var chunk = this;\n\n      var _iterator12 = _createForOfIteratorHelper(chunk._children),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var child = _step12.value;\n\n          if (!child._parents.has(chunk)) {\n            throw new Error(\"checkConstraints: child missing parent \".concat(chunk.debugId, \" -> \").concat(child.debugId));\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      var _iterator13 = _createForOfIteratorHelper(chunk._parents),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var parentChunk = _step13.value;\n\n          if (!parentChunk._children.has(chunk)) {\n            throw new Error(\"checkConstraints: parent missing child \".concat(parentChunk.debugId, \" <- \").concat(chunk.debugId));\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n  }]);\n\n  return ChunkGroup;\n}();\n\nmodule.exports = ChunkGroup;","map":null,"metadata":{},"sourceType":"module"}