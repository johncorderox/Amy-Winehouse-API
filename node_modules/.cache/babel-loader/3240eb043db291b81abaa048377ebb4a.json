{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Template = require(\"../Template\");\n\nvar WebAssemblyUtils = require(\"./WebAssemblyUtils\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../MainTemplate\")} MainTemplate */\n// Get all wasm modules\n\n\nvar getAllWasmModules = function getAllWasmModules(chunk) {\n  var wasmModules = chunk.getAllAsyncChunks();\n  var array = [];\n\n  var _iterator = _createForOfIteratorHelper(wasmModules),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _chunk = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(_chunk.modulesIterable),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var m = _step2.value;\n\n          if (m.type.startsWith(\"webassembly\")) {\n            array.push(m);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return array;\n};\n/**\n * generates the import object function for a module\n * @param {Module} module the module\n * @param {boolean} mangle mangle imports\n * @returns {string} source code\n */\n\n\nvar generateImportObject = function generateImportObject(module, mangle) {\n  var waitForInstances = new Map();\n  var properties = [];\n  var usedWasmDependencies = WebAssemblyUtils.getUsedDependencies(module, mangle);\n\n  var _iterator3 = _createForOfIteratorHelper(usedWasmDependencies),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var usedDep = _step3.value;\n      var dep = usedDep.dependency;\n      var importedModule = dep.module;\n      var exportName = dep.name;\n      var usedName = importedModule && importedModule.isUsed(exportName);\n      var description = dep.description;\n      var direct = dep.onlyDirectImport;\n      var _module = usedDep.module;\n      var name = usedDep.name;\n\n      if (direct) {\n        var instanceVar = \"m\".concat(waitForInstances.size);\n        waitForInstances.set(instanceVar, importedModule.id);\n        properties.push({\n          module: _module,\n          name: name,\n          value: \"\".concat(instanceVar, \"[\").concat(JSON.stringify(usedName), \"]\")\n        });\n      } else {\n        var params = description.signature.params.map(function (param, k) {\n          return \"p\" + k + param.valtype;\n        });\n        var mod = \"installedModules[\".concat(JSON.stringify(importedModule.id), \"]\");\n        var func = \"\".concat(mod, \".exports[\").concat(JSON.stringify(usedName), \"]\");\n        properties.push({\n          module: _module,\n          name: name,\n          value: Template.asString([(importedModule.type.startsWith(\"webassembly\") ? \"\".concat(mod, \" ? \").concat(func, \" : \") : \"\") + \"function(\".concat(params, \") {\"), Template.indent([\"return \".concat(func, \"(\").concat(params, \");\")]), \"}\"])\n        });\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var importObject;\n\n  if (mangle) {\n    importObject = [\"return {\", Template.indent([properties.map(function (p) {\n      return \"\".concat(JSON.stringify(p.name), \": \").concat(p.value);\n    }).join(\",\\n\")]), \"};\"];\n  } else {\n    var propertiesByModule = new Map();\n\n    var _iterator4 = _createForOfIteratorHelper(properties),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var p = _step4.value;\n        var list = propertiesByModule.get(p.module);\n\n        if (list === undefined) {\n          propertiesByModule.set(p.module, list = []);\n        }\n\n        list.push(p);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    importObject = [\"return {\", Template.indent([Array.from(propertiesByModule, function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          module = _ref2[0],\n          list = _ref2[1];\n\n      return Template.asString([\"\".concat(JSON.stringify(module), \": {\"), Template.indent([list.map(function (p) {\n        return \"\".concat(JSON.stringify(p.name), \": \").concat(p.value);\n      }).join(\",\\n\")]), \"}\"]);\n    }).join(\",\\n\")]), \"};\"];\n  }\n\n  if (waitForInstances.size === 1) {\n    var moduleId = Array.from(waitForInstances.values())[0];\n    var promise = \"installedWasmModules[\".concat(JSON.stringify(moduleId), \"]\");\n    var variable = Array.from(waitForInstances.keys())[0];\n    return Template.asString([\"\".concat(JSON.stringify(module.id), \": function() {\"), Template.indent([\"return promiseResolve().then(function() { return \".concat(promise, \"; }).then(function(\").concat(variable, \") {\"), Template.indent(importObject), \"});\"]), \"},\"]);\n  } else if (waitForInstances.size > 0) {\n    var promises = Array.from(waitForInstances.values(), function (id) {\n      return \"installedWasmModules[\".concat(JSON.stringify(id), \"]\");\n    }).join(\", \");\n    var variables = Array.from(waitForInstances.keys(), function (name, i) {\n      return \"\".concat(name, \" = array[\").concat(i, \"]\");\n    }).join(\", \");\n    return Template.asString([\"\".concat(JSON.stringify(module.id), \": function() {\"), Template.indent([\"return promiseResolve().then(function() { return Promise.all([\".concat(promises, \"]); }).then(function(array) {\"), Template.indent([\"var \".concat(variables, \";\")].concat(_toConsumableArray(importObject))), \"});\"]), \"},\"]);\n  } else {\n    return Template.asString([\"\".concat(JSON.stringify(module.id), \": function() {\"), Template.indent(importObject), \"},\"]);\n  }\n};\n\nvar WasmMainTemplatePlugin = /*#__PURE__*/function () {\n  function WasmMainTemplatePlugin(_ref3) {\n    var generateLoadBinaryCode = _ref3.generateLoadBinaryCode,\n        supportsStreaming = _ref3.supportsStreaming,\n        mangleImports = _ref3.mangleImports;\n\n    _classCallCheck(this, WasmMainTemplatePlugin);\n\n    this.generateLoadBinaryCode = generateLoadBinaryCode;\n    this.supportsStreaming = supportsStreaming;\n    this.mangleImports = mangleImports;\n  }\n  /**\n   * @param {MainTemplate} mainTemplate main template\n   * @returns {void}\n   */\n\n\n  _createClass(WasmMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(mainTemplate) {\n      var _this = this;\n\n      mainTemplate.hooks.localVars.tap(\"WasmMainTemplatePlugin\", function (source, chunk) {\n        var wasmModules = getAllWasmModules(chunk);\n        if (wasmModules.length === 0) return source;\n        var importObjects = wasmModules.map(function (module) {\n          return generateImportObject(module, _this.mangleImports);\n        });\n        return Template.asString([source, \"\", \"// object to store loaded and loading wasm modules\", \"var installedWasmModules = {};\", \"\", // This function is used to delay reading the installed wasm module promises\n        // by a microtask. Sorting them doesn't help because there are egdecases where\n        // sorting is not possible (modules splitted into different chunks).\n        // So we not even trying and solve this by a microtask delay.\n        \"function promiseResolve() { return Promise.resolve(); }\", \"\", \"var wasmImportObjects = {\", Template.indent(importObjects), \"};\"]);\n      });\n      mainTemplate.hooks.requireEnsure.tap(\"WasmMainTemplatePlugin\", function (source, chunk, hash) {\n        var webassemblyModuleFilename = mainTemplate.outputOptions.webassemblyModuleFilename;\n        var chunkModuleMaps = chunk.getChunkModuleMaps(function (m) {\n          return m.type.startsWith(\"webassembly\");\n        });\n        if (Object.keys(chunkModuleMaps.id).length === 0) return source;\n        var wasmModuleSrcPath = mainTemplate.getAssetPath(JSON.stringify(webassemblyModuleFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          module: {\n            id: '\" + wasmModuleId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkModuleMaps.hash), \"[wasmModuleId] + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              var shortChunkHashMap = Object.create(null);\n\n              for (var _i2 = 0, _Object$keys = Object.keys(chunkModuleMaps.hash); _i2 < _Object$keys.length; _i2++) {\n                var wasmModuleId = _Object$keys[_i2];\n\n                if (typeof chunkModuleMaps.hash[wasmModuleId] === \"string\") {\n                  shortChunkHashMap[wasmModuleId] = chunkModuleMaps.hash[wasmModuleId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[wasmModuleId] + \\\"\");\n            }\n          }\n        });\n\n        var createImportObject = function createImportObject(content) {\n          return _this.mangleImports ? \"{ \".concat(JSON.stringify(WebAssemblyUtils.MANGLED_MODULE), \": \").concat(content, \" }\") : content;\n        };\n\n        return Template.asString([source, \"\", \"// Fetch + compile chunk loading for webassembly\", \"\", \"var wasmModules = \".concat(JSON.stringify(chunkModuleMaps.id), \"[chunkId] || [];\"), \"\", \"wasmModules.forEach(function(wasmModuleId) {\", Template.indent([\"var installedWasmModuleData = installedWasmModules[wasmModuleId];\", \"\", '// a Promise means \"currently loading\" or \"already loaded\".', \"if(installedWasmModuleData)\", Template.indent([\"promises.push(installedWasmModuleData);\"]), \"else {\", Template.indent([\"var importObject = wasmImportObjects[wasmModuleId]();\", \"var req = \".concat(_this.generateLoadBinaryCode(wasmModuleSrcPath), \";\"), \"var promise;\", _this.supportsStreaming ? Template.asString([\"if(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\", Template.indent([\"promise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\", Template.indent([\"return WebAssembly.instantiate(items[0], \".concat(createImportObject(\"items[1]\"), \");\")]), \"});\"]), \"} else if(typeof WebAssembly.instantiateStreaming === 'function') {\", Template.indent([\"promise = WebAssembly.instantiateStreaming(req, \".concat(createImportObject(\"importObject\"), \");\")])]) : Template.asString([\"if(importObject instanceof Promise) {\", Template.indent([\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\", \"promise = Promise.all([\", Template.indent([\"bytesPromise.then(function(bytes) { return WebAssembly.compile(bytes); }),\", \"importObject\"]), \"]).then(function(items) {\", Template.indent([\"return WebAssembly.instantiate(items[0], \".concat(createImportObject(\"items[1]\"), \");\")]), \"});\"])]), \"} else {\", Template.indent([\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\", \"promise = bytesPromise.then(function(bytes) {\", Template.indent([\"return WebAssembly.instantiate(bytes, \".concat(createImportObject(\"importObject\"), \");\")]), \"});\"]), \"}\", \"promises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\", Template.indent([\"return \".concat(mainTemplate.requireFn, \".w[wasmModuleId] = (res.instance || res).exports;\")]), \"}));\"]), \"}\"]), \"});\"]);\n      });\n      mainTemplate.hooks.requireExtensions.tap(\"WasmMainTemplatePlugin\", function (source, chunk) {\n        if (!chunk.hasModuleInGraph(function (m) {\n          return m.type.startsWith(\"webassembly\");\n        })) {\n          return source;\n        }\n\n        return Template.asString([source, \"\", \"// object with all WebAssembly.instance exports\", \"\".concat(mainTemplate.requireFn, \".w = {};\")]);\n      });\n      mainTemplate.hooks.hash.tap(\"WasmMainTemplatePlugin\", function (hash) {\n        hash.update(\"WasmMainTemplatePlugin\");\n        hash.update(\"2\");\n      });\n    }\n  }]);\n\n  return WasmMainTemplatePlugin;\n}();\n\nmodule.exports = WasmMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}