{"ast":null,"code":"function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport { decode } from \"@webassemblyjs/wasm-parser\";\nimport { shrinkPaddedLEB128 as makeShrinkPaddedLEB128 } from \"./leb128.js\";\n\nvar OptimizerError = /*#__PURE__*/function (_Error) {\n  _inherits(OptimizerError, _Error);\n\n  function OptimizerError(name, initalError) {\n    var _this;\n\n    _classCallCheck(this, OptimizerError);\n\n    _this = _possibleConstructorReturn(this, (OptimizerError.__proto__ || Object.getPrototypeOf(OptimizerError)).call(this, \"Error while optimizing: \" + name + \": \" + initalError.message));\n    _this.stack = initalError.stack;\n    return _this;\n  }\n\n  return OptimizerError;\n}(Error);\n\nvar decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true\n};\nexport function shrinkPaddedLEB128(uint8Buffer) {\n  try {\n    var ast = decode(uint8Buffer.buffer, decoderOpts);\n    return makeShrinkPaddedLEB128(ast, uint8Buffer);\n  } catch (e) {\n    throw new OptimizerError(\"shrinkPaddedLEB128\", e);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}