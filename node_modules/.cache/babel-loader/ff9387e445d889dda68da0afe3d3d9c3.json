{"ast":null,"code":"'use strict';\n\nvar utils = module.exports;\n\nvar path = require('path');\n/**\n * Module dependencies\n */\n\n\nvar isWindows = require('is-windows')();\n\nvar Snapdragon = require('snapdragon');\n\nutils.define = require('define-property');\nutils.diff = require('arr-diff');\nutils.extend = require('extend-shallow');\nutils.pick = require('object.pick');\nutils.typeOf = require('kind-of');\nutils.unique = require('array-unique');\n/**\n * Returns true if the given value is effectively an empty string\n */\n\nutils.isEmptyString = function (val) {\n  return String(val) === '' || String(val) === './';\n};\n/**\n * Returns true if the platform is windows, or `path.sep` is `\\\\`.\n * This is defined as a function to allow `path.sep` to be set in unit tests,\n * or by the user, if there is a reason to do so.\n * @return {Boolean}\n */\n\n\nutils.isWindows = function () {\n  return path.sep === '\\\\' || isWindows === true;\n};\n/**\n * Return the last element from an array\n */\n\n\nutils.last = function (arr, n) {\n  return arr[arr.length - (n || 1)];\n};\n/**\n * Get the `Snapdragon` instance to use\n */\n\n\nutils.instantiate = function (ast, options) {\n  var snapdragon; // if an instance was created by `.parse`, use that instance\n\n  if (utils.typeOf(ast) === 'object' && ast.snapdragon) {\n    snapdragon = ast.snapdragon; // if the user supplies an instance on options, use that instance\n  } else if (utils.typeOf(options) === 'object' && options.snapdragon) {\n    snapdragon = options.snapdragon; // create a new instance\n  } else {\n    snapdragon = new Snapdragon(options);\n  }\n\n  utils.define(snapdragon, 'parse', function (str, options) {\n    var parsed = Snapdragon.prototype.parse.call(this, str, options);\n    parsed.input = str; // escape unmatched brace/bracket/parens\n\n    var last = this.parser.stack.pop();\n\n    if (last && this.options.strictErrors !== true) {\n      var open = last.nodes[0];\n      var inner = last.nodes[1];\n\n      if (last.type === 'bracket') {\n        if (inner.val.charAt(0) === '[') {\n          inner.val = '\\\\' + inner.val;\n        }\n      } else {\n        open.val = '\\\\' + open.val;\n        var sibling = open.parent.nodes[1];\n\n        if (sibling.type === 'star') {\n          sibling.loose = true;\n        }\n      }\n    } // add non-enumerable parser reference\n\n\n    utils.define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n  return snapdragon;\n};\n/**\n * Create the key to use for memoization. The key is generated\n * by iterating over the options and concatenating key-value pairs\n * to the pattern string.\n */\n\n\nutils.createKey = function (pattern, options) {\n  if (typeof options === 'undefined') {\n    return pattern;\n  }\n\n  var key = pattern;\n\n  for (var prop in options) {\n    if (options.hasOwnProperty(prop)) {\n      key += ';' + prop + '=' + String(options[prop]);\n    }\n  }\n\n  return key;\n};\n/**\n * Cast `val` to an array\n * @return {Array}\n */\n\n\nutils.arrayify = function (val) {\n  if (typeof val === 'string') return [val];\n  return val ? Array.isArray(val) ? val : [val] : [];\n};\n/**\n * Return true if `val` is a non-empty string\n */\n\n\nutils.isString = function (val) {\n  return typeof val === 'string';\n};\n/**\n * Return true if `val` is a non-empty string\n */\n\n\nutils.isRegex = function (val) {\n  return utils.typeOf(val) === 'regexp';\n};\n/**\n * Return true if `val` is a non-empty string\n */\n\n\nutils.isObject = function (val) {\n  return utils.typeOf(val) === 'object';\n};\n/**\n * Escape regex characters in the given string\n */\n\n\nutils.escapeRegex = function (str) {\n  return str.replace(/[-[\\]{}()^$|*+?.\\\\/\\s]/g, '\\\\$&');\n};\n/**\n * Combines duplicate characters in the provided `input` string.\n * @param {String} `input`\n * @returns {String}\n */\n\n\nutils.combineDupes = function (input, patterns) {\n  patterns = utils.arrayify(patterns).join('|').split('|');\n  patterns = patterns.map(function (s) {\n    return s.replace(/\\\\?([+*\\\\/])/g, '\\\\$1');\n  });\n  var substr = patterns.join('|');\n  var regex = new RegExp('(' + substr + ')(?=\\\\1)', 'g');\n  return input.replace(regex, '');\n};\n/**\n * Returns true if the given `str` has special characters\n */\n\n\nutils.hasSpecialChars = function (str) {\n  return /(?:(?:(^|\\/)[!.])|[*?+()|[\\]{}]|[+@]\\()/.test(str);\n};\n/**\n * Normalize slashes in the given filepath.\n *\n * @param {String} `filepath`\n * @return {String}\n */\n\n\nutils.toPosixPath = function (str) {\n  return str.replace(/\\\\+/g, '/');\n};\n/**\n * Strip backslashes before special characters in a string.\n *\n * @param {String} `str`\n * @return {String}\n */\n\n\nutils.unescape = function (str) {\n  return utils.toPosixPath(str.replace(/\\\\(?=[*+?!.])/g, ''));\n};\n/**\n * Strip the drive letter from a windows filepath\n * @param {String} `fp`\n * @return {String}\n */\n\n\nutils.stripDrive = function (fp) {\n  return utils.isWindows() ? fp.replace(/^[a-z]:[\\\\/]+?/i, '/') : fp;\n};\n/**\n * Strip the prefix from a filepath\n * @param {String} `fp`\n * @return {String}\n */\n\n\nutils.stripPrefix = function (str) {\n  if (str.charAt(0) === '.' && (str.charAt(1) === '/' || str.charAt(1) === '\\\\')) {\n    return str.slice(2);\n  }\n\n  return str;\n};\n/**\n * Returns true if `str` is a common character that doesn't need\n * to be processed to be used for matching.\n * @param {String} `str`\n * @return {Boolean}\n */\n\n\nutils.isSimpleChar = function (str) {\n  return str.trim() === '' || str === '.';\n};\n/**\n * Returns true if the given str is an escaped or\n * unescaped path character\n */\n\n\nutils.isSlash = function (str) {\n  return str === '/' || str === '\\\\/' || str === '\\\\' || str === '\\\\\\\\';\n};\n/**\n * Returns a function that returns true if the given\n * pattern matches or contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\n\nutils.matchPath = function (pattern, options) {\n  return options && options.contains ? utils.containsPattern(pattern, options) : utils.equalsPattern(pattern, options);\n};\n/**\n * Returns true if the given (original) filepath or unixified path are equal\n * to the given pattern.\n */\n\n\nutils._equals = function (filepath, unixPath, pattern) {\n  return pattern === filepath || pattern === unixPath;\n};\n/**\n * Returns true if the given (original) filepath or unixified path contain\n * the given pattern.\n */\n\n\nutils._contains = function (filepath, unixPath, pattern) {\n  return filepath.indexOf(pattern) !== -1 || unixPath.indexOf(pattern) !== -1;\n};\n/**\n * Returns a function that returns true if the given\n * pattern is the same as a given `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\n\nutils.equalsPattern = function (pattern, options) {\n  var unixify = utils.unixify(options);\n  options = options || {};\n  return function fn(filepath) {\n    var equal = utils._equals(filepath, unixify(filepath), pattern);\n\n    if (equal === true || options.nocase !== true) {\n      return equal;\n    }\n\n    var lower = filepath.toLowerCase();\n    return utils._equals(lower, unixify(lower), pattern);\n  };\n};\n/**\n * Returns a function that returns true if the given\n * pattern contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\n\nutils.containsPattern = function (pattern, options) {\n  var unixify = utils.unixify(options);\n  options = options || {};\n  return function (filepath) {\n    var contains = utils._contains(filepath, unixify(filepath), pattern);\n\n    if (contains === true || options.nocase !== true) {\n      return contains;\n    }\n\n    var lower = filepath.toLowerCase();\n    return utils._contains(lower, unixify(lower), pattern);\n  };\n};\n/**\n * Returns a function that returns true if the given\n * regex matches the `filename` of a file path.\n *\n * @param {RegExp} `re` Matching regex\n * @return {Function}\n */\n\n\nutils.matchBasename = function (re) {\n  return function (filepath) {\n    return re.test(filepath) || re.test(path.basename(filepath));\n  };\n};\n/**\n * Returns the given value unchanced.\n * @return {any}\n */\n\n\nutils.identity = function (val) {\n  return val;\n};\n/**\n * Determines the filepath to return based on the provided options.\n * @return {any}\n */\n\n\nutils.value = function (str, unixify, options) {\n  if (options && options.unixify === false) {\n    return str;\n  }\n\n  if (options && typeof options.unixify === 'function') {\n    return options.unixify(str);\n  }\n\n  return unixify(str);\n};\n/**\n * Returns a function that normalizes slashes in a string to forward\n * slashes, strips `./` from beginning of paths, and optionally unescapes\n * special characters.\n * @return {Function}\n */\n\n\nutils.unixify = function (options) {\n  var opts = options || {};\n  return function (filepath) {\n    if (opts.stripPrefix !== false) {\n      filepath = utils.stripPrefix(filepath);\n    }\n\n    if (opts.unescape === true) {\n      filepath = utils.unescape(filepath);\n    }\n\n    if (opts.unixify === true || utils.isWindows()) {\n      filepath = utils.toPosixPath(filepath);\n    }\n\n    return filepath;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}