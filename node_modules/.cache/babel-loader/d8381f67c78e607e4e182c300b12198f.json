{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource,\n    OriginalSource = _require.OriginalSource;\n\nvar Template = require(\"./Template\");\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryCustomUmdObject} LibraryCustomUmdObject */\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @param {string[]} accessor the accessor to convert to path\n * @returns {string} the path\n */\n\n\nvar accessorToObjectAccess = function accessorToObjectAccess(accessor) {\n  return accessor.map(function (a) {\n    return \"[\".concat(JSON.stringify(a), \"]\");\n  }).join(\"\");\n};\n/**\n * @param {string=} base the path prefix\n * @param {string|string[]} accessor the accessor\n * @param {string=} joinWith the element separator\n * @returns {string} the path\n */\n\n\nvar accessorAccess = function accessorAccess(base, accessor) {\n  var joinWith = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \", \";\n  var accessors = Array.isArray(accessor) ? accessor : [accessor];\n  return accessors.map(function (_, idx) {\n    var a = base ? base + accessorToObjectAccess(accessors.slice(0, idx + 1)) : accessors[0] + accessorToObjectAccess(accessors.slice(1, idx + 1));\n    if (idx === accessors.length - 1) return a;\n    if (idx === 0 && base === undefined) return \"\".concat(a, \" = typeof \").concat(a, \" === \\\"object\\\" ? \").concat(a, \" : {}\");\n    return \"\".concat(a, \" = \").concat(a, \" || {}\");\n  }).join(joinWith);\n};\n/** @typedef {string | string[] | LibraryCustomUmdObject} UmdMainTemplatePluginName */\n\n/**\n * @typedef {Object} AuxiliaryCommentObject\n * @property {string} root\n * @property {string} commonjs\n * @property {string} commonjs2\n * @property {string} amd\n */\n\n/**\n * @typedef {Object} UmdMainTemplatePluginOption\n * @property {boolean=} optionalAmdExternalAsGlobal\n * @property {boolean} namedDefine\n * @property {string | AuxiliaryCommentObject} auxiliaryComment\n */\n\n\nvar UmdMainTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {UmdMainTemplatePluginName} name the name of the UMD library\n   * @param {UmdMainTemplatePluginOption} options the plugin option\n   */\n  function UmdMainTemplatePlugin(name, options) {\n    _classCallCheck(this, UmdMainTemplatePlugin);\n\n    if (_typeof(name) === \"object\" && !Array.isArray(name)) {\n      this.name = name.root || name.amd || name.commonjs;\n      this.names = name;\n    } else {\n      this.name = name;\n      this.names = {\n        commonjs: name,\n        root: name,\n        amd: name\n      };\n    }\n\n    this.optionalAmdExternalAsGlobal = options.optionalAmdExternalAsGlobal;\n    this.namedDefine = options.namedDefine;\n    this.auxiliaryComment = options.auxiliaryComment;\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  _createClass(UmdMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compilation) {\n      var _this = this;\n\n      var mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate,\n          runtimeTemplate = compilation.runtimeTemplate;\n\n      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {\n        var externals = chunk.getModules().filter(function (m) {\n          return m.external && (m.externalType === \"umd\" || m.externalType === \"umd2\");\n        });\n        var optionalExternals = [];\n        var requiredExternals = [];\n\n        if (_this.optionalAmdExternalAsGlobal) {\n          var _iterator = _createForOfIteratorHelper(externals),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var m = _step.value;\n\n              if (m.optional) {\n                optionalExternals.push(m);\n              } else {\n                requiredExternals.push(m);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          externals = requiredExternals.concat(optionalExternals);\n        } else {\n          requiredExternals = externals;\n        }\n\n        var replaceKeys = function replaceKeys(str) {\n          return mainTemplate.getAssetPath(str, {\n            hash: hash,\n            chunk: chunk\n          });\n        };\n\n        var externalsDepsArray = function externalsDepsArray(modules) {\n          return \"[\".concat(replaceKeys(modules.map(function (m) {\n            return JSON.stringify(_typeof(m.request) === \"object\" ? m.request.amd : m.request);\n          }).join(\", \")), \"]\");\n        };\n\n        var externalsRootArray = function externalsRootArray(modules) {\n          return replaceKeys(modules.map(function (m) {\n            var request = m.request;\n            if (_typeof(request) === \"object\") request = request.root;\n            return \"root\".concat(accessorToObjectAccess([].concat(request)));\n          }).join(\", \"));\n        };\n\n        var externalsRequireArray = function externalsRequireArray(type) {\n          return replaceKeys(externals.map(function (m) {\n            var expr;\n            var request = m.request;\n\n            if (_typeof(request) === \"object\") {\n              request = request[type];\n            }\n\n            if (request === undefined) {\n              throw new Error(\"Missing external configuration for type:\" + type);\n            }\n\n            if (Array.isArray(request)) {\n              expr = \"require(\".concat(JSON.stringify(request[0]), \")\").concat(accessorToObjectAccess(request.slice(1)));\n            } else {\n              expr = \"require(\".concat(JSON.stringify(request), \")\");\n            }\n\n            if (m.optional) {\n              expr = \"(function webpackLoadOptionalExternalModule() { try { return \".concat(expr, \"; } catch(e) {} }())\");\n            }\n\n            return expr;\n          }).join(\", \"));\n        };\n\n        var externalsArguments = function externalsArguments(modules) {\n          return modules.map(function (m) {\n            return \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(m.id)), \"__\");\n          }).join(\", \");\n        };\n\n        var libraryName = function libraryName(library) {\n          return JSON.stringify(replaceKeys([].concat(library).pop()));\n        };\n\n        var amdFactory;\n\n        if (optionalExternals.length > 0) {\n          var wrapperArguments = externalsArguments(requiredExternals);\n          var factoryArguments = requiredExternals.length > 0 ? externalsArguments(requiredExternals) + \", \" + externalsRootArray(optionalExternals) : externalsRootArray(optionalExternals);\n          amdFactory = \"function webpackLoadOptionalExternalModuleAmd(\".concat(wrapperArguments, \") {\\n\") + \"\\t\\t\\treturn factory(\".concat(factoryArguments, \");\\n\") + \"\t\t}\";\n        } else {\n          amdFactory = \"factory\";\n        }\n\n        var auxiliaryComment = _this.auxiliaryComment;\n\n        var getAuxilaryComment = function getAuxilaryComment(type) {\n          if (auxiliaryComment) {\n            if (typeof auxiliaryComment === \"string\") return \"\\t//\" + auxiliaryComment + \"\\n\";\n            if (auxiliaryComment[type]) return \"\\t//\" + auxiliaryComment[type] + \"\\n\";\n          }\n\n          return \"\";\n        };\n\n        return new ConcatSource(new OriginalSource(\"(function webpackUniversalModuleDefinition(root, factory) {\\n\" + getAuxilaryComment(\"commonjs2\") + \"\tif(typeof exports === 'object' && typeof module === 'object')\\n\" + \"\t\tmodule.exports = factory(\" + externalsRequireArray(\"commonjs2\") + \");\\n\" + getAuxilaryComment(\"amd\") + \"\telse if(typeof define === 'function' && define.amd)\\n\" + (requiredExternals.length > 0 ? _this.names.amd && _this.namedDefine === true ? \"\t\tdefine(\" + libraryName(_this.names.amd) + \", \" + externalsDepsArray(requiredExternals) + \", \" + amdFactory + \");\\n\" : \"\t\tdefine(\" + externalsDepsArray(requiredExternals) + \", \" + amdFactory + \");\\n\" : _this.names.amd && _this.namedDefine === true ? \"\t\tdefine(\" + libraryName(_this.names.amd) + \", [], \" + amdFactory + \");\\n\" : \"\t\tdefine([], \" + amdFactory + \");\\n\") + (_this.names.root || _this.names.commonjs ? getAuxilaryComment(\"commonjs\") + \"\telse if(typeof exports === 'object')\\n\" + \"\t\texports[\" + libraryName(_this.names.commonjs || _this.names.root) + \"] = factory(\" + externalsRequireArray(\"commonjs\") + \");\\n\" + getAuxilaryComment(\"root\") + \"\telse\\n\" + \"\t\t\" + replaceKeys(accessorAccess(\"root\", _this.names.root || _this.names.commonjs)) + \" = factory(\" + externalsRootArray(externals) + \");\\n\" : \"\telse {\\n\" + (externals.length > 0 ? \"\t\tvar a = typeof exports === 'object' ? factory(\" + externalsRequireArray(\"commonjs\") + \") : factory(\" + externalsRootArray(externals) + \");\\n\" : \"\t\tvar a = factory();\\n\") + \"\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\\n\" + \"\t}\\n\") + \"})(\".concat(runtimeTemplate.outputOptions.globalObject, \", function(\").concat(externalsArguments(externals), \") {\\nreturn \"), \"webpack/universalModuleDefinition\"), source, \";\\n})\");\n      };\n\n      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {\n        var template = _arr[_i];\n        template.hooks.renderWithEntry.tap(\"UmdMainTemplatePlugin\", onRenderWithEntry);\n      }\n\n      mainTemplate.hooks.globalHashPaths.tap(\"UmdMainTemplatePlugin\", function (paths) {\n        if (_this.names.root) paths = paths.concat(_this.names.root);\n        if (_this.names.amd) paths = paths.concat(_this.names.amd);\n        if (_this.names.commonjs) paths = paths.concat(_this.names.commonjs);\n        return paths;\n      });\n      mainTemplate.hooks.hash.tap(\"UmdMainTemplatePlugin\", function (hash) {\n        hash.update(\"umd\");\n        hash.update(\"\".concat(_this.names.root));\n        hash.update(\"\".concat(_this.names.amd));\n        hash.update(\"\".concat(_this.names.commonjs));\n      });\n    }\n  }]);\n\n  return UmdMainTemplatePlugin;\n}();\n\nmodule.exports = UmdMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}