{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar NullDependency = require(\"./NullDependency\");\n\nvar ConstDependency = /*#__PURE__*/function (_NullDependency) {\n  _inherits(ConstDependency, _NullDependency);\n\n  var _super = _createSuper(ConstDependency);\n\n  function ConstDependency(expression, range, requireWebpackRequire) {\n    var _this;\n\n    _classCallCheck(this, ConstDependency);\n\n    _this = _super.call(this);\n    _this.expression = expression;\n    _this.range = range;\n    _this.requireWebpackRequire = requireWebpackRequire;\n    return _this;\n  }\n\n  _createClass(ConstDependency, [{\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this.range + \"\");\n      hash.update(this.expression + \"\");\n    }\n  }]);\n\n  return ConstDependency;\n}(NullDependency);\n\nConstDependency.Template = /*#__PURE__*/function () {\n  function ConstDependencyTemplate() {\n    _classCallCheck(this, ConstDependencyTemplate);\n  }\n\n  _createClass(ConstDependencyTemplate, [{\n    key: \"apply\",\n    value: function apply(dep, source) {\n      if (typeof dep.range === \"number\") {\n        source.insert(dep.range, dep.expression);\n        return;\n      }\n\n      source.replace(dep.range[0], dep.range[1] - 1, dep.expression);\n    }\n  }]);\n\n  return ConstDependencyTemplate;\n}();\n\nmodule.exports = ConstDependency;","map":null,"metadata":{},"sourceType":"module"}