{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/WatchIgnorePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/WatchIgnorePlugin\").WatchIgnorePluginOptions} WatchIgnorePluginOptions */\n\n\nvar IgnoringWatchFileSystem = /*#__PURE__*/function () {\n  function IgnoringWatchFileSystem(wfs, paths) {\n    _classCallCheck(this, IgnoringWatchFileSystem);\n\n    this.wfs = wfs;\n    this.paths = paths;\n  }\n\n  _createClass(IgnoringWatchFileSystem, [{\n    key: \"watch\",\n    value: function watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n      var _this = this;\n\n      var ignored = function ignored(path) {\n        return _this.paths.some(function (p) {\n          return p instanceof RegExp ? p.test(path) : path.indexOf(p) === 0;\n        });\n      };\n\n      var notIgnored = function notIgnored(path) {\n        return !ignored(path);\n      };\n\n      var ignoredFiles = files.filter(ignored);\n      var ignoredDirs = dirs.filter(ignored);\n      var watcher = this.wfs.watch(files.filter(notIgnored), dirs.filter(notIgnored), missing, startTime, options, function (err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles) {\n        if (err) return callback(err);\n\n        var _iterator = _createForOfIteratorHelper(ignoredFiles),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var path = _step.value;\n            fileTimestamps.set(path, 1);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(ignoredDirs),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _path = _step2.value;\n            dirTimestamps.set(_path, 1);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        callback(err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles);\n      }, callbackUndelayed);\n      return {\n        close: function close() {\n          return watcher.close();\n        },\n        pause: function pause() {\n          return watcher.pause();\n        },\n        getContextTimestamps: function getContextTimestamps() {\n          var dirTimestamps = watcher.getContextTimestamps();\n\n          var _iterator3 = _createForOfIteratorHelper(ignoredDirs),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var path = _step3.value;\n              dirTimestamps.set(path, 1);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          return dirTimestamps;\n        },\n        getFileTimestamps: function getFileTimestamps() {\n          var fileTimestamps = watcher.getFileTimestamps();\n\n          var _iterator4 = _createForOfIteratorHelper(ignoredFiles),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var path = _step4.value;\n              fileTimestamps.set(path, 1);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          return fileTimestamps;\n        }\n      };\n    }\n  }]);\n\n  return IgnoringWatchFileSystem;\n}();\n\nvar WatchIgnorePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {WatchIgnorePluginOptions} paths list of paths\n   */\n  function WatchIgnorePlugin(paths) {\n    _classCallCheck(this, WatchIgnorePlugin);\n\n    validateOptions(schema, paths, \"Watch Ignore Plugin\");\n    this.paths = paths;\n  }\n\n  _createClass(WatchIgnorePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this2 = this;\n\n      compiler.hooks.afterEnvironment.tap(\"WatchIgnorePlugin\", function () {\n        compiler.watchFileSystem = new IgnoringWatchFileSystem(compiler.watchFileSystem, _this2.paths);\n      });\n    }\n  }]);\n\n  return WatchIgnorePlugin;\n}();\n\nmodule.exports = WatchIgnorePlugin;","map":null,"metadata":{},"sourceType":"module"}