{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DependenciesBlockVariable = require(\"./DependenciesBlockVariable\");\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"./DependenciesBlockVariable\")} DependenciesBlockVariable */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n\nvar DependenciesBlock = /*#__PURE__*/function () {\n  function DependenciesBlock() {\n    _classCallCheck(this, DependenciesBlock);\n\n    /** @type {Dependency[]} */\n    this.dependencies = [];\n    /** @type {AsyncDependenciesBlock[]} */\n\n    this.blocks = [];\n    /** @type {DependenciesBlockVariable[]} */\n\n    this.variables = [];\n  }\n  /**\n   * Adds a DependencyBlock to DependencyBlock relationship.\n   * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n   *\n   * @param {AsyncDependenciesBlock} block block being added\n   * @returns {void}\n   */\n\n\n  _createClass(DependenciesBlock, [{\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      this.blocks.push(block);\n      block.parent = this;\n    }\n    /**\n     * @param {string} name name of dependency\n     * @param {string} expression expression string for variable\n     * @param {Dependency[]} dependencies dependency instances tied to variable\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addVariable\",\n    value: function addVariable(name, expression, dependencies) {\n      var _iterator = _createForOfIteratorHelper(this.variables),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var v = _step.value;\n\n          if (v.name === name && v.expression === expression) {\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.variables.push(new DependenciesBlockVariable(name, expression, dependencies));\n    }\n    /**\n     * @param {Dependency} dependency dependency being tied to block.\n     * This is an \"edge\" pointing to another \"node\" on module graph.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addDependency\",\n    value: function addDependency(dependency) {\n      this.dependencies.push(dependency);\n    }\n    /**\n     * @param {Dependency} dependency dependency being removed\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeDependency\",\n    value: function removeDependency(dependency) {\n      var idx = this.dependencies.indexOf(dependency);\n\n      if (idx >= 0) {\n        this.dependencies.splice(idx, 1);\n      }\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      var _iterator2 = _createForOfIteratorHelper(this.dependencies),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var dep = _step2.value;\n          dep.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.blocks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var block = _step3.value;\n          block.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.variables),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var variable = _step4.value;\n          variable.updateHash(hash);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var _iterator5 = _createForOfIteratorHelper(this.dependencies),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var dep = _step5.value;\n          dep.disconnect();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this.blocks),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var block = _step6.value;\n          block.disconnect();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this.variables),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var variable = _step7.value;\n          variable.disconnect();\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"unseal\",\n    value: function unseal() {\n      var _iterator8 = _createForOfIteratorHelper(this.blocks),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var block = _step8.value;\n          block.unseal();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n    /**\n     * @param {DependencyFilterFunction} filter filter function for dependencies, gets passed all dependency ties from current instance\n     * @returns {boolean} returns boolean for filter\n     */\n\n  }, {\n    key: \"hasDependencies\",\n    value: function hasDependencies(filter) {\n      if (filter) {\n        var _iterator9 = _createForOfIteratorHelper(this.dependencies),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var dep = _step9.value;\n            if (filter(dep)) return true;\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      } else {\n        if (this.dependencies.length > 0) {\n          return true;\n        }\n      }\n\n      var _iterator10 = _createForOfIteratorHelper(this.blocks),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var block = _step10.value;\n          if (block.hasDependencies(filter)) return true;\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      var _iterator11 = _createForOfIteratorHelper(this.variables),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var variable = _step11.value;\n          if (variable.hasDependencies(filter)) return true;\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      var _iterator12 = _createForOfIteratorHelper(this.blocks),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var block = _step12.value;\n          block.sortItems();\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n    }\n  }]);\n\n  return DependenciesBlock;\n}();\n\nmodule.exports = DependenciesBlock;","map":null,"metadata":{},"sourceType":"module"}