{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n(function () {\n  'use strict';\n\n  var estraverse = require('estraverse');\n\n  function isNode(node) {\n    if (node == null) {\n      return false;\n    }\n\n    return _typeof(node) === 'object' && typeof node.type === 'string';\n  }\n\n  function isProperty(nodeType, key) {\n    return (nodeType === estraverse.Syntax.ObjectExpression || nodeType === estraverse.Syntax.ObjectPattern) && key === 'properties';\n  }\n\n  function Visitor(visitor, options) {\n    options = options || {};\n    this.__visitor = visitor || this;\n    this.__childVisitorKeys = options.childVisitorKeys ? Object.assign({}, estraverse.VisitorKeys, options.childVisitorKeys) : estraverse.VisitorKeys;\n\n    if (options.fallback === 'iteration') {\n      this.__fallback = Object.keys;\n    } else if (typeof options.fallback === 'function') {\n      this.__fallback = options.fallback;\n    }\n  }\n  /* Default method for visiting children.\n   * When you need to call default visiting operation inside custom visiting\n   * operation, you can use it with `this.visitChildren(node)`.\n   */\n\n\n  Visitor.prototype.visitChildren = function (node) {\n    var type, children, i, iz, j, jz, child;\n\n    if (node == null) {\n      return;\n    }\n\n    type = node.type || estraverse.Syntax.Property;\n    children = this.__childVisitorKeys[type];\n\n    if (!children) {\n      if (this.__fallback) {\n        children = this.__fallback(node);\n      } else {\n        throw new Error('Unknown node type ' + type + '.');\n      }\n    }\n\n    for (i = 0, iz = children.length; i < iz; ++i) {\n      child = node[children[i]];\n\n      if (child) {\n        if (Array.isArray(child)) {\n          for (j = 0, jz = child.length; j < jz; ++j) {\n            if (child[j]) {\n              if (isNode(child[j]) || isProperty(type, children[i])) {\n                this.visit(child[j]);\n              }\n            }\n          }\n        } else if (isNode(child)) {\n          this.visit(child);\n        }\n      }\n    }\n  };\n  /* Dispatching node. */\n\n\n  Visitor.prototype.visit = function (node) {\n    var type;\n\n    if (node == null) {\n      return;\n    }\n\n    type = node.type || estraverse.Syntax.Property;\n\n    if (this.__visitor[type]) {\n      this.__visitor[type].call(this, node);\n\n      return;\n    }\n\n    this.visitChildren(node);\n  };\n\n  exports.version = require('./package.json').version;\n  exports.Visitor = Visitor;\n\n  exports.visit = function (node, visitor, options) {\n    var v = new Visitor(visitor, options);\n    v.visit(node);\n  };\n})();\n/* vim: set sw=4 ts=4 et tw=80 : */","map":null,"metadata":{},"sourceType":"module"}