{"ast":null,"code":"'use strict';\n\nvar CONSTRUCTORS = {\n  Object: Object,\n  Array: Array,\n  Function: Function,\n  Number: Number,\n  String: String,\n  Date: Date,\n  RegExp: RegExp\n};\n\nmodule.exports = function defFunc(ajv) {\n  /* istanbul ignore else */\n  if (typeof Buffer != 'undefined') CONSTRUCTORS.Buffer = Buffer;\n  /* istanbul ignore else */\n\n  if (typeof Promise != 'undefined') CONSTRUCTORS.Promise = Promise;\n  defFunc.definition = {\n    compile: function compile(schema) {\n      if (typeof schema == 'string') {\n        var Constructor = getConstructor(schema);\n        return function (data) {\n          return data instanceof Constructor;\n        };\n      }\n\n      var constructors = schema.map(getConstructor);\n      return function (data) {\n        for (var i = 0; i < constructors.length; i++) {\n          if (data instanceof constructors[i]) return true;\n        }\n\n        return false;\n      };\n    },\n    CONSTRUCTORS: CONSTRUCTORS,\n    metaSchema: {\n      anyOf: [{\n        type: 'string'\n      }, {\n        type: 'array',\n        items: {\n          type: 'string'\n        }\n      }]\n    }\n  };\n  ajv.addKeyword('instanceof', defFunc.definition);\n  return ajv;\n\n  function getConstructor(c) {\n    var Constructor = CONSTRUCTORS[c];\n    if (Constructor) return Constructor;\n    throw new Error('invalid \"instanceof\" keyword value ' + c);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}