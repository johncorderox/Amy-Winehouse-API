{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar base64VLQ = require(\"./base64-vlq\");\n\nvar getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nvar getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nvar LINE_MAPPING = \";AACA\";\n\nvar SourceNode = /*#__PURE__*/function () {\n  function SourceNode(generatedCode, source, originalSource, startingLine) {\n    _classCallCheck(this, SourceNode);\n\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.startingLine = startingLine || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n\n  _createClass(SourceNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n    }\n  }, {\n    key: \"getGeneratedCode\",\n    value: function getGeneratedCode() {\n      return this.generatedCode;\n    }\n  }, {\n    key: \"addGeneratedCode\",\n    value: function addGeneratedCode(code) {\n      this.generatedCode += code;\n      this._numberOfLines += getNumberOfLines(code);\n      this._endsWithNewLine = code[code.length - 1] === \"\\n\";\n    }\n  }, {\n    key: \"getMappings\",\n    value: function getMappings(mappingsContext) {\n      if (!this.generatedCode) return \"\";\n      var lines = this._numberOfLines;\n      var sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n      var mappings = \"A\"; // generated column 0\n\n      if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n      mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\n      mappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n\n      mappings += \"A\"; // original column 0\n\n      mappingsContext.currentSource = sourceIdx;\n      mappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n      var unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n      mappings += Array(lines).join(LINE_MAPPING);\n\n      if (unfinishedGeneratedLine === 0) {\n        mappings += \";\";\n      } else {\n        if (lines !== 0) {\n          mappings += LINE_MAPPING;\n        }\n\n        mappingsContext.currentOriginalLine++;\n      }\n\n      return mappings;\n    }\n  }, {\n    key: \"mapGeneratedCode\",\n    value: function mapGeneratedCode(fn) {\n      throw new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n    }\n  }, {\n    key: \"getNormalizedNodes\",\n    value: function getNormalizedNodes() {\n      var results = [];\n      var currentLine = this.startingLine;\n      var generatedCode = this.generatedCode;\n      var index = 0;\n      var indexEnd = generatedCode.length;\n\n      while (index < indexEnd) {\n        // get one generated line\n        var nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n        if (nextLine === 0) nextLine = indexEnd;\n        var lineGenerated = generatedCode.substr(index, nextLine - index);\n        results.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine)); // move cursors\n\n        index = nextLine;\n        currentLine++;\n      }\n\n      return results;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(otherNode) {\n      if (otherNode instanceof SourceNode) {\n        return this.mergeSourceNode(otherNode);\n      } else if (otherNode instanceof SingleLineNode) {\n        return this.mergeSingleLineNode(otherNode);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"mergeSourceNode\",\n    value: function mergeSourceNode(otherNode) {\n      if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.startingLine) {\n        this.generatedCode += otherNode.generatedCode;\n        this._numberOfLines += otherNode._numberOfLines;\n        this._endsWithNewLine = otherNode._endsWithNewLine;\n        return this;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"mergeSingleLineNode\",\n    value: function mergeSingleLineNode(otherNode) {\n      if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.line && otherNode._numberOfLines <= 1) {\n        this.addSingleLineNode(otherNode);\n        return this;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"addSingleLineNode\",\n    value: function addSingleLineNode(otherNode) {\n      this.generatedCode += otherNode.generatedCode;\n      this._numberOfLines += otherNode._numberOfLines;\n      this._endsWithNewLine = otherNode._endsWithNewLine;\n    }\n  }]);\n\n  return SourceNode;\n}();\n\nmodule.exports = SourceNode;\n\nvar SingleLineNode = require(\"./SingleLineNode\"); // circular dependency","map":null,"metadata":{},"sourceType":"module"}