{"ast":null,"code":"/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/**\n * @param {ChunkGroup} chunkGroup the ChunkGroup to connect\n * @param {Chunk} chunk chunk to tie to ChunkGroup\n * @returns {void}\n */\nvar connectChunkGroupAndChunk = function connectChunkGroupAndChunk(chunkGroup, chunk) {\n  if (chunkGroup.pushChunk(chunk)) {\n    chunk.addGroup(chunkGroup);\n  }\n};\n/**\n * @param {ChunkGroup} parent parent ChunkGroup to connect\n * @param {ChunkGroup} child child ChunkGroup to connect\n * @returns {void}\n */\n\n\nvar connectChunkGroupParentAndChild = function connectChunkGroupParentAndChild(parent, child) {\n  if (parent.addChild(child)) {\n    child.addParent(parent);\n  }\n};\n/**\n * @param {Chunk} chunk Chunk to connect to Module\n * @param {Module} module Module to connect to Chunk\n * @returns {void}\n */\n\n\nvar connectChunkAndModule = function connectChunkAndModule(chunk, module) {\n  if (module.addChunk(chunk)) {\n    chunk.addModule(module);\n  }\n};\n/**\n * @param {Chunk} chunk Chunk being disconnected\n * @param {Module} module Module being disconnected\n * @returns {void}\n */\n\n\nvar disconnectChunkAndModule = function disconnectChunkAndModule(chunk, module) {\n  chunk.removeModule(module);\n  module.removeChunk(chunk);\n};\n/**\n * @param {AsyncDependenciesBlock} depBlock DepBlock being tied to ChunkGroup\n * @param {ChunkGroup} chunkGroup ChunkGroup being tied to DepBlock\n * @returns {void}\n */\n\n\nvar connectDependenciesBlockAndChunkGroup = function connectDependenciesBlockAndChunkGroup(depBlock, chunkGroup) {\n  if (chunkGroup.addBlock(depBlock)) {\n    depBlock.chunkGroup = chunkGroup;\n  }\n};\n\nexports.connectChunkGroupAndChunk = connectChunkGroupAndChunk;\nexports.connectChunkGroupParentAndChild = connectChunkGroupParentAndChild;\nexports.connectChunkAndModule = connectChunkAndModule;\nexports.disconnectChunkAndModule = disconnectChunkAndModule;\nexports.connectDependenciesBlockAndChunkGroup = connectDependenciesBlockAndChunkGroup;","map":null,"metadata":{},"sourceType":"module"}