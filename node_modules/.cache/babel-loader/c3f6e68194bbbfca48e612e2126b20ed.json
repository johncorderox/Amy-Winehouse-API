{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _require = require(\"tapable\"),\n    Tapable = _require.Tapable,\n    HookMap = _require.HookMap,\n    SyncHook = _require.SyncHook,\n    SyncWaterfallHook = _require.SyncWaterfallHook;\n\nvar Factory = require(\"enhanced-resolve\").ResolverFactory;\n\nvar _require2 = require(\"./util/cleverMerge\"),\n    cachedCleverMerge = _require2.cachedCleverMerge;\n/** @typedef {import(\"enhanced-resolve\").Resolver} Resolver */\n\n\nvar EMTPY_RESOLVE_OPTIONS = {};\n\nmodule.exports = /*#__PURE__*/function (_Tapable) {\n  _inherits(ResolverFactory, _Tapable);\n\n  var _super = _createSuper(ResolverFactory);\n\n  function ResolverFactory() {\n    var _this;\n\n    _classCallCheck(this, ResolverFactory);\n\n    _this = _super.call(this);\n    _this.hooks = {\n      resolveOptions: new HookMap(function () {\n        return new SyncWaterfallHook([\"resolveOptions\"]);\n      }),\n      resolver: new HookMap(function () {\n        return new SyncHook([\"resolver\", \"resolveOptions\"]);\n      })\n    };\n\n    _this._pluginCompat.tap(\"ResolverFactory\", function (options) {\n      var match;\n      match = /^resolve-options (.+)$/.exec(options.name);\n\n      if (match) {\n        _this.hooks.resolveOptions[\"for\"](match[1]).tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n\n        return true;\n      }\n\n      match = /^resolver (.+)$/.exec(options.name);\n\n      if (match) {\n        _this.hooks.resolver[\"for\"](match[1]).tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n\n        return true;\n      }\n    });\n\n    _this.cache2 = new Map();\n    return _this;\n  }\n\n  _createClass(ResolverFactory, [{\n    key: \"get\",\n    value: function get(type, resolveOptions) {\n      resolveOptions = resolveOptions || EMTPY_RESOLVE_OPTIONS;\n      var ident = \"\".concat(type, \"|\").concat(JSON.stringify(resolveOptions));\n      var resolver = this.cache2.get(ident);\n      if (resolver) return resolver;\n\n      var newResolver = this._create(type, resolveOptions);\n\n      this.cache2.set(ident, newResolver);\n      return newResolver;\n    }\n  }, {\n    key: \"_create\",\n    value: function _create(type, resolveOptions) {\n      var _this2 = this;\n\n      var originalResolveOptions = Object.assign({}, resolveOptions);\n      resolveOptions = this.hooks.resolveOptions[\"for\"](type).call(resolveOptions);\n      var resolver = Factory.createResolver(resolveOptions);\n\n      if (!resolver) {\n        throw new Error(\"No resolver created\");\n      }\n      /** @type {Map<Object, Resolver>} */\n\n\n      var childCache = new Map();\n\n      resolver.withOptions = function (options) {\n        var cacheEntry = childCache.get(options);\n        if (cacheEntry !== undefined) return cacheEntry;\n        var mergedOptions = cachedCleverMerge(originalResolveOptions, options);\n\n        var resolver = _this2.get(type, mergedOptions);\n\n        childCache.set(options, resolver);\n        return resolver;\n      };\n\n      this.hooks.resolver[\"for\"](type).call(resolver, resolveOptions);\n      return resolver;\n    }\n  }]);\n\n  return ResolverFactory;\n}(Tapable);","map":null,"metadata":{},"sourceType":"module"}