{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar base64VLQ = require(\"./base64-vlq\");\n\nvar getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nvar getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nvar LINE_MAPPING = \";AAAA\";\n\nvar SingleLineNode = /*#__PURE__*/function () {\n  function SingleLineNode(generatedCode, source, originalSource, line) {\n    _classCallCheck(this, SingleLineNode);\n\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.line = line || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n\n  _createClass(SingleLineNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new SingleLineNode(this.generatedCode, this.source, this.originalSource, this.line);\n    }\n  }, {\n    key: \"getGeneratedCode\",\n    value: function getGeneratedCode() {\n      return this.generatedCode;\n    }\n  }, {\n    key: \"getMappings\",\n    value: function getMappings(mappingsContext) {\n      if (!this.generatedCode) return \"\";\n      var lines = this._numberOfLines;\n      var sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n      var mappings = \"A\"; // generated column 0\n\n      if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n      mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\n      mappings += base64VLQ.encode(this.line - mappingsContext.currentOriginalLine); // original line index\n\n      mappings += \"A\"; // original column 0\n\n      mappingsContext.currentSource = sourceIdx;\n      mappingsContext.currentOriginalLine = this.line;\n      var unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n      mappings += Array(lines).join(LINE_MAPPING);\n\n      if (unfinishedGeneratedLine === 0) {\n        mappings += \";\";\n      } else {\n        if (lines !== 0) mappings += LINE_MAPPING;\n      }\n\n      return mappings;\n    }\n  }, {\n    key: \"getNormalizedNodes\",\n    value: function getNormalizedNodes() {\n      return [this];\n    }\n  }, {\n    key: \"mapGeneratedCode\",\n    value: function mapGeneratedCode(fn) {\n      var generatedCode = fn(this.generatedCode);\n      return new SingleLineNode(generatedCode, this.source, this.originalSource, this.line);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(otherNode) {\n      if (otherNode instanceof SingleLineNode) {\n        return this.mergeSingleLineNode(otherNode);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"mergeSingleLineNode\",\n    value: function mergeSingleLineNode(otherNode) {\n      if (this.source === otherNode.source && this.originalSource === otherNode.originalSource) {\n        if (this.line === otherNode.line) {\n          this.generatedCode += otherNode.generatedCode;\n          this._numberOfLines += otherNode._numberOfLines;\n          this._endsWithNewLine = otherNode._endsWithNewLine;\n          return this;\n        } else if (this.line + 1 === otherNode.line && this._endsWithNewLine && this._numberOfLines === 1 && otherNode._numberOfLines <= 1) {\n          return new SourceNode(this.generatedCode + otherNode.generatedCode, this.source, this.originalSource, this.line);\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return SingleLineNode;\n}();\n\nmodule.exports = SingleLineNode;\n\nvar SourceNode = require(\"./SourceNode\"); // circular dependency","map":null,"metadata":{},"sourceType":"module"}