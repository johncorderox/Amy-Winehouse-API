{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MergeDuplicateChunksPlugin = /*#__PURE__*/function () {\n  function MergeDuplicateChunksPlugin() {\n    _classCallCheck(this, MergeDuplicateChunksPlugin);\n  }\n\n  _createClass(MergeDuplicateChunksPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"MergeDuplicateChunksPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksBasic.tap(\"MergeDuplicateChunksPlugin\", function (chunks) {\n          // remember already tested chunks for performance\n          var notDuplicates = new Set(); // for each chunk\n\n          var _iterator = _createForOfIteratorHelper(chunks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var chunk = _step.value;\n              // track a Set of all chunk that could be duplicates\n              var possibleDuplicates = void 0;\n\n              var _iterator2 = _createForOfIteratorHelper(chunk.modulesIterable),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var _module = _step2.value;\n\n                  if (possibleDuplicates === undefined) {\n                    // when possibleDuplicates is not yet set,\n                    // create a new Set from chunks of the current module\n                    // including only chunks with the same number of modules\n                    var _iterator4 = _createForOfIteratorHelper(_module.chunksIterable),\n                        _step4;\n\n                    try {\n                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                        var dup = _step4.value;\n\n                        if (dup !== chunk && chunk.getNumberOfModules() === dup.getNumberOfModules() && !notDuplicates.has(dup)) {\n                          // delay allocating the new Set until here, reduce memory pressure\n                          if (possibleDuplicates === undefined) {\n                            possibleDuplicates = new Set();\n                          }\n\n                          possibleDuplicates.add(dup);\n                        }\n                      } // when no chunk is possible we can break here\n\n                    } catch (err) {\n                      _iterator4.e(err);\n                    } finally {\n                      _iterator4.f();\n                    }\n\n                    if (possibleDuplicates === undefined) break;\n                  } else {\n                    // validate existing possible duplicates\n                    var _iterator5 = _createForOfIteratorHelper(possibleDuplicates),\n                        _step5;\n\n                    try {\n                      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                        var _dup = _step5.value;\n\n                        // remove possible duplicate when module is not contained\n                        if (!_dup.containsModule(_module)) {\n                          possibleDuplicates[\"delete\"](_dup);\n                        }\n                      } // when all chunks has been removed we can break here\n\n                    } catch (err) {\n                      _iterator5.e(err);\n                    } finally {\n                      _iterator5.f();\n                    }\n\n                    if (possibleDuplicates.size === 0) break;\n                  }\n                } // when we found duplicates\n\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              if (possibleDuplicates !== undefined && possibleDuplicates.size > 0) {\n                var _iterator3 = _createForOfIteratorHelper(possibleDuplicates),\n                    _step3;\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    var otherChunk = _step3.value;\n                    if (otherChunk.hasRuntime() !== chunk.hasRuntime()) continue; // merge them\n\n                    if (chunk.integrate(otherChunk, \"duplicate\")) {\n                      chunks.splice(chunks.indexOf(otherChunk), 1);\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n              } // don't check already processed chunks twice\n\n\n              notDuplicates.add(chunk);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return MergeDuplicateChunksPlugin;\n}();\n\nmodule.exports = MergeDuplicateChunksPlugin;","map":null,"metadata":{},"sourceType":"module"}