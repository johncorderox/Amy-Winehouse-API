{"ast":null,"code":"function sign(input, output) {\n  return [input, output];\n}\n\nvar u32 = \"u32\";\nvar i32 = \"i32\";\nvar i64 = \"i64\";\nvar f32 = \"f32\";\nvar f64 = \"f64\";\n\nvar vector = function vector(t) {\n  var vecType = [t]; // $FlowIgnore\n\n  vecType.vector = true;\n  return vecType;\n};\n\nvar controlInstructions = {\n  unreachable: sign([], []),\n  nop: sign([], []),\n  // block ?\n  // loop ?\n  // if ?\n  // if else ?\n  br: sign([u32], []),\n  br_if: sign([u32], []),\n  br_table: sign(vector(u32), []),\n  \"return\": sign([], []),\n  call: sign([u32], []),\n  call_indirect: sign([u32], [])\n};\nvar parametricInstructions = {\n  drop: sign([], []),\n  select: sign([], [])\n};\nvar variableInstructions = {\n  get_local: sign([u32], []),\n  set_local: sign([u32], []),\n  tee_local: sign([u32], []),\n  get_global: sign([u32], []),\n  set_global: sign([u32], [])\n};\nvar memoryInstructions = {\n  \"i32.load\": sign([u32, u32], [i32]),\n  \"i64.load\": sign([u32, u32], []),\n  \"f32.load\": sign([u32, u32], []),\n  \"f64.load\": sign([u32, u32], []),\n  \"i32.load8_s\": sign([u32, u32], [i32]),\n  \"i32.load8_u\": sign([u32, u32], [i32]),\n  \"i32.load16_s\": sign([u32, u32], [i32]),\n  \"i32.load16_u\": sign([u32, u32], [i32]),\n  \"i64.load8_s\": sign([u32, u32], [i64]),\n  \"i64.load8_u\": sign([u32, u32], [i64]),\n  \"i64.load16_s\": sign([u32, u32], [i64]),\n  \"i64.load16_u\": sign([u32, u32], [i64]),\n  \"i64.load32_s\": sign([u32, u32], [i64]),\n  \"i64.load32_u\": sign([u32, u32], [i64]),\n  \"i32.store\": sign([u32, u32], []),\n  \"i64.store\": sign([u32, u32], []),\n  \"f32.store\": sign([u32, u32], []),\n  \"f64.store\": sign([u32, u32], []),\n  \"i32.store8\": sign([u32, u32], []),\n  \"i32.store16\": sign([u32, u32], []),\n  \"i64.store8\": sign([u32, u32], []),\n  \"i64.store16\": sign([u32, u32], []),\n  \"i64.store32\": sign([u32, u32], []),\n  current_memory: sign([], []),\n  grow_memory: sign([], [])\n};\nvar numericInstructions = {\n  \"i32.const\": sign([i32], [i32]),\n  \"i64.const\": sign([i64], [i64]),\n  \"f32.const\": sign([f32], [f32]),\n  \"f64.const\": sign([f64], [f64]),\n  \"i32.eqz\": sign([i32], [i32]),\n  \"i32.eq\": sign([i32, i32], [i32]),\n  \"i32.ne\": sign([i32, i32], [i32]),\n  \"i32.lt_s\": sign([i32, i32], [i32]),\n  \"i32.lt_u\": sign([i32, i32], [i32]),\n  \"i32.gt_s\": sign([i32, i32], [i32]),\n  \"i32.gt_u\": sign([i32, i32], [i32]),\n  \"i32.le_s\": sign([i32, i32], [i32]),\n  \"i32.le_u\": sign([i32, i32], [i32]),\n  \"i32.ge_s\": sign([i32, i32], [i32]),\n  \"i32.ge_u\": sign([i32, i32], [i32]),\n  \"i64.eqz\": sign([i64], [i64]),\n  \"i64.eq\": sign([i64, i64], [i32]),\n  \"i64.ne\": sign([i64, i64], [i32]),\n  \"i64.lt_s\": sign([i64, i64], [i32]),\n  \"i64.lt_u\": sign([i64, i64], [i32]),\n  \"i64.gt_s\": sign([i64, i64], [i32]),\n  \"i64.gt_u\": sign([i64, i64], [i32]),\n  \"i64.le_s\": sign([i64, i64], [i32]),\n  \"i64.le_u\": sign([i64, i64], [i32]),\n  \"i64.ge_s\": sign([i64, i64], [i32]),\n  \"i64.ge_u\": sign([i64, i64], [i32]),\n  \"f32.eq\": sign([f32, f32], [i32]),\n  \"f32.ne\": sign([f32, f32], [i32]),\n  \"f32.lt\": sign([f32, f32], [i32]),\n  \"f32.gt\": sign([f32, f32], [i32]),\n  \"f32.le\": sign([f32, f32], [i32]),\n  \"f32.ge\": sign([f32, f32], [i32]),\n  \"f64.eq\": sign([f64, f64], [i32]),\n  \"f64.ne\": sign([f64, f64], [i32]),\n  \"f64.lt\": sign([f64, f64], [i32]),\n  \"f64.gt\": sign([f64, f64], [i32]),\n  \"f64.le\": sign([f64, f64], [i32]),\n  \"f64.ge\": sign([f64, f64], [i32]),\n  \"i32.clz\": sign([i32], [i32]),\n  \"i32.ctz\": sign([i32], [i32]),\n  \"i32.popcnt\": sign([i32], [i32]),\n  \"i32.add\": sign([i32, i32], [i32]),\n  \"i32.sub\": sign([i32, i32], [i32]),\n  \"i32.mul\": sign([i32, i32], [i32]),\n  \"i32.div_s\": sign([i32, i32], [i32]),\n  \"i32.div_u\": sign([i32, i32], [i32]),\n  \"i32.rem_s\": sign([i32, i32], [i32]),\n  \"i32.rem_u\": sign([i32, i32], [i32]),\n  \"i32.and\": sign([i32, i32], [i32]),\n  \"i32.or\": sign([i32, i32], [i32]),\n  \"i32.xor\": sign([i32, i32], [i32]),\n  \"i32.shl\": sign([i32, i32], [i32]),\n  \"i32.shr_s\": sign([i32, i32], [i32]),\n  \"i32.shr_u\": sign([i32, i32], [i32]),\n  \"i32.rotl\": sign([i32, i32], [i32]),\n  \"i32.rotr\": sign([i32, i32], [i32]),\n  \"i64.clz\": sign([i64], [i64]),\n  \"i64.ctz\": sign([i64], [i64]),\n  \"i64.popcnt\": sign([i64], [i64]),\n  \"i64.add\": sign([i64, i64], [i64]),\n  \"i64.sub\": sign([i64, i64], [i64]),\n  \"i64.mul\": sign([i64, i64], [i64]),\n  \"i64.div_s\": sign([i64, i64], [i64]),\n  \"i64.div_u\": sign([i64, i64], [i64]),\n  \"i64.rem_s\": sign([i64, i64], [i64]),\n  \"i64.rem_u\": sign([i64, i64], [i64]),\n  \"i64.and\": sign([i64, i64], [i64]),\n  \"i64.or\": sign([i64, i64], [i64]),\n  \"i64.xor\": sign([i64, i64], [i64]),\n  \"i64.shl\": sign([i64, i64], [i64]),\n  \"i64.shr_s\": sign([i64, i64], [i64]),\n  \"i64.shr_u\": sign([i64, i64], [i64]),\n  \"i64.rotl\": sign([i64, i64], [i64]),\n  \"i64.rotr\": sign([i64, i64], [i64]),\n  \"f32.abs\": sign([f32], [f32]),\n  \"f32.neg\": sign([f32], [f32]),\n  \"f32.ceil\": sign([f32], [f32]),\n  \"f32.floor\": sign([f32], [f32]),\n  \"f32.trunc\": sign([f32], [f32]),\n  \"f32.nearest\": sign([f32], [f32]),\n  \"f32.sqrt\": sign([f32], [f32]),\n  \"f32.add\": sign([f32, f32], [f32]),\n  \"f32.sub\": sign([f32, f32], [f32]),\n  \"f32.mul\": sign([f32, f32], [f32]),\n  \"f32.div\": sign([f32, f32], [f32]),\n  \"f32.min\": sign([f32, f32], [f32]),\n  \"f32.max\": sign([f32, f32], [f32]),\n  \"f32.copysign\": sign([f32, f32], [f32]),\n  \"f64.abs\": sign([f64], [f64]),\n  \"f64.neg\": sign([f64], [f64]),\n  \"f64.ceil\": sign([f64], [f64]),\n  \"f64.floor\": sign([f64], [f64]),\n  \"f64.trunc\": sign([f64], [f64]),\n  \"f64.nearest\": sign([f64], [f64]),\n  \"f64.sqrt\": sign([f64], [f64]),\n  \"f64.add\": sign([f64, f64], [f64]),\n  \"f64.sub\": sign([f64, f64], [f64]),\n  \"f64.mul\": sign([f64, f64], [f64]),\n  \"f64.div\": sign([f64, f64], [f64]),\n  \"f64.min\": sign([f64, f64], [f64]),\n  \"f64.max\": sign([f64, f64], [f64]),\n  \"f64.copysign\": sign([f64, f64], [f64]),\n  \"i32.wrap/i64\": sign([i64], [i32]),\n  \"i32.trunc_s/f32\": sign([f32], [i32]),\n  \"i32.trunc_u/f32\": sign([f32], [i32]),\n  \"i32.trunc_s/f64\": sign([f32], [i32]),\n  \"i32.trunc_u/f64\": sign([f64], [i32]),\n  \"i64.extend_s/i32\": sign([i32], [i64]),\n  \"i64.extend_u/i32\": sign([i32], [i64]),\n  \"i64.trunc_s/f32\": sign([f32], [i64]),\n  \"i64.trunc_u/f32\": sign([f32], [i64]),\n  \"i64.trunc_s/f64\": sign([f64], [i64]),\n  \"i64.trunc_u/f64\": sign([f64], [i64]),\n  \"f32.convert_s/i32\": sign([i32], [f32]),\n  \"f32.convert_u/i32\": sign([i32], [f32]),\n  \"f32.convert_s/i64\": sign([i64], [f32]),\n  \"f32.convert_u/i64\": sign([i64], [f32]),\n  \"f32.demote/f64\": sign([f64], [f32]),\n  \"f64.convert_s/i32\": sign([i32], [f64]),\n  \"f64.convert_u/i32\": sign([i32], [f64]),\n  \"f64.convert_s/i64\": sign([i64], [f64]),\n  \"f64.convert_u/i64\": sign([i64], [f64]),\n  \"f64.promote/f32\": sign([f32], [f64]),\n  \"i32.reinterpret/f32\": sign([f32], [i32]),\n  \"i64.reinterpret/f64\": sign([f64], [i64]),\n  \"f32.reinterpret/i32\": sign([i32], [f32]),\n  \"f64.reinterpret/i64\": sign([i64], [f64])\n};\nexport var signatures = Object.assign({}, controlInstructions, parametricInstructions, variableInstructions, memoryInstructions, numericInstructions);","map":null,"metadata":{},"sourceType":"module"}