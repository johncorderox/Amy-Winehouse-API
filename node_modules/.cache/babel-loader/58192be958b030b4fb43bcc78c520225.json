{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar WebpackError = require(\"./WebpackError\");\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @param {Module[]} modules the modules to be sorted\n * @returns {Module[]} sorted version of original modules\n */\n\n\nvar sortModules = function sortModules(modules) {\n  return modules.slice().sort(function (a, b) {\n    var aIdent = a.identifier();\n    var bIdent = b.identifier();\n    /* istanbul ignore next */\n\n    if (aIdent < bIdent) return -1;\n    /* istanbul ignore next */\n\n    if (aIdent > bIdent) return 1;\n    /* istanbul ignore next */\n\n    return 0;\n  });\n};\n/**\n * @param {Module[]} modules each module from throw\n * @returns {string} each message from provided moduels\n */\n\n\nvar createModulesListMessage = function createModulesListMessage(modules) {\n  return modules.map(function (m) {\n    var message = \"* \".concat(m.identifier());\n    var validReasons = m.reasons.filter(function (reason) {\n      return reason.module;\n    });\n\n    if (validReasons.length > 0) {\n      message += \"\\n    Used by \".concat(validReasons.length, \" module(s), i. e.\");\n      message += \"\\n    \".concat(validReasons[0].module.identifier());\n    }\n\n    return message;\n  }).join(\"\\n\");\n};\n\nvar CaseSensitiveModulesWarning = /*#__PURE__*/function (_WebpackError) {\n  _inherits(CaseSensitiveModulesWarning, _WebpackError);\n\n  var _super = _createSuper(CaseSensitiveModulesWarning);\n\n  /**\n   * Creates an instance of CaseSensitiveModulesWarning.\n   * @param {Module[]} modules modules that were detected\n   */\n  function CaseSensitiveModulesWarning(modules) {\n    var _this;\n\n    _classCallCheck(this, CaseSensitiveModulesWarning);\n\n    var sortedModules = sortModules(modules);\n    var modulesList = createModulesListMessage(sortedModules);\n    _this = _super.call(this, \"There are multiple modules with names that only differ in casing.\\nThis can lead to unexpected behavior when compiling on a filesystem with other case-semantic.\\nUse equal casing. Compare these module identifiers:\\n\".concat(modulesList));\n    _this.name = \"CaseSensitiveModulesWarning\";\n    _this.origin = _this.module = sortedModules[0];\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n\n  return CaseSensitiveModulesWarning;\n}(WebpackError);\n\nmodule.exports = CaseSensitiveModulesWarning;","map":null,"metadata":{},"sourceType":"module"}