{"ast":null,"code":"'use strict';\n/**\n* Nanomatch compilers\n*/\n\nmodule.exports = function (nanomatch, options) {\n  function slash() {\n    if (options && typeof options.slash === 'string') {\n      return options.slash;\n    }\n\n    if (options && typeof options.slash === 'function') {\n      return options.slash.call(nanomatch);\n    }\n\n    return '\\\\\\\\/';\n  }\n\n  function star() {\n    if (options && typeof options.star === 'string') {\n      return options.star;\n    }\n\n    if (options && typeof options.star === 'function') {\n      return options.star.call(nanomatch);\n    }\n\n    return '[^' + slash() + ']*?';\n  }\n\n  var ast = nanomatch.ast = nanomatch.parser.ast;\n  ast.state = nanomatch.parser.state;\n  nanomatch.compiler.state = ast.state;\n  nanomatch.compiler\n  /**\n   * Negation / escaping\n   */\n  .set('not', function (node) {\n    var prev = this.prev();\n\n    if (this.options.nonegate === true || prev.type !== 'bos') {\n      return this.emit('\\\\' + node.val, node);\n    }\n\n    return this.emit(node.val, node);\n  }).set('escape', function (node) {\n    if (this.options.unescape && /^[-\\w_.]/.test(node.val)) {\n      return this.emit(node.val, node);\n    }\n\n    return this.emit('\\\\' + node.val, node);\n  }).set('quoted', function (node) {\n    return this.emit(node.val, node);\n  })\n  /**\n   * Regex\n   */\n  .set('dollar', function (node) {\n    if (node.parent.type === 'bracket') {\n      return this.emit(node.val, node);\n    }\n\n    return this.emit('\\\\' + node.val, node);\n  })\n  /**\n   * Dot: \".\"\n   */\n  .set('dot', function (node) {\n    if (node.dotfiles === true) this.dotfiles = true;\n    return this.emit('\\\\' + node.val, node);\n  })\n  /**\n   * Slashes: \"/\" and \"\\\"\n   */\n  .set('backslash', function (node) {\n    return this.emit(node.val, node);\n  }).set('slash', function (node, nodes, i) {\n    var val = '[' + slash() + ']';\n    var parent = node.parent;\n    var prev = this.prev(); // set \"node.hasSlash\" to true on all ancestor parens nodes\n\n    while (parent.type === 'paren' && !parent.hasSlash) {\n      parent.hasSlash = true;\n      parent = parent.parent;\n    }\n\n    if (prev.addQmark) {\n      val += '?';\n    } // word boundary\n\n\n    if (node.rest.slice(0, 2) === '\\\\b') {\n      return this.emit(val, node);\n    } // globstars\n\n\n    if (node.parsed === '**' || node.parsed === './**') {\n      this.output = '(?:' + this.output;\n      return this.emit(val + ')?', node);\n    } // negation\n\n\n    if (node.parsed === '!**' && this.options.nonegate !== true) {\n      return this.emit(val + '?\\\\b', node);\n    }\n\n    return this.emit(val, node);\n  })\n  /**\n   * Square brackets\n   */\n  .set('bracket', function (node) {\n    var close = node.close;\n    var open = !node.escaped ? '[' : '\\\\[';\n    var negated = node.negated;\n    var inner = node.inner;\n    var val = node.val;\n\n    if (node.escaped === true) {\n      inner = inner.replace(/\\\\?(\\W)/g, '\\\\$1');\n      negated = '';\n    }\n\n    if (inner === ']-') {\n      inner = '\\\\]\\\\-';\n    }\n\n    if (negated && inner.indexOf('.') === -1) {\n      inner += '.';\n    }\n\n    if (negated && inner.indexOf('/') === -1) {\n      inner += '/';\n    }\n\n    val = open + negated + inner + close;\n    return this.emit(val, node);\n  })\n  /**\n   * Square: \"[.]\" (only matches a single character in brackets)\n   */\n  .set('square', function (node) {\n    var val = (/^\\W/.test(node.val) ? '\\\\' : '') + node.val;\n    return this.emit(val, node);\n  })\n  /**\n   * Question mark: \"?\"\n   */\n  .set('qmark', function (node) {\n    var prev = this.prev(); // don't use \"slash\" variable so that we always avoid\n    // matching backslashes and slashes with a qmark\n\n    var val = '[^.\\\\\\\\/]';\n\n    if (this.options.dot || prev.type !== 'bos' && prev.type !== 'slash') {\n      val = '[^\\\\\\\\/]';\n    }\n\n    if (node.parsed.slice(-1) === '(') {\n      var ch = node.rest.charAt(0);\n\n      if (ch === '!' || ch === '=' || ch === ':') {\n        return this.emit(node.val, node);\n      }\n    }\n\n    if (node.val.length > 1) {\n      val += '{' + node.val.length + '}';\n    }\n\n    return this.emit(val, node);\n  })\n  /**\n   * Plus\n   */\n  .set('plus', function (node) {\n    var prev = node.parsed.slice(-1);\n\n    if (prev === ']' || prev === ')') {\n      return this.emit(node.val, node);\n    }\n\n    if (!this.output || /[?*+]/.test(ch) && node.parent.type !== 'bracket') {\n      return this.emit('\\\\+', node);\n    }\n\n    var ch = this.output.slice(-1);\n\n    if (/\\w/.test(ch) && !node.inside) {\n      return this.emit('+\\\\+?', node);\n    }\n\n    return this.emit('+', node);\n  })\n  /**\n   * globstar: '**'\n   */\n  .set('globstar', function (node, nodes, i) {\n    if (!this.output) {\n      this.state.leadingGlobstar = true;\n    }\n\n    var prev = this.prev();\n    var before = this.prev(2);\n    var next = this.next();\n    var after = this.next(2);\n    var type = prev.type;\n    var val = node.val;\n\n    if (prev.type === 'slash' && next.type === 'slash') {\n      if (before.type === 'text') {\n        this.output += '?';\n\n        if (after.type !== 'text') {\n          this.output += '\\\\b';\n        }\n      }\n    }\n\n    var parsed = node.parsed;\n\n    if (parsed.charAt(0) === '!') {\n      parsed = parsed.slice(1);\n    }\n\n    var isInside = node.isInside.paren || node.isInside.brace;\n\n    if (parsed && type !== 'slash' && type !== 'bos' && !isInside) {\n      val = star();\n    } else {\n      val = this.options.dot !== true ? '(?:(?!(?:[' + slash() + ']|^)\\\\.).)*?' : '(?:(?!(?:[' + slash() + ']|^)(?:\\\\.{1,2})($|[' + slash() + ']))(?!\\\\.{2}).)*?';\n    }\n\n    if ((type === 'slash' || type === 'bos') && this.options.dot !== true) {\n      val = '(?!\\\\.)' + val;\n    }\n\n    if (prev.type === 'slash' && next.type === 'slash' && before.type !== 'text') {\n      if (after.type === 'text' || after.type === 'star') {\n        node.addQmark = true;\n      }\n    }\n\n    if (this.options.capture) {\n      val = '(' + val + ')';\n    }\n\n    return this.emit(val, node);\n  })\n  /**\n   * Star: \"*\"\n   */\n  .set('star', function (node, nodes, i) {\n    var prior = nodes[i - 2] || {};\n    var prev = this.prev();\n    var next = this.next();\n    var type = prev.type;\n\n    function isStart(n) {\n      return n.type === 'bos' || n.type === 'slash';\n    }\n\n    if (this.output === '' && this.options.contains !== true) {\n      this.output = '(?![' + slash() + '])';\n    }\n\n    if (type === 'bracket' && this.options.bash === false) {\n      var str = next && next.type === 'bracket' ? star() : '*?';\n\n      if (!prev.nodes || prev.nodes[1].type !== 'posix') {\n        return this.emit(str, node);\n      }\n    }\n\n    var prefix = !this.dotfiles && type !== 'text' && type !== 'escape' ? this.options.dot ? '(?!(?:^|[' + slash() + '])\\\\.{1,2}(?:$|[' + slash() + ']))' : '(?!\\\\.)' : '';\n\n    if (isStart(prev) || isStart(prior) && type === 'not') {\n      if (prefix !== '(?!\\\\.)') {\n        prefix += '(?!(\\\\.{2}|\\\\.[' + slash() + ']))(?=.)';\n      } else {\n        prefix += '(?=.)';\n      }\n    } else if (prefix === '(?!\\\\.)') {\n      prefix = '';\n    }\n\n    if (prev.type === 'not' && prior.type === 'bos' && this.options.dot === true) {\n      this.output = '(?!\\\\.)' + this.output;\n    }\n\n    var output = prefix + star();\n\n    if (this.options.capture) {\n      output = '(' + output + ')';\n    }\n\n    return this.emit(output, node);\n  })\n  /**\n   * Text\n   */\n  .set('text', function (node) {\n    return this.emit(node.val, node);\n  })\n  /**\n   * End-of-string\n   */\n  .set('eos', function (node) {\n    var prev = this.prev();\n    var val = node.val;\n    this.output = '(?:\\\\.[' + slash() + '](?=.))?' + this.output;\n\n    if (this.state.metachar && prev.type !== 'qmark' && prev.type !== 'slash') {\n      val += this.options.contains ? '[' + slash() + ']?' : '(?:[' + slash() + ']|$)';\n    }\n\n    return this.emit(val, node);\n  });\n  /**\n   * Allow custom compilers to be passed on options\n   */\n\n  if (options && typeof options.compilers === 'function') {\n    options.compilers(nanomatch.compiler);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}