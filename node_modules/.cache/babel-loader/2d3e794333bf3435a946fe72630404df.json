{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar sortByIndex = function sortByIndex(a, b) {\n  return a.index - b.index;\n};\n\nvar sortByIndex2 = function sortByIndex2(a, b) {\n  return a.index2 - b.index2;\n};\n\nvar ChunkModuleIdRangePlugin = /*#__PURE__*/function () {\n  function ChunkModuleIdRangePlugin(options) {\n    _classCallCheck(this, ChunkModuleIdRangePlugin);\n\n    this.options = options;\n  }\n\n  _createClass(ChunkModuleIdRangePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"ChunkModuleIdRangePlugin\", function (compilation) {\n        compilation.hooks.moduleIds.tap(\"ChunkModuleIdRangePlugin\", function (modules) {\n          var chunk = compilation.chunks.find(function (chunk) {\n            return chunk.name === options.name;\n          });\n\n          if (!chunk) {\n            throw new Error(\"ChunkModuleIdRangePlugin: Chunk with name '\".concat(options.name, \"\\\"' was not found\"));\n          }\n\n          var chunkModules;\n\n          if (options.order) {\n            chunkModules = Array.from(chunk.modulesIterable);\n\n            switch (options.order) {\n              case \"index\":\n                chunkModules.sort(sortByIndex);\n                break;\n\n              case \"index2\":\n                chunkModules.sort(sortByIndex2);\n                break;\n\n              default:\n                throw new Error(\"ChunkModuleIdRangePlugin: unexpected value of order\");\n            }\n          } else {\n            chunkModules = modules.filter(function (m) {\n              return m.chunksIterable.has(chunk);\n            });\n          }\n\n          var currentId = options.start || 0;\n\n          for (var i = 0; i < chunkModules.length; i++) {\n            var m = chunkModules[i];\n\n            if (m.id === null) {\n              m.id = currentId++;\n            }\n\n            if (options.end && currentId > options.end) break;\n          }\n        });\n      });\n    }\n  }]);\n\n  return ChunkModuleIdRangePlugin;\n}();\n\nmodule.exports = ChunkModuleIdRangePlugin;","map":null,"metadata":{},"sourceType":"module"}