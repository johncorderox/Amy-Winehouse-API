{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"tapable\"),\n    SyncWaterfallHook = _require.SyncWaterfallHook;\n\nvar Template = require(\"../Template\");\n\nvar JsonpMainTemplatePlugin = /*#__PURE__*/function () {\n  function JsonpMainTemplatePlugin() {\n    _classCallCheck(this, JsonpMainTemplatePlugin);\n  }\n\n  _createClass(JsonpMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(mainTemplate) {\n      var needChunkOnDemandLoadingCode = function needChunkOnDemandLoadingCode(chunk) {\n        var _iterator = _createForOfIteratorHelper(chunk.groupsIterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunkGroup = _step.value;\n            if (chunkGroup.getNumberOfChildren() > 0) return true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return false;\n      };\n\n      var needChunkLoadingCode = function needChunkLoadingCode(chunk) {\n        var _iterator2 = _createForOfIteratorHelper(chunk.groupsIterable),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var chunkGroup = _step2.value;\n            if (chunkGroup.chunks.length > 1) return true;\n            if (chunkGroup.getNumberOfChildren() > 0) return true;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return false;\n      };\n\n      var needEntryDeferringCode = function needEntryDeferringCode(chunk) {\n        var _iterator3 = _createForOfIteratorHelper(chunk.groupsIterable),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var chunkGroup = _step3.value;\n            if (chunkGroup.chunks.length > 1) return true;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return false;\n      };\n\n      var needPrefetchingCode = function needPrefetchingCode(chunk) {\n        var allPrefetchChunks = chunk.getChildIdsByOrdersMap(true).prefetch;\n        return allPrefetchChunks && Object.keys(allPrefetchChunks).length;\n      }; // TODO webpack 5, no adding to .hooks, use WeakMap and static methods\n\n\n      [\"jsonpScript\", \"linkPreload\", \"linkPrefetch\"].forEach(function (hook) {\n        if (!mainTemplate.hooks[hook]) {\n          mainTemplate.hooks[hook] = new SyncWaterfallHook([\"source\", \"chunk\", \"hash\"]);\n        }\n      });\n\n      var getScriptSrcPath = function getScriptSrcPath(hash, chunk, chunkIdExpression) {\n        var chunkFilename = mainTemplate.outputOptions.chunkFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        return mainTemplate.getAssetPath(JSON.stringify(chunkFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          chunk: {\n            id: \"\\\" + \".concat(chunkIdExpression, \" + \\\"\"),\n            hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[\").concat(chunkIdExpression, \"] + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              var shortChunkHashMap = Object.create(null);\n\n              for (var _i = 0, _Object$keys = Object.keys(chunkMaps.hash); _i < _Object$keys.length; _i++) {\n                var chunkId = _Object$keys[_i];\n\n                if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[\").concat(chunkIdExpression, \"] + \\\"\");\n            },\n            name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[\").concat(chunkIdExpression, \"]||\").concat(chunkIdExpression, \") + \\\"\"),\n            contentHash: {\n              javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[\").concat(chunkIdExpression, \"] + \\\"\")\n            },\n            contentHashWithLength: {\n              javascript: function javascript(length) {\n                var shortContentHashMap = {};\n                var contentHash = chunkMaps.contentHash.javascript;\n\n                for (var _i2 = 0, _Object$keys2 = Object.keys(contentHash); _i2 < _Object$keys2.length; _i2++) {\n                  var chunkId = _Object$keys2[_i2];\n\n                  if (typeof contentHash[chunkId] === \"string\") {\n                    shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[\").concat(chunkIdExpression, \"] + \\\"\");\n              }\n            }\n          },\n          contentHashType: \"javascript\"\n        });\n      };\n\n      mainTemplate.hooks.localVars.tap(\"JsonpMainTemplatePlugin\", function (source, chunk, hash) {\n        var extraCode = [];\n\n        if (needChunkLoadingCode(chunk)) {\n          extraCode.push(\"\", \"// object to store loaded and loading chunks\", \"// undefined = chunk not loaded, null = chunk preloaded/prefetched\", \"// Promise = chunk loading, 0 = chunk loaded\", \"var installedChunks = {\", Template.indent(chunk.ids.map(function (id) {\n            return \"\".concat(JSON.stringify(id), \": 0\");\n          }).join(\",\\n\")), \"};\", \"\", needEntryDeferringCode(chunk) ? needPrefetchingCode(chunk) ? \"var deferredModules = [], deferredPrefetch = [];\" : \"var deferredModules = [];\" : \"\");\n        }\n\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          extraCode.push(\"\", \"// script path function\", \"function jsonpScriptSrc(chunkId) {\", Template.indent([\"return \".concat(mainTemplate.requireFn, \".p + \").concat(getScriptSrcPath(hash, chunk, \"chunkId\"))]), \"}\");\n        }\n\n        if (extraCode.length === 0) return source;\n        return Template.asString([source].concat(extraCode));\n      });\n      mainTemplate.hooks.jsonpScript.tap(\"JsonpMainTemplatePlugin\", function (_, chunk, hash) {\n        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n        var chunkLoadTimeout = mainTemplate.outputOptions.chunkLoadTimeout;\n        var jsonpScriptType = mainTemplate.outputOptions.jsonpScriptType;\n        return Template.asString([\"var script = document.createElement('script');\", \"var onScriptComplete;\", jsonpScriptType ? \"script.type = \".concat(JSON.stringify(jsonpScriptType), \";\") : \"\", \"script.charset = 'utf-8';\", \"script.timeout = \".concat(chunkLoadTimeout / 1000, \";\"), \"if (\".concat(mainTemplate.requireFn, \".nc) {\"), Template.indent(\"script.setAttribute(\\\"nonce\\\", \".concat(mainTemplate.requireFn, \".nc);\")), \"}\", \"script.src = jsonpScriptSrc(chunkId);\", crossOriginLoading ? Template.asString([\"if (script.src.indexOf(window.location.origin + '/') !== 0) {\", Template.indent(\"script.crossOrigin = \".concat(JSON.stringify(crossOriginLoading), \";\")), \"}\"]) : \"\", \"// create error before stack unwound to get useful stacktrace later\", \"var error = new Error();\", \"onScriptComplete = function (event) {\", Template.indent([\"// avoid mem leaks in IE.\", \"script.onerror = script.onload = null;\", \"clearTimeout(timeout);\", \"var chunk = installedChunks[chunkId];\", \"if(chunk !== 0) {\", Template.indent([\"if(chunk) {\", Template.indent([\"var errorType = event && (event.type === 'load' ? 'missing' : event.type);\", \"var realSrc = event && event.target && event.target.src;\", \"error.message = 'Loading chunk ' + chunkId + ' failed.\\\\n(' + errorType + ': ' + realSrc + ')';\", \"error.name = 'ChunkLoadError';\", \"error.type = errorType;\", \"error.request = realSrc;\", \"chunk[1](error);\"]), \"}\", \"installedChunks[chunkId] = undefined;\"]), \"}\"]), \"};\", \"var timeout = setTimeout(function(){\", Template.indent([\"onScriptComplete({ type: 'timeout', target: script });\"]), \"}, \".concat(chunkLoadTimeout, \");\"), \"script.onerror = script.onload = onScriptComplete;\"]);\n      });\n      mainTemplate.hooks.linkPreload.tap(\"JsonpMainTemplatePlugin\", function (_, chunk, hash) {\n        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n        var jsonpScriptType = mainTemplate.outputOptions.jsonpScriptType;\n        return Template.asString([\"var link = document.createElement('link');\", jsonpScriptType ? \"link.type = \".concat(JSON.stringify(jsonpScriptType), \";\") : \"\", \"link.charset = 'utf-8';\", \"if (\".concat(mainTemplate.requireFn, \".nc) {\"), Template.indent(\"link.setAttribute(\\\"nonce\\\", \".concat(mainTemplate.requireFn, \".nc);\")), \"}\", 'link.rel = \"preload\";', 'link.as = \"script\";', \"link.href = jsonpScriptSrc(chunkId);\", crossOriginLoading ? Template.asString([\"if (link.href.indexOf(window.location.origin + '/') !== 0) {\", Template.indent(\"link.crossOrigin = \".concat(JSON.stringify(crossOriginLoading), \";\")), \"}\"]) : \"\"]);\n      });\n      mainTemplate.hooks.linkPrefetch.tap(\"JsonpMainTemplatePlugin\", function (_, chunk, hash) {\n        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n        return Template.asString([\"var link = document.createElement('link');\", crossOriginLoading ? \"link.crossOrigin = \".concat(JSON.stringify(crossOriginLoading), \";\") : \"\", \"if (\".concat(mainTemplate.requireFn, \".nc) {\"), Template.indent(\"link.setAttribute(\\\"nonce\\\", \".concat(mainTemplate.requireFn, \".nc);\")), \"}\", 'link.rel = \"prefetch\";', 'link.as = \"script\";', \"link.href = jsonpScriptSrc(chunkId);\"]);\n      });\n      mainTemplate.hooks.requireEnsure.tap(\"JsonpMainTemplatePlugin load\", function (source, chunk, hash) {\n        return Template.asString([source, \"\", \"// JSONP chunk loading for javascript\", \"\", \"var installedChunkData = installedChunks[chunkId];\", 'if(installedChunkData !== 0) { // 0 means \"already installed\".', Template.indent([\"\", '// a Promise means \"currently loading\".', \"if(installedChunkData) {\", Template.indent([\"promises.push(installedChunkData[2]);\"]), \"} else {\", Template.indent([\"// setup Promise in chunk cache\", \"var promise = new Promise(function(resolve, reject) {\", Template.indent([\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\"]), \"});\", \"promises.push(installedChunkData[2] = promise);\", \"\", \"// start chunk loading\", mainTemplate.hooks.jsonpScript.call(\"\", chunk, hash), \"document.head.appendChild(script);\"]), \"}\"]), \"}\"]);\n      });\n      mainTemplate.hooks.requireEnsure.tap({\n        name: \"JsonpMainTemplatePlugin preload\",\n        stage: 10\n      }, function (source, chunk, hash) {\n        var chunkMap = chunk.getChildIdsByOrdersMap().preload;\n        if (!chunkMap || Object.keys(chunkMap).length === 0) return source;\n        return Template.asString([source, \"\", \"// chunk preloadng for javascript\", \"\", \"var chunkPreloadMap = \".concat(JSON.stringify(chunkMap, null, \"\\t\"), \";\"), \"\", \"var chunkPreloadData = chunkPreloadMap[chunkId];\", \"if(chunkPreloadData) {\", Template.indent([\"chunkPreloadData.forEach(function(chunkId) {\", Template.indent([\"if(installedChunks[chunkId] === undefined) {\", Template.indent([\"installedChunks[chunkId] = null;\", mainTemplate.hooks.linkPreload.call(\"\", chunk, hash), \"document.head.appendChild(link);\"]), \"}\"]), \"});\"]), \"}\"]);\n      });\n      mainTemplate.hooks.requireExtensions.tap(\"JsonpMainTemplatePlugin\", function (source, chunk) {\n        if (!needChunkOnDemandLoadingCode(chunk)) return source;\n        return Template.asString([source, \"\", \"// on error function for async loading\", \"\".concat(mainTemplate.requireFn, \".oe = function(err) { console.error(err); throw err; };\")]);\n      });\n      mainTemplate.hooks.bootstrap.tap(\"JsonpMainTemplatePlugin\", function (source, chunk, hash) {\n        if (needChunkLoadingCode(chunk)) {\n          var withDefer = needEntryDeferringCode(chunk);\n          var withPrefetch = needPrefetchingCode(chunk);\n          return Template.asString([source, \"\", \"// install a JSONP callback for chunk loading\", \"function webpackJsonpCallback(data) {\", Template.indent([\"var chunkIds = data[0];\", \"var moreModules = data[1];\", withDefer ? \"var executeModules = data[2];\" : \"\", withPrefetch ? \"var prefetchChunks = data[3] || [];\" : \"\", '// add \"moreModules\" to the modules object,', '// then flag all \"chunkIds\" as loaded and fire callback', \"var moduleId, chunkId, i = 0, resolves = [];\", \"for(;i < chunkIds.length; i++) {\", Template.indent([\"chunkId = chunkIds[i];\", \"if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\", Template.indent(\"resolves.push(installedChunks[chunkId][0]);\"), \"}\", \"installedChunks[chunkId] = 0;\"]), \"}\", \"for(moduleId in moreModules) {\", Template.indent([\"if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\"]), \"}\", \"if(parentJsonpFunction) parentJsonpFunction(data);\", withPrefetch ? withDefer ? \"deferredPrefetch.push.apply(deferredPrefetch, prefetchChunks);\" : Template.asString([\"// chunk prefetching for javascript\", \"prefetchChunks.forEach(function(chunkId) {\", Template.indent([\"if(installedChunks[chunkId] === undefined) {\", Template.indent([\"installedChunks[chunkId] = null;\", mainTemplate.hooks.linkPrefetch.call(\"\", chunk, hash), \"document.head.appendChild(link);\"]), \"}\"]), \"});\"]) : \"\", \"while(resolves.length) {\", Template.indent(\"resolves.shift()();\"), \"}\", withDefer ? Template.asString([\"\", \"// add entry modules from loaded chunk to deferred list\", \"deferredModules.push.apply(deferredModules, executeModules || []);\", \"\", \"// run deferred modules when all chunks ready\", \"return checkDeferredModules();\"]) : \"\"]), \"};\", withDefer ? Template.asString([\"function checkDeferredModules() {\", Template.indent([\"var result;\", \"for(var i = 0; i < deferredModules.length; i++) {\", Template.indent([\"var deferredModule = deferredModules[i];\", \"var fulfilled = true;\", \"for(var j = 1; j < deferredModule.length; j++) {\", Template.indent([\"var depId = deferredModule[j];\", \"if(installedChunks[depId] !== 0) fulfilled = false;\"]), \"}\", \"if(fulfilled) {\", Template.indent([\"deferredModules.splice(i--, 1);\", \"result = \" + mainTemplate.requireFn + \"(\" + mainTemplate.requireFn + \".s = deferredModule[0]);\"]), \"}\"]), \"}\", withPrefetch ? Template.asString([\"if(deferredModules.length === 0) {\", Template.indent([\"// chunk prefetching for javascript\", \"deferredPrefetch.forEach(function(chunkId) {\", Template.indent([\"if(installedChunks[chunkId] === undefined) {\", Template.indent([\"installedChunks[chunkId] = null;\", mainTemplate.hooks.linkPrefetch.call(\"\", chunk, hash), \"document.head.appendChild(link);\"]), \"}\"]), \"});\", \"deferredPrefetch.length = 0;\"]), \"}\"]) : \"\", \"return result;\"]), \"}\"]) : \"\"]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.beforeStartup.tap(\"JsonpMainTemplatePlugin\", function (source, chunk, hash) {\n        if (needChunkLoadingCode(chunk)) {\n          var jsonpFunction = mainTemplate.outputOptions.jsonpFunction;\n          var globalObject = mainTemplate.outputOptions.globalObject;\n          return Template.asString([\"var jsonpArray = \".concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] = \").concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] || [];\"), \"var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\", \"jsonpArray.push = webpackJsonpCallback;\", \"jsonpArray = jsonpArray.slice();\", \"for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\", \"var parentJsonpFunction = oldJsonpFunction;\", \"\", source]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.afterStartup.tap(\"JsonpMainTemplatePlugin\", function (source, chunk, hash) {\n        var prefetchChunks = chunk.getChildIdsByOrders().prefetch;\n\n        if (needChunkLoadingCode(chunk) && prefetchChunks && prefetchChunks.length) {\n          return Template.asString([source, \"webpackJsonpCallback([[], {}, 0, \".concat(JSON.stringify(prefetchChunks), \"]);\")]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.startup.tap(\"JsonpMainTemplatePlugin\", function (source, chunk, hash) {\n        if (needEntryDeferringCode(chunk)) {\n          if (chunk.hasEntryModule()) {\n            var entries = [chunk.entryModule].filter(Boolean).map(function (m) {\n              return [m.id].concat(Array.from(chunk.groupsIterable)[0].chunks.filter(function (c) {\n                return c !== chunk;\n              }).map(function (c) {\n                return c.id;\n              }));\n            });\n            return Template.asString([\"// add entry module to deferred list\", \"deferredModules.push(\".concat(entries.map(function (e) {\n              return JSON.stringify(e);\n            }).join(\", \"), \");\"), \"// run deferred modules when ready\", \"return checkDeferredModules();\"]);\n          } else {\n            return Template.asString([\"// run deferred modules from other chunks\", \"checkDeferredModules();\"]);\n          }\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.hotBootstrap.tap(\"JsonpMainTemplatePlugin\", function (source, chunk, hash) {\n        var globalObject = mainTemplate.outputOptions.globalObject;\n        var hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n        var hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n        var hotUpdateFunction = mainTemplate.outputOptions.hotUpdateFunction;\n        var currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          chunk: {\n            id: '\" + chunkId + \"'\n          }\n        });\n        var currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          }\n        });\n        var runtimeSource = Template.getFunctionContent(require(\"./JsonpMainTemplate.runtime\")).replace(/\\/\\/\\$semicolon/g, \";\").replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$crossOriginLoading\\$/g, crossOriginLoading ? JSON.stringify(crossOriginLoading) : \"null\").replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename).replace(/\\$hash\\$/g, JSON.stringify(hash));\n        return \"\".concat(source, \"\\nfunction hotDisposeChunk(chunkId) {\\n\\tdelete installedChunks[chunkId];\\n}\\nvar parentHotUpdateCallback = \").concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"];\\n\").concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"] = \").concat(runtimeSource);\n      });\n      mainTemplate.hooks.hash.tap(\"JsonpMainTemplatePlugin\", function (hash) {\n        hash.update(\"jsonp\");\n        hash.update(\"6\");\n      });\n    }\n  }]);\n\n  return JsonpMainTemplatePlugin;\n}();\n\nmodule.exports = JsonpMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}