{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _require = require(\"webpack-sources\"),\n    OriginalSource = _require.OriginalSource,\n    RawSource = _require.RawSource;\n\nvar Module = require(\"./Module\");\n\nvar WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\n\nvar Template = require(\"./Template\");\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n\nvar ExternalModule = /*#__PURE__*/function (_Module) {\n  _inherits(ExternalModule, _Module);\n\n  var _super = _createSuper(ExternalModule);\n\n  function ExternalModule(request, type, userRequest) {\n    var _this;\n\n    _classCallCheck(this, ExternalModule);\n\n    _this = _super.call(this, \"javascript/dynamic\", null); // Info from Factory\n\n    _this.request = request;\n    _this.externalType = type;\n    _this.userRequest = userRequest;\n    _this.external = true;\n    return _this;\n  }\n\n  _createClass(ExternalModule, [{\n    key: \"libIdent\",\n    value: function libIdent() {\n      return this.userRequest;\n    }\n  }, {\n    key: \"chunkCondition\",\n    value: function chunkCondition(chunk) {\n      return chunk.hasEntryModule();\n    }\n  }, {\n    key: \"identifier\",\n    value: function identifier() {\n      return \"external \" + JSON.stringify(this.request);\n    }\n  }, {\n    key: \"readableIdentifier\",\n    value: function readableIdentifier() {\n      return \"external \" + JSON.stringify(this.request);\n    }\n  }, {\n    key: \"needRebuild\",\n    value: function needRebuild() {\n      return false;\n    }\n  }, {\n    key: \"build\",\n    value: function build(options, compilation, resolver, fs, callback) {\n      this.built = true;\n      this.buildMeta = {};\n      this.buildInfo = {};\n      callback();\n    }\n  }, {\n    key: \"getSourceForGlobalVariableExternal\",\n    value: function getSourceForGlobalVariableExternal(variableName, type) {\n      if (!Array.isArray(variableName)) {\n        // make it an array as the look up works the same basically\n        variableName = [variableName];\n      } // needed for e.g. window[\"some\"][\"thing\"]\n\n\n      var objectLookup = variableName.map(function (r) {\n        return \"[\".concat(JSON.stringify(r), \"]\");\n      }).join(\"\");\n      return \"(function() { module.exports = \".concat(type).concat(objectLookup, \"; }());\");\n    }\n  }, {\n    key: \"getSourceForCommonJsExternal\",\n    value: function getSourceForCommonJsExternal(moduleAndSpecifiers) {\n      if (!Array.isArray(moduleAndSpecifiers)) {\n        return \"module.exports = require(\".concat(JSON.stringify(moduleAndSpecifiers), \");\");\n      }\n\n      var moduleName = moduleAndSpecifiers[0];\n      var objectLookup = moduleAndSpecifiers.slice(1).map(function (r) {\n        return \"[\".concat(JSON.stringify(r), \"]\");\n      }).join(\"\");\n      return \"module.exports = require(\".concat(JSON.stringify(moduleName), \")\").concat(objectLookup, \";\");\n    }\n  }, {\n    key: \"checkExternalVariable\",\n    value: function checkExternalVariable(variableToCheck, request) {\n      return \"if(typeof \".concat(variableToCheck, \" === 'undefined') {\").concat(WebpackMissingModule.moduleCode(request), \"}\\n\");\n    }\n  }, {\n    key: \"getSourceForAmdOrUmdExternal\",\n    value: function getSourceForAmdOrUmdExternal(id, optional, request) {\n      var externalVariable = \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(id)), \"__\");\n      var missingModuleError = optional ? this.checkExternalVariable(externalVariable, request) : \"\";\n      return \"\".concat(missingModuleError, \"module.exports = \").concat(externalVariable, \";\");\n    }\n  }, {\n    key: \"getSourceForDefaultCase\",\n    value: function getSourceForDefaultCase(optional, request) {\n      if (!Array.isArray(request)) {\n        // make it an array as the look up works the same basically\n        request = [request];\n      }\n\n      var variableName = request[0];\n      var missingModuleError = optional ? this.checkExternalVariable(variableName, request.join(\".\")) : \"\";\n      var objectLookup = request.slice(1).map(function (r) {\n        return \"[\".concat(JSON.stringify(r), \"]\");\n      }).join(\"\");\n      return \"\".concat(missingModuleError, \"module.exports = \").concat(variableName).concat(objectLookup, \";\");\n    }\n  }, {\n    key: \"getSourceString\",\n    value: function getSourceString(runtime) {\n      var request = _typeof(this.request) === \"object\" && !Array.isArray(this.request) ? this.request[this.externalType] : this.request;\n\n      switch (this.externalType) {\n        case \"this\":\n        case \"window\":\n        case \"self\":\n          return this.getSourceForGlobalVariableExternal(request, this.externalType);\n\n        case \"global\":\n          return this.getSourceForGlobalVariableExternal(request, runtime.outputOptions.globalObject);\n\n        case \"commonjs\":\n        case \"commonjs2\":\n          return this.getSourceForCommonJsExternal(request);\n\n        case \"amd\":\n        case \"amd-require\":\n        case \"umd\":\n        case \"umd2\":\n        case \"system\":\n          return this.getSourceForAmdOrUmdExternal(this.id, this.optional, request);\n\n        default:\n          return this.getSourceForDefaultCase(this.optional, request);\n      }\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource(sourceString) {\n      if (this.useSourceMap) {\n        return new OriginalSource(sourceString, this.identifier());\n      }\n\n      return new RawSource(sourceString);\n    }\n  }, {\n    key: \"source\",\n    value: function source(dependencyTemplates, runtime) {\n      return this.getSource(this.getSourceString(runtime));\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return 42;\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this.externalType);\n      hash.update(JSON.stringify(this.request));\n      hash.update(JSON.stringify(Boolean(this.optional)));\n\n      _get(_getPrototypeOf(ExternalModule.prototype), \"updateHash\", this).call(this, hash);\n    }\n  }]);\n\n  return ExternalModule;\n}(Module);\n\nmodule.exports = ExternalModule;","map":null,"metadata":{},"sourceType":"module"}