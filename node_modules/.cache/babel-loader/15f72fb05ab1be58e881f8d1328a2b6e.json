{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _dotenvDefaults = _interopRequireDefault(require(\"dotenv-defaults\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _webpack = require(\"webpack\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // Mostly taken from here: https://github.com/motdotla/dotenv-expand/blob/master/lib/main.js#L4\n\n\nvar interpolate = function interpolate(env, vars) {\n  var matches = env.match(/\\$([a-zA-Z0-9_]+)|\\${([a-zA-Z0-9_]+)}/g) || [];\n  matches.forEach(function (match) {\n    var key = match.replace(/\\$|{|}/g, '');\n    var variable = vars[key] || '';\n    variable = interpolate(variable, vars);\n    env = env.replace(match, variable);\n  });\n  return env;\n};\n\nvar isMainThreadElectron = function isMainThreadElectron(target) {\n  return target.startsWith('electron') && target.endsWith('main');\n};\n\nvar Dotenv = /*#__PURE__*/function () {\n  /**\n   * The dotenv-webpack plugin.\n   * @param {Object} options - The parameters.\n   * @param {String} [options.path=./.env] - The location of the environment variable.\n   * @param {Boolean|String} [options.safe=false] - If false ignore safe-mode, if true load `'./.env.example'`, if a string load that file as the sample.\n   * @param {Boolean} [options.systemvars=false] - If true, load system environment variables.\n   * @param {Boolean} [options.silent=false] - If true, suppress warnings, if false, display warnings.\n   * @returns {webpack.DefinePlugin}\n   */\n  function Dotenv() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Dotenv);\n\n    this.config = Object.assign({}, {\n      path: './.env'\n    }, config);\n  }\n\n  _createClass(Dotenv, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _compiler$options$tar;\n\n      var variables = this.gatherVariables();\n      var target = (_compiler$options$tar = compiler.options.target) !== null && _compiler$options$tar !== void 0 ? _compiler$options$tar : 'web';\n      var version = compiler.webpack && compiler.webpack.version || '4';\n      var data = this.formatData({\n        variables: variables,\n        target: target,\n        version: version\n      });\n      new _webpack.DefinePlugin(data).apply(compiler);\n    }\n  }, {\n    key: \"gatherVariables\",\n    value: function gatherVariables() {\n      var _this$config = this.config,\n          safe = _this$config.safe,\n          allowEmptyValues = _this$config.allowEmptyValues;\n      var vars = this.initializeVars();\n\n      var _this$getEnvs = this.getEnvs(),\n          env = _this$getEnvs.env,\n          blueprint = _this$getEnvs.blueprint;\n\n      Object.keys(blueprint).forEach(function (key) {\n        var value = Object.prototype.hasOwnProperty.call(vars, key) ? vars[key] : env[key];\n        var isMissing = typeof value === 'undefined' || value === null || !allowEmptyValues && value === '';\n\n        if (safe && isMissing) {\n          throw new Error(\"Missing environment variable: \".concat(key));\n        } else {\n          vars[key] = value;\n        }\n      }); // add the leftovers\n\n      if (safe) {\n        Object.keys(env).forEach(function (key) {\n          if (!Object.prototype.hasOwnProperty.call(vars, key)) {\n            vars[key] = env[key];\n          }\n        });\n      }\n\n      return vars;\n    }\n  }, {\n    key: \"initializeVars\",\n    value: function initializeVars() {\n      return this.config.systemvars ? Object.assign({}, process.env) : {};\n    }\n  }, {\n    key: \"getEnvs\",\n    value: function getEnvs() {\n      var _this$config2 = this.config,\n          path = _this$config2.path,\n          silent = _this$config2.silent,\n          safe = _this$config2.safe;\n\n      var env = _dotenvDefaults[\"default\"].parse(this.loadFile({\n        file: path,\n        silent: silent\n      }), this.getDefaults());\n\n      var blueprint = env;\n\n      if (safe) {\n        var file = './.env.example';\n\n        if (safe !== true) {\n          file = safe;\n        }\n\n        blueprint = _dotenvDefaults[\"default\"].parse(this.loadFile({\n          file: file,\n          silent: silent\n        }));\n      }\n\n      return {\n        env: env,\n        blueprint: blueprint\n      };\n    }\n  }, {\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      var _this$config3 = this.config,\n          silent = _this$config3.silent,\n          defaults = _this$config3.defaults;\n\n      if (defaults) {\n        return this.loadFile({\n          file: defaults === true ? './.env.defaults' : defaults,\n          silent: silent\n        });\n      }\n\n      return '';\n    }\n  }, {\n    key: \"formatData\",\n    value: function formatData(_ref) {\n      var _ref$variables = _ref.variables,\n          variables = _ref$variables === void 0 ? {} : _ref$variables,\n          target = _ref.target,\n          version = _ref.version;\n      var expand = this.config.expand;\n      var formatted = Object.keys(variables).reduce(function (obj, key) {\n        var v = variables[key];\n        var vKey = \"process.env.\".concat(key);\n        var vValue;\n\n        if (expand) {\n          if (v.substring(0, 2) === '\\\\$') {\n            vValue = v.substring(1);\n          } else if (v.indexOf('\\\\$') > 0) {\n            vValue = v.replace(/\\\\\\$/g, '$');\n          } else {\n            vValue = interpolate(v, variables);\n          }\n        } else {\n          vValue = v;\n        }\n\n        obj[vKey] = JSON.stringify(vValue);\n        return obj;\n      }, {}); // We have to stub any remaining `process.env`s due to Webpack 5 not polyfilling it anymore\n      // https://github.com/mrsteele/dotenv-webpack/issues/240#issuecomment-710231534\n      // However, if someone targets Node or Electron `process.env` still exists, and should therefore be kept\n      // https://webpack.js.org/configuration/target\n\n      if (this.shouldStub({\n        target: target,\n        version: version\n      })) {\n        // Results in `\"MISSING_ENV_VAR\".NAME` which is valid JS\n        formatted['process.env'] = '\"MISSING_ENV_VAR\"';\n      }\n\n      return formatted;\n    }\n  }, {\n    key: \"shouldStub\",\n    value: function shouldStub(_ref2) {\n      var _this = this;\n\n      var targetInput = _ref2.target,\n          version = _ref2.version;\n\n      if (!version.startsWith('5')) {\n        return false;\n      }\n\n      var targets = Array.isArray(targetInput) ? targetInput : [targetInput];\n      return targets.every(function (target) {\n        return (// If we're not configured to never stub\n          _this.config.ignoreStub !== true && ( // And\n          // We are configured to always stub\n          _this.config.ignoreStub === false || // Or if we should according to the target\n          !target.includes('node') && !isMainThreadElectron(target))\n        );\n      });\n    }\n    /**\n     * Load a file.\n     * @param {String} config.file - The file to load.\n     * @param {Boolean} config.silent - If true, suppress warnings, if false, display warnings.\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"loadFile\",\n    value: function loadFile(_ref3) {\n      var file = _ref3.file,\n          silent = _ref3.silent;\n\n      try {\n        return _fs[\"default\"].readFileSync(file, 'utf8');\n      } catch (err) {\n        this.warn(\"Failed to load \".concat(file, \".\"), silent);\n        return {};\n      }\n    }\n    /**\n     * Displays a console message if 'silent' is falsey\n     * @param {String} msg - The message.\n     * @param {Boolean} silent - If true, display the message, if false, suppress the message.\n     */\n\n  }, {\n    key: \"warn\",\n    value: function warn(msg, silent) {\n      !silent && console.warn(msg);\n    }\n  }]);\n\n  return Dotenv;\n}();\n\nvar _default = Dotenv;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}