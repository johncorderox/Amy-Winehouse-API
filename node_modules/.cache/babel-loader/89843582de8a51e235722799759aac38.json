{"ast":null,"code":"'use strict';\n\nvar isExtendable = require('is-extendable');\n\nvar forIn = require('for-in');\n\nfunction mixinDeep(target, objects) {\n  var len = arguments.length,\n      i = 0;\n\n  while (++i < len) {\n    var obj = arguments[i];\n\n    if (isObject(obj)) {\n      forIn(obj, copy, target);\n    }\n  }\n\n  return target;\n}\n/**\n * Copy properties from the source object to the\n * target object.\n *\n * @param  {*} `val`\n * @param  {String} `key`\n */\n\n\nfunction copy(val, key) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  var obj = this[key];\n\n  if (isObject(val) && isObject(obj)) {\n    mixinDeep(obj, val);\n  } else {\n    this[key] = val;\n  }\n}\n/**\n * Returns true if `val` is an object or function.\n *\n * @param  {any} val\n * @return {Boolean}\n */\n\n\nfunction isObject(val) {\n  return isExtendable(val) && !Array.isArray(val);\n}\n/**\n * Returns true if `key` is a valid key to use when extending objects.\n *\n * @param  {String} `key`\n * @return {Boolean}\n */\n\n\nfunction isValidKey(key) {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n}\n\n;\n/**\n * Expose `mixinDeep`\n */\n\nmodule.exports = mixinDeep;","map":null,"metadata":{},"sourceType":"module"}