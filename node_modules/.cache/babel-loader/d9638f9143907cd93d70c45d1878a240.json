{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar RequireContextDependency = require(\"./RequireContextDependency\");\n\nvar ContextElementDependency = require(\"./ContextElementDependency\");\n\nvar RequireContextDependencyParserPlugin = require(\"./RequireContextDependencyParserPlugin\");\n\nvar RequireContextPlugin = /*#__PURE__*/function () {\n  function RequireContextPlugin(modulesDirectories, extensions, mainFiles) {\n    _classCallCheck(this, RequireContextPlugin);\n\n    if (!Array.isArray(modulesDirectories)) {\n      throw new Error(\"modulesDirectories must be an array\");\n    }\n\n    if (!Array.isArray(extensions)) {\n      throw new Error(\"extensions must be an array\");\n    }\n\n    this.modulesDirectories = modulesDirectories;\n    this.extensions = extensions;\n    this.mainFiles = mainFiles;\n  }\n\n  _createClass(RequireContextPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"RequireContextPlugin\", function (compilation, _ref) {\n        var contextModuleFactory = _ref.contextModuleFactory,\n            normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(RequireContextDependency, contextModuleFactory);\n        compilation.dependencyTemplates.set(RequireContextDependency, new RequireContextDependency.Template());\n        compilation.dependencyFactories.set(ContextElementDependency, normalModuleFactory);\n\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.requireContext !== undefined && !parserOptions.requireContext) return;\n          new RequireContextDependencyParserPlugin().apply(parser);\n        };\n\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/auto\").tap(\"RequireContextPlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/dynamic\").tap(\"RequireContextPlugin\", handler);\n        contextModuleFactory.hooks.alternatives.tap(\"RequireContextPlugin\", function (items) {\n          if (items.length === 0) return items;\n          return items.map(function (obj) {\n            return _this.extensions.filter(function (ext) {\n              var l = obj.request.length;\n              return l > ext.length && obj.request.substr(l - ext.length, l) === ext;\n            }).map(function (ext) {\n              var l = obj.request.length;\n              return {\n                context: obj.context,\n                request: obj.request.substr(0, l - ext.length)\n              };\n            }).concat(obj);\n          }).reduce(function (a, b) {\n            return a.concat(b);\n          }, []);\n        });\n        contextModuleFactory.hooks.alternatives.tap(\"RequireContextPlugin\", function (items) {\n          if (items.length === 0) return items;\n          return items.map(function (obj) {\n            return _this.mainFiles.filter(function (mainFile) {\n              var l = obj.request.length;\n              return l > mainFile.length + 1 && obj.request.substr(l - mainFile.length - 1, l) === \"/\" + mainFile;\n            }).map(function (mainFile) {\n              var l = obj.request.length;\n              return [{\n                context: obj.context,\n                request: obj.request.substr(0, l - mainFile.length)\n              }, {\n                context: obj.context,\n                request: obj.request.substr(0, l - mainFile.length - 1)\n              }];\n            }).reduce(function (a, b) {\n              return a.concat(b);\n            }, []).concat(obj);\n          }).reduce(function (a, b) {\n            return a.concat(b);\n          }, []);\n        });\n        contextModuleFactory.hooks.alternatives.tap(\"RequireContextPlugin\", function (items) {\n          if (items.length === 0) return items;\n          return items.map(function (obj) {\n            for (var i = 0; i < _this.modulesDirectories.length; i++) {\n              var dir = _this.modulesDirectories[i];\n              var idx = obj.request.indexOf(\"./\" + dir + \"/\");\n\n              if (idx === 0) {\n                obj.request = obj.request.slice(dir.length + 3);\n                break;\n              }\n            }\n\n            return obj;\n          });\n        });\n      });\n    }\n  }]);\n\n  return RequireContextPlugin;\n}();\n\nmodule.exports = RequireContextPlugin;","map":null,"metadata":{},"sourceType":"module"}