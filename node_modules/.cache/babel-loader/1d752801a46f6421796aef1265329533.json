{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = function generate_switch(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $ifPassed = 'ifPassed' + it.level,\n      $currentBaseId = $it.baseId,\n      $shouldContinue;\n  out += 'var ' + $ifPassed + ';';\n  var arr1 = $schema;\n\n  if (arr1) {\n    var $sch,\n        $caseIndex = -1,\n        l1 = arr1.length - 1;\n\n    while ($caseIndex < l1) {\n      $sch = arr1[$caseIndex += 1];\n\n      if ($caseIndex && !$shouldContinue) {\n        out += ' if (!' + $ifPassed + ') { ';\n        $closingBraces += '}';\n      }\n\n      if ($sch[\"if\"] && (it.opts.strictKeywords ? _typeof($sch[\"if\"]) == 'object' && Object.keys($sch[\"if\"]).length > 0 : it.util.schemaHasRules($sch[\"if\"], it.RULES.all))) {\n        out += ' var ' + $errs + ' = errors;   ';\n        var $wasComposite = it.compositeRule;\n        it.compositeRule = $it.compositeRule = true;\n        $it.createErrors = false;\n        $it.schema = $sch[\"if\"];\n        $it.schemaPath = $schemaPath + '[' + $caseIndex + '].if';\n        $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/if';\n        out += '  ' + it.validate($it) + ' ';\n        $it.baseId = $currentBaseId;\n        $it.createErrors = true;\n        it.compositeRule = $it.compositeRule = $wasComposite;\n        out += ' ' + $ifPassed + ' = ' + $nextValid + '; if (' + $ifPassed + ') {  ';\n\n        if (typeof $sch.then == 'boolean') {\n          if ($sch.then === false) {\n            var $$outStack = $$outStack || [];\n            $$outStack.push(out);\n            out = '';\n            /* istanbul ignore else */\n\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + 'switch' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';\n\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'should pass \"switch\" keyword validation\\' ';\n              }\n\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n              }\n\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n\n            var __err = out;\n            out = $$outStack.pop();\n\n            if (!it.compositeRule && $breakOnError) {\n              /* istanbul ignore if */\n              if (it.async) {\n                out += ' throw new ValidationError([' + __err + ']); ';\n              } else {\n                out += ' validate.errors = [' + __err + ']; return false; ';\n              }\n            } else {\n              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n            }\n          }\n\n          out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';\n        } else {\n          $it.schema = $sch.then;\n          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';\n          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';\n          out += '  ' + it.validate($it) + ' ';\n          $it.baseId = $currentBaseId;\n        }\n\n        out += '  } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } } ';\n      } else {\n        out += ' ' + $ifPassed + ' = true;  ';\n\n        if (typeof $sch.then == 'boolean') {\n          if ($sch.then === false) {\n            var $$outStack = $$outStack || [];\n            $$outStack.push(out);\n            out = '';\n            /* istanbul ignore else */\n\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + 'switch' + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';\n\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'should pass \"switch\" keyword validation\\' ';\n              }\n\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n              }\n\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n\n            var __err = out;\n            out = $$outStack.pop();\n\n            if (!it.compositeRule && $breakOnError) {\n              /* istanbul ignore if */\n              if (it.async) {\n                out += ' throw new ValidationError([' + __err + ']); ';\n              } else {\n                out += ' validate.errors = [' + __err + ']; return false; ';\n              }\n            } else {\n              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n            }\n          }\n\n          out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';\n        } else {\n          $it.schema = $sch.then;\n          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';\n          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';\n          out += '  ' + it.validate($it) + ' ';\n          $it.baseId = $currentBaseId;\n        }\n      }\n\n      $shouldContinue = $sch[\"continue\"];\n    }\n  }\n\n  out += '' + $closingBraces + 'var ' + $valid + ' = ' + $nextValid + ';';\n  return out;\n};","map":null,"metadata":{},"sourceType":"module"}