{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n\nvar ParserHelpers = require(\"./ParserHelpers\");\n\nvar NullFactory = require(\"./NullFactory\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Parser\")} Parser */\n\n/** @typedef {null|undefined|RegExp|Function|string|number} CodeValuePrimitive */\n\n/** @typedef {CodeValuePrimitive|Record<string, CodeValuePrimitive>|RuntimeValue} CodeValue */\n\n\nvar RuntimeValue = /*#__PURE__*/function () {\n  function RuntimeValue(fn, fileDependencies) {\n    _classCallCheck(this, RuntimeValue);\n\n    this.fn = fn;\n    this.fileDependencies = fileDependencies || [];\n  }\n\n  _createClass(RuntimeValue, [{\n    key: \"exec\",\n    value: function exec(parser) {\n      if (this.fileDependencies === true) {\n        parser.state.module.buildInfo.cacheable = false;\n      } else {\n        var _iterator = _createForOfIteratorHelper(this.fileDependencies),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var fileDependency = _step.value;\n            parser.state.module.buildInfo.fileDependencies.add(fileDependency);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return this.fn({\n        module: parser.state.module\n      });\n    }\n  }]);\n\n  return RuntimeValue;\n}();\n\nvar stringifyObj = function stringifyObj(obj, parser) {\n  return \"Object({\" + Object.keys(obj).map(function (key) {\n    var code = obj[key];\n    return JSON.stringify(key) + \":\" + toCode(code, parser);\n  }).join(\",\") + \"})\";\n};\n/**\n * Convert code to a string that evaluates\n * @param {CodeValue} code Code to evaluate\n * @param {Parser} parser Parser\n * @returns {string} code converted to string that evaluates\n */\n\n\nvar toCode = function toCode(code, parser) {\n  if (code === null) {\n    return \"null\";\n  }\n\n  if (code === undefined) {\n    return \"undefined\";\n  }\n\n  if (code instanceof RuntimeValue) {\n    return toCode(code.exec(parser), parser);\n  }\n\n  if (code instanceof RegExp && code.toString) {\n    return code.toString();\n  }\n\n  if (typeof code === \"function\" && code.toString) {\n    return \"(\" + code.toString() + \")\";\n  }\n\n  if (_typeof(code) === \"object\") {\n    return stringifyObj(code, parser);\n  }\n\n  return code + \"\";\n};\n\nvar DefinePlugin = /*#__PURE__*/function () {\n  /**\n   * Create a new define plugin\n   * @param {Record<string, CodeValue>} definitions A map of global object definitions\n   */\n  function DefinePlugin(definitions) {\n    _classCallCheck(this, DefinePlugin);\n\n    this.definitions = definitions;\n  }\n\n  _createClass(DefinePlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler Webpack compiler\n     * @returns {void}\n     */\n    function apply(compiler) {\n      var definitions = this.definitions;\n      compiler.hooks.compilation.tap(\"DefinePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n        /**\n         * Handler\n         * @param {Parser} parser Parser\n         * @returns {void}\n         */\n\n        var handler = function handler(parser) {\n          /**\n           * Walk definitions\n           * @param {Object} definitions Definitions map\n           * @param {string} prefix Prefix string\n           * @returns {void}\n           */\n          var walkDefinitions = function walkDefinitions(definitions, prefix) {\n            Object.keys(definitions).forEach(function (key) {\n              var code = definitions[key];\n\n              if (code && _typeof(code) === \"object\" && !(code instanceof RuntimeValue) && !(code instanceof RegExp)) {\n                walkDefinitions(code, prefix + key + \".\");\n                applyObjectDefine(prefix + key, code);\n                return;\n              }\n\n              applyDefineKey(prefix, key);\n              applyDefine(prefix + key, code);\n            });\n          };\n          /**\n           * Apply define key\n           * @param {string} prefix Prefix\n           * @param {string} key Key\n           * @returns {void}\n           */\n\n\n          var applyDefineKey = function applyDefineKey(prefix, key) {\n            var splittedKey = key.split(\".\");\n            splittedKey.slice(1).forEach(function (_, i) {\n              var fullKey = prefix + splittedKey.slice(0, i + 1).join(\".\");\n              parser.hooks.canRename[\"for\"](fullKey).tap(\"DefinePlugin\", ParserHelpers.approve);\n            });\n          };\n          /**\n           * Apply Code\n           * @param {string} key Key\n           * @param {CodeValue} code Code\n           * @returns {void}\n           */\n\n\n          var applyDefine = function applyDefine(key, code) {\n            var isTypeof = /^typeof\\s+/.test(key);\n            if (isTypeof) key = key.replace(/^typeof\\s+/, \"\");\n            var recurse = false;\n            var recurseTypeof = false;\n\n            if (!isTypeof) {\n              parser.hooks.canRename[\"for\"](key).tap(\"DefinePlugin\", ParserHelpers.approve);\n              parser.hooks.evaluateIdentifier[\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n                /**\n                 * this is needed in case there is a recursion in the DefinePlugin\n                 * to prevent an endless recursion\n                 * e.g.: new DefinePlugin({\n                 * \"a\": \"b\",\n                 * \"b\": \"a\"\n                 * });\n                 */\n                if (recurse) return;\n                recurse = true;\n                var res = parser.evaluate(toCode(code, parser));\n                recurse = false;\n                res.setRange(expr.range);\n                return res;\n              });\n              parser.hooks.expression[\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n                var strCode = toCode(code, parser);\n\n                if (/__webpack_require__/.test(strCode)) {\n                  return ParserHelpers.toConstantDependencyWithWebpackRequire(parser, strCode)(expr);\n                } else {\n                  return ParserHelpers.toConstantDependency(parser, strCode)(expr);\n                }\n              });\n            }\n\n            parser.hooks.evaluateTypeof[\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n              /**\n               * this is needed in case there is a recursion in the DefinePlugin\n               * to prevent an endless recursion\n               * e.g.: new DefinePlugin({\n               * \"typeof a\": \"typeof b\",\n               * \"typeof b\": \"typeof a\"\n               * });\n               */\n              if (recurseTypeof) return;\n              recurseTypeof = true;\n              var typeofCode = isTypeof ? toCode(code, parser) : \"typeof (\" + toCode(code, parser) + \")\";\n              var res = parser.evaluate(typeofCode);\n              recurseTypeof = false;\n              res.setRange(expr.range);\n              return res;\n            });\n            parser.hooks[\"typeof\"][\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n              var typeofCode = isTypeof ? toCode(code, parser) : \"typeof (\" + toCode(code, parser) + \")\";\n              var res = parser.evaluate(typeofCode);\n              if (!res.isString()) return;\n              return ParserHelpers.toConstantDependency(parser, JSON.stringify(res.string)).bind(parser)(expr);\n            });\n          };\n          /**\n           * Apply Object\n           * @param {string} key Key\n           * @param {Object} obj Object\n           * @returns {void}\n           */\n\n\n          var applyObjectDefine = function applyObjectDefine(key, obj) {\n            parser.hooks.canRename[\"for\"](key).tap(\"DefinePlugin\", ParserHelpers.approve);\n            parser.hooks.evaluateIdentifier[\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n              return new BasicEvaluatedExpression().setTruthy().setRange(expr.range);\n            });\n            parser.hooks.evaluateTypeof[\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n              return ParserHelpers.evaluateToString(\"object\")(expr);\n            });\n            parser.hooks.expression[\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n              var strCode = stringifyObj(obj, parser);\n\n              if (/__webpack_require__/.test(strCode)) {\n                return ParserHelpers.toConstantDependencyWithWebpackRequire(parser, strCode)(expr);\n              } else {\n                return ParserHelpers.toConstantDependency(parser, strCode)(expr);\n              }\n            });\n            parser.hooks[\"typeof\"][\"for\"](key).tap(\"DefinePlugin\", function (expr) {\n              return ParserHelpers.toConstantDependency(parser, JSON.stringify(\"object\"))(expr);\n            });\n          };\n\n          walkDefinitions(definitions, \"\");\n        };\n\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/auto\").tap(\"DefinePlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/dynamic\").tap(\"DefinePlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/esm\").tap(\"DefinePlugin\", handler);\n      });\n    }\n  }], [{\n    key: \"runtimeValue\",\n    value: function runtimeValue(fn, fileDependencies) {\n      return new RuntimeValue(fn, fileDependencies);\n    }\n  }]);\n\n  return DefinePlugin;\n}();\n\nmodule.exports = DefinePlugin;","map":null,"metadata":{},"sourceType":"module"}