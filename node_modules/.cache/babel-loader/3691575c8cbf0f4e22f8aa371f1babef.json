{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthors Simen Brekken @simenbrekken, Einar LÃ¶ve @einarlove\n*/\n\"use strict\";\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WebpackError = require(\"./WebpackError\");\n\nvar DefinePlugin = require(\"./DefinePlugin\");\n\nvar needsEnvVarFix = [\"8\", \"9\"].indexOf(process.versions.node.split(\".\")[0]) >= 0 && process.platform === \"win32\";\n\nvar EnvironmentPlugin = /*#__PURE__*/function () {\n  function EnvironmentPlugin() {\n    _classCallCheck(this, EnvironmentPlugin);\n\n    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n      keys[_key] = arguments[_key];\n    }\n\n    if (keys.length === 1 && Array.isArray(keys[0])) {\n      this.keys = keys[0];\n      this.defaultValues = {};\n    } else if (keys.length === 1 && keys[0] && _typeof(keys[0]) === \"object\") {\n      this.keys = Object.keys(keys[0]);\n      this.defaultValues = keys[0];\n    } else {\n      this.keys = keys;\n      this.defaultValues = {};\n    }\n  }\n  /**\n   * @param {Compiler} compiler webpack compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(EnvironmentPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      var definitions = this.keys.reduce(function (defs, key) {\n        // TODO remove once the fix has made its way into Node 8.\n        // Work around https://github.com/nodejs/node/pull/18463,\n        // affecting Node 8 & 9 by performing an OS-level\n        // operation that always succeeds before reading\n        // environment variables:\n        if (needsEnvVarFix) require(\"os\").cpus();\n        var value = process.env[key] !== undefined ? process.env[key] : _this.defaultValues[key];\n\n        if (value === undefined) {\n          compiler.hooks.thisCompilation.tap(\"EnvironmentPlugin\", function (compilation) {\n            var error = new WebpackError(\"EnvironmentPlugin - \".concat(key, \" environment variable is undefined.\\n\\n\") + \"You can pass an object with default values to suppress this warning.\\n\" + \"See https://webpack.js.org/plugins/environment-plugin for example.\");\n            error.name = \"EnvVariableNotDefinedError\";\n            compilation.warnings.push(error);\n          });\n        }\n\n        defs[\"process.env.\".concat(key)] = value === undefined ? \"undefined\" : JSON.stringify(value);\n        return defs;\n      }, {});\n      new DefinePlugin(definitions).apply(compiler);\n    }\n  }]);\n\n  return EnvironmentPlugin;\n}();\n\nmodule.exports = EnvironmentPlugin;","map":null,"metadata":{},"sourceType":"module"}