{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\n\nvar Source = require(\"./Source\");\n\nvar ConcatSource = /*#__PURE__*/function (_Source) {\n  _inherits(ConcatSource, _Source);\n\n  var _super = _createSuper(ConcatSource);\n\n  function ConcatSource() {\n    var _this;\n\n    _classCallCheck(this, ConcatSource);\n\n    _this = _super.call(this);\n    _this.children = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var item = arguments[i];\n\n      if (item instanceof ConcatSource) {\n        var children = item.children;\n\n        for (var j = 0; j < children.length; j++) {\n          _this.children.push(children[j]);\n        }\n      } else {\n        _this.children.push(item);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(ConcatSource, [{\n    key: \"add\",\n    value: function add(item) {\n      if (item instanceof ConcatSource) {\n        var children = item.children;\n\n        for (var j = 0; j < children.length; j++) {\n          this.children.push(children[j]);\n        }\n      } else {\n        this.children.push(item);\n      }\n    }\n  }, {\n    key: \"source\",\n    value: function source() {\n      var source = \"\";\n      var children = this.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        source += typeof child === \"string\" ? child : child.source();\n      }\n\n      return source;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      var size = 0;\n      var children = this.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        size += typeof child === \"string\" ? child.length : child.size();\n      }\n\n      return size;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var node = new SourceNode(null, null, null, this.children.map(function (item) {\n        return typeof item === \"string\" ? item : item.node(options);\n      }));\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      var map = new SourceListMap();\n      var children = this.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var item = children[i];\n        if (typeof item === \"string\") map.add(item);else map.add(item.listMap(options));\n      }\n\n      return map;\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      var children = this.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var item = children[i];\n        if (typeof item === \"string\") hash.update(item);else item.updateHash(hash);\n      }\n    }\n  }]);\n\n  return ConcatSource;\n}(Source);\n\nrequire(\"./SourceAndMapMixin\")(ConcatSource.prototype);\n\nmodule.exports = ConcatSource;","map":null,"metadata":{},"sourceType":"module"}