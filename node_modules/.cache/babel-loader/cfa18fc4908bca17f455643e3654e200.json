{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar HarmonyExportExpressionDependency = require(\"./HarmonyExportExpressionDependency\");\n\nvar HarmonyImportSideEffectDependency = require(\"./HarmonyImportSideEffectDependency\");\n\nvar HarmonyExportHeaderDependency = require(\"./HarmonyExportHeaderDependency\");\n\nvar HarmonyExportSpecifierDependency = require(\"./HarmonyExportSpecifierDependency\");\n\nvar HarmonyExportImportedSpecifierDependency = require(\"./HarmonyExportImportedSpecifierDependency\");\n\nvar ConstDependency = require(\"./ConstDependency\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function HarmonyExportDependencyParserPlugin(moduleOptions) {\n    _classCallCheck(this, HarmonyExportDependencyParserPlugin);\n\n    this.strictExportPresence = moduleOptions.strictExportPresence;\n  }\n\n  _createClass(HarmonyExportDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var _this = this;\n\n      parser.hooks[\"export\"].tap(\"HarmonyExportDependencyParserPlugin\", function (statement) {\n        var dep = new HarmonyExportHeaderDependency(statement.declaration && statement.declaration.range, statement.range);\n        dep.loc = Object.create(statement.loc);\n        dep.loc.index = -1;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n      parser.hooks.exportImport.tap(\"HarmonyExportDependencyParserPlugin\", function (statement, source) {\n        parser.state.lastHarmonyImportOrder = (parser.state.lastHarmonyImportOrder || 0) + 1;\n        var clearDep = new ConstDependency(\"\", statement.range);\n        clearDep.loc = Object.create(statement.loc);\n        clearDep.loc.index = -1;\n        parser.state.current.addDependency(clearDep);\n        var sideEffectDep = new HarmonyImportSideEffectDependency(source, parser.state.module, parser.state.lastHarmonyImportOrder, parser.state.harmonyParserScope);\n        sideEffectDep.loc = Object.create(statement.loc);\n        sideEffectDep.loc.index = -1;\n        parser.state.current.addDependency(sideEffectDep);\n        return true;\n      });\n      parser.hooks.exportExpression.tap(\"HarmonyExportDependencyParserPlugin\", function (statement, expr) {\n        var comments = parser.getComments([statement.range[0], expr.range[0]]);\n        var dep = new HarmonyExportExpressionDependency(parser.state.module, expr.range, statement.range, comments.map(function (c) {\n          switch (c.type) {\n            case \"Block\":\n              return \"/*\".concat(c.value, \"*/\");\n\n            case \"Line\":\n              return \"//\".concat(c.value, \"\\n\");\n          }\n\n          return \"\";\n        }).join(\"\"));\n        dep.loc = Object.create(statement.loc);\n        dep.loc.index = -1;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n      parser.hooks.exportDeclaration.tap(\"HarmonyExportDependencyParserPlugin\", function (statement) {});\n      parser.hooks.exportSpecifier.tap(\"HarmonyExportDependencyParserPlugin\", function (statement, id, name, idx) {\n        var rename = parser.scope.renames.get(id);\n        var dep;\n        var harmonyNamedExports = parser.state.harmonyNamedExports = parser.state.harmonyNamedExports || new Set();\n        harmonyNamedExports.add(name);\n\n        if (rename === \"imported var\") {\n          var settings = parser.state.harmonySpecifier.get(id);\n          dep = new HarmonyExportImportedSpecifierDependency(settings.source, parser.state.module, settings.sourceOrder, parser.state.harmonyParserScope, settings.id, name, harmonyNamedExports, null, _this.strictExportPresence);\n        } else {\n          dep = new HarmonyExportSpecifierDependency(parser.state.module, id, name);\n        }\n\n        dep.loc = Object.create(statement.loc);\n        dep.loc.index = idx;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n      parser.hooks.exportImportSpecifier.tap(\"HarmonyExportDependencyParserPlugin\", function (statement, source, id, name, idx) {\n        var harmonyNamedExports = parser.state.harmonyNamedExports = parser.state.harmonyNamedExports || new Set();\n        var harmonyStarExports = null;\n\n        if (name) {\n          harmonyNamedExports.add(name);\n        } else {\n          harmonyStarExports = parser.state.harmonyStarExports = parser.state.harmonyStarExports || [];\n        }\n\n        var dep = new HarmonyExportImportedSpecifierDependency(source, parser.state.module, parser.state.lastHarmonyImportOrder, parser.state.harmonyParserScope, id, name, harmonyNamedExports, harmonyStarExports && harmonyStarExports.slice(), _this.strictExportPresence);\n\n        if (harmonyStarExports) {\n          harmonyStarExports.push(dep);\n        }\n\n        dep.loc = Object.create(statement.loc);\n        dep.loc.index = idx;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n    }\n  }]);\n\n  return HarmonyExportDependencyParserPlugin;\n}();","map":null,"metadata":{},"sourceType":"module"}