{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Stats = require(\"./Stats\");\n\nvar optionOrFallback = function optionOrFallback(optionValue, fallbackValue) {\n  return optionValue !== undefined ? optionValue : fallbackValue;\n};\n\nvar MultiStats = /*#__PURE__*/function () {\n  function MultiStats(stats) {\n    _classCallCheck(this, MultiStats);\n\n    this.stats = stats;\n    this.hash = stats.map(function (stat) {\n      return stat.hash;\n    }).join(\"\");\n  }\n\n  _createClass(MultiStats, [{\n    key: \"hasErrors\",\n    value: function hasErrors() {\n      return this.stats.map(function (stat) {\n        return stat.hasErrors();\n      }).reduce(function (a, b) {\n        return a || b;\n      }, false);\n    }\n  }, {\n    key: \"hasWarnings\",\n    value: function hasWarnings() {\n      return this.stats.map(function (stat) {\n        return stat.hasWarnings();\n      }).reduce(function (a, b) {\n        return a || b;\n      }, false);\n    }\n  }, {\n    key: \"toJson\",\n    value: function toJson(options, forToString) {\n      if (typeof options === \"boolean\" || typeof options === \"string\") {\n        options = Stats.presetToOptions(options);\n      } else if (!options) {\n        options = {};\n      }\n\n      var jsons = this.stats.map(function (stat, idx) {\n        var childOptions = Stats.getChildOptions(options, idx);\n        var obj = stat.toJson(childOptions, forToString);\n        obj.name = stat.compilation && stat.compilation.name;\n        return obj;\n      });\n      var showVersion = options.version === undefined ? jsons.every(function (j) {\n        return j.version;\n      }) : options.version !== false;\n      var showHash = options.hash === undefined ? jsons.every(function (j) {\n        return j.hash;\n      }) : options.hash !== false;\n\n      if (showVersion) {\n        var _iterator = _createForOfIteratorHelper(jsons),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var j = _step.value;\n            delete j.version;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      var obj = {\n        errors: jsons.reduce(function (arr, j) {\n          return arr.concat(j.errors.map(function (msg) {\n            return \"(\".concat(j.name, \") \").concat(msg);\n          }));\n        }, []),\n        warnings: jsons.reduce(function (arr, j) {\n          return arr.concat(j.warnings.map(function (msg) {\n            return \"(\".concat(j.name, \") \").concat(msg);\n          }));\n        }, [])\n      };\n      if (showVersion) obj.version = require(\"../package.json\").version;\n      if (showHash) obj.hash = this.hash;\n      if (options.children !== false) obj.children = jsons;\n      return obj;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(options) {\n      if (typeof options === \"boolean\" || typeof options === \"string\") {\n        options = Stats.presetToOptions(options);\n      } else if (!options) {\n        options = {};\n      }\n\n      var useColors = optionOrFallback(options.colors, false);\n      var obj = this.toJson(options, true);\n      return Stats.jsonToString(obj, useColors);\n    }\n  }]);\n\n  return MultiStats;\n}();\n\nmodule.exports = MultiStats;","map":null,"metadata":{},"sourceType":"module"}