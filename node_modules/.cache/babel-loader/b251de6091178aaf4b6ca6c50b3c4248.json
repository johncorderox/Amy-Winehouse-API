{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\n\nvar LoaderOptionsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {LoaderOptionsPluginOptions} options options object\n   */\n  function LoaderOptionsPlugin(options) {\n    _classCallCheck(this, LoaderOptionsPlugin);\n\n    validateOptions(schema, options || {}, \"Loader Options Plugin\");\n    if (_typeof(options) !== \"object\") options = {};\n\n    if (!options.test) {\n      options.test = {\n        test: function test() {\n          return true;\n        }\n      };\n    }\n\n    this.options = options;\n  }\n\n  _createClass(LoaderOptionsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", function (compilation) {\n        compilation.hooks.normalModuleLoader.tap(\"LoaderOptionsPlugin\", function (context, module) {\n          var resource = module.resource;\n          if (!resource) return;\n          var i = resource.indexOf(\"?\");\n\n          if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.substr(0, i))) {\n            for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n              var key = _Object$keys[_i];\n\n              if (key === \"include\" || key === \"exclude\" || key === \"test\") {\n                continue;\n              }\n\n              context[key] = options[key];\n            }\n          }\n        });\n      });\n    }\n  }]);\n\n  return LoaderOptionsPlugin;\n}();\n\nmodule.exports = LoaderOptionsPlugin;","map":null,"metadata":{},"sourceType":"module"}