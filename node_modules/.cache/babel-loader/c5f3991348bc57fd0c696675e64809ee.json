{"ast":null,"code":"'use strict';\n\nmodule.exports = function generate__formatLimit(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  out += 'var ' + $valid + ' = undefined;';\n\n  if (it.opts.format === false) {\n    out += ' ' + $valid + ' = true; ';\n    return out;\n  }\n\n  var $schemaFormat = it.schema.format,\n      $isDataFormat = it.opts.$data && $schemaFormat.$data,\n      $closingBraces = '';\n\n  if ($isDataFormat) {\n    var $schemaValueFormat = it.util.getData($schemaFormat.$data, $dataLvl, it.dataPathArr),\n        $format = 'format' + $lvl,\n        $compare = 'compare' + $lvl;\n    out += ' var ' + $format + ' = formats[' + $schemaValueFormat + '] , ' + $compare + ' = ' + $format + ' && ' + $format + '.compare;';\n  } else {\n    var $format = it.formats[$schemaFormat];\n\n    if (!($format && $format.compare)) {\n      out += '  ' + $valid + ' = true; ';\n      return out;\n    }\n\n    var $compare = 'formats' + it.util.getProperty($schemaFormat) + '.compare';\n  }\n\n  var $isMax = $keyword == 'formatMaximum',\n      $exclusiveKeyword = 'formatExclusive' + ($isMax ? 'Maximum' : 'Minimum'),\n      $schemaExcl = it.schema[$exclusiveKeyword],\n      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,\n      $op = $isMax ? '<' : '>',\n      $result = 'result' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  if ($isDataExcl) {\n    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),\n        $exclusive = 'exclusive' + $lvl,\n        $opExpr = 'op' + $lvl,\n        $opStr = '\\' + ' + $opExpr + ' + \\'';\n    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';\n    $schemaValueExcl = 'schemaExcl' + $lvl;\n    out += ' if (typeof ' + $schemaValueExcl + ' != \\'boolean\\' && ' + $schemaValueExcl + ' !== undefined) { ' + $valid + ' = false; ';\n    var $errorKeyword = $exclusiveKeyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    /* istanbul ignore else */\n\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || '_formatExclusiveLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'' + $exclusiveKeyword + ' should be boolean\\' ';\n      }\n\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n      }\n\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n\n    var __err = out;\n    out = $$outStack.pop();\n\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + __err + ']); ';\n      } else {\n        out += ' validate.errors = [' + __err + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n\n    out += ' }  ';\n\n    if ($breakOnError) {\n      $closingBraces += '}';\n      out += ' else { ';\n    }\n\n    if ($isData) {\n      out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \\'string\\') ' + $valid + ' = false; else { ';\n      $closingBraces += '}';\n    }\n\n    if ($isDataFormat) {\n      out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';\n      $closingBraces += '}';\n    }\n\n    out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';\n\n    if ($isData) {\n      out += '' + $schemaValue;\n    } else {\n      out += '' + it.util.toQuotedString($schema);\n    }\n\n    out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; var ' + $exclusive + ' = ' + $schemaValueExcl + ' === true; if (' + $valid + ' === undefined) { ' + $valid + ' = ' + $exclusive + ' ? ' + $result + ' ' + $op + ' 0 : ' + $result + ' ' + $op + '= 0; } if (!' + $valid + ') var op' + $lvl + ' = ' + $exclusive + ' ? \\'' + $op + '\\' : \\'' + $op + '=\\';';\n  } else {\n    var $exclusive = $schemaExcl === true,\n        $opStr = $op;\n    if (!$exclusive) $opStr += '=';\n    var $opExpr = '\\'' + $opStr + '\\'';\n\n    if ($isData) {\n      out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \\'string\\') ' + $valid + ' = false; else { ';\n      $closingBraces += '}';\n    }\n\n    if ($isDataFormat) {\n      out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';\n      $closingBraces += '}';\n    }\n\n    out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';\n\n    if ($isData) {\n      out += '' + $schemaValue;\n    } else {\n      out += '' + it.util.toQuotedString($schema);\n    }\n\n    out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; if (' + $valid + ' === undefined) ' + $valid + ' = ' + $result + ' ' + $op;\n\n    if (!$exclusive) {\n      out += '=';\n    }\n\n    out += ' 0;';\n  }\n\n  out += '' + $closingBraces + 'if (!' + $valid + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_formatLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit:  ';\n\n    if ($isData) {\n      out += '' + $schemaValue;\n    } else {\n      out += '' + it.util.toQuotedString($schema);\n    }\n\n    out += ' , exclusive: ' + $exclusive + ' } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be ' + $opStr + ' \"';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + it.util.escapeQuotes($schema);\n      }\n\n      out += '\"\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + it.util.toQuotedString($schema);\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += '}';\n  return out;\n};","map":null,"metadata":{},"sourceType":"module"}