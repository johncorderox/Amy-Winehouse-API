{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar _require = require(\"webpack-sources\"),\n    OriginalSource = _require.OriginalSource,\n    RawSource = _require.RawSource;\n\nvar Module = require(\"./Module\");\n\nvar WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\n\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\nvar DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\n/** @typedef {import(\"./dependencies/ModuleDependency\")} ModuleDependency */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n\nvar DelegatedModule = /*#__PURE__*/function (_Module) {\n  _inherits(DelegatedModule, _Module);\n\n  var _super = _createSuper(DelegatedModule);\n\n  function DelegatedModule(sourceRequest, data, type, userRequest, originalRequest) {\n    var _this;\n\n    _classCallCheck(this, DelegatedModule);\n\n    _this = _super.call(this, \"javascript/dynamic\", null); // Info from Factory\n\n    _this.sourceRequest = sourceRequest;\n    _this.request = data.id;\n    _this.type = type;\n    _this.userRequest = userRequest;\n    _this.originalRequest = originalRequest;\n    _this.delegateData = data; // Build info\n\n    _this.delegatedSourceDependency = undefined;\n    return _this;\n  }\n\n  _createClass(DelegatedModule, [{\n    key: \"libIdent\",\n    value: function libIdent(options) {\n      return typeof this.originalRequest === \"string\" ? this.originalRequest : this.originalRequest.libIdent(options);\n    }\n  }, {\n    key: \"identifier\",\n    value: function identifier() {\n      return \"delegated \".concat(JSON.stringify(this.request), \" from \").concat(this.sourceRequest);\n    }\n  }, {\n    key: \"readableIdentifier\",\n    value: function readableIdentifier() {\n      return \"delegated \".concat(this.userRequest, \" from \").concat(this.sourceRequest);\n    }\n  }, {\n    key: \"needRebuild\",\n    value: function needRebuild() {\n      return false;\n    }\n  }, {\n    key: \"build\",\n    value: function build(options, compilation, resolver, fs, callback) {\n      this.built = true;\n      this.buildMeta = Object.assign({}, this.delegateData.buildMeta);\n      this.buildInfo = {};\n      this.delegatedSourceDependency = new DelegatedSourceDependency(this.sourceRequest);\n      this.addDependency(this.delegatedSourceDependency);\n      this.addDependency(new DelegatedExportsDependency(this, this.delegateData.exports || true));\n      callback();\n    }\n  }, {\n    key: \"source\",\n    value: function source(depTemplates, runtime) {\n      var dep =\n      /** @type {DelegatedSourceDependency} */\n      this.dependencies[0];\n      var sourceModule = dep.module;\n      var str;\n\n      if (!sourceModule) {\n        str = WebpackMissingModule.moduleCode(this.sourceRequest);\n      } else {\n        str = \"module.exports = (\".concat(runtime.moduleExports({\n          module: sourceModule,\n          request: dep.request\n        }), \")\");\n\n        switch (this.type) {\n          case \"require\":\n            str += \"(\".concat(JSON.stringify(this.request), \")\");\n            break;\n\n          case \"object\":\n            str += \"[\".concat(JSON.stringify(this.request), \"]\");\n            break;\n        }\n\n        str += \";\";\n      }\n\n      if (this.useSourceMap) {\n        return new OriginalSource(str, this.identifier());\n      } else {\n        return new RawSource(str);\n      }\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return 42;\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this.type);\n      hash.update(JSON.stringify(this.request));\n\n      _get(_getPrototypeOf(DelegatedModule.prototype), \"updateHash\", this).call(this, hash);\n    }\n  }]);\n\n  return DelegatedModule;\n}(Module);\n\nmodule.exports = DelegatedModule;","map":null,"metadata":{},"sourceType":"module"}