{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource,\n    RawSource = _require.RawSource;\n\nvar stringifySafe = function stringifySafe(data) {\n  var stringified = JSON.stringify(data);\n\n  if (!stringified) {\n    return undefined; // Invalid JSON\n  }\n\n  return stringified.replace(/\\u2028|\\u2029/g, function (str) {\n    return str === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\";\n  }); // invalid in JavaScript but valid JSON\n};\n\nvar JsonGenerator = /*#__PURE__*/function () {\n  function JsonGenerator() {\n    _classCallCheck(this, JsonGenerator);\n  }\n\n  _createClass(JsonGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate) {\n      var source = new ConcatSource();\n      var data = module.buildInfo.jsonData;\n\n      if (data === undefined) {\n        return new RawSource(runtimeTemplate.missingModuleStatement({\n          request: module.rawRequest\n        }));\n      }\n\n      var finalJson;\n\n      if (Array.isArray(module.buildMeta.providedExports) && !module.isUsed(\"default\")) {\n        // Only some exports are used: We can optimize here, by only generating a part of the JSON\n        var reducedJson = {};\n\n        var _iterator = _createForOfIteratorHelper(module.buildMeta.providedExports),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var exportName = _step.value;\n            if (exportName === \"default\") continue;\n            var used = module.isUsed(exportName);\n\n            if (used) {\n              reducedJson[used] = data[exportName];\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        finalJson = reducedJson;\n      } else {\n        finalJson = data;\n      } // Use JSON because JSON.parse() is much faster than JavaScript evaluation\n\n\n      var jsonSource = JSON.stringify(stringifySafe(finalJson));\n      var jsonExpr = \"JSON.parse(\".concat(jsonSource, \")\");\n      source.add(\"\".concat(module.moduleArgument, \".exports = \").concat(jsonExpr, \";\"));\n      return source;\n    }\n  }]);\n\n  return JsonGenerator;\n}();\n\nmodule.exports = JsonGenerator;","map":null,"metadata":{},"sourceType":"module"}