{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar SetVarMainTemplatePlugin = require(\"./SetVarMainTemplatePlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryCustomUmdObject} LibraryCustomUmdObject */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string[]} accessor the accessor to convert to path\n * @returns {string} the path\n */\n\n\nvar accessorToObjectAccess = function accessorToObjectAccess(accessor) {\n  return accessor.map(function (a) {\n    return \"[\".concat(JSON.stringify(a), \"]\");\n  }).join(\"\");\n};\n/**\n * @param {string=} base the path prefix\n * @param {string|string[]|LibraryCustomUmdObject} accessor the accessor\n * @param {\"amd\" | \"commonjs\" | \"root\"} umdProperty property used when a custom umd object is provided\n * @param {string=} joinWith the element separator\n * @returns {string} the path\n */\n\n\nvar accessorAccess = function accessorAccess(base, accessor, umdProperty) {\n  var joinWith = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"; \";\n  var normalizedAccessor = _typeof(accessor) === \"object\" && !Array.isArray(accessor) ? accessor[umdProperty] : accessor;\n  var accessors = Array.isArray(normalizedAccessor) ? normalizedAccessor : [normalizedAccessor];\n  return accessors.map(function (_, idx) {\n    var a = base ? base + accessorToObjectAccess(accessors.slice(0, idx + 1)) : accessors[0] + accessorToObjectAccess(accessors.slice(1, idx + 1));\n    if (idx === accessors.length - 1) return a;\n\n    if (idx === 0 && base === undefined) {\n      return \"\".concat(a, \" = typeof \").concat(a, \" === \\\"object\\\" ? \").concat(a, \" : {}\");\n    }\n\n    return \"\".concat(a, \" = \").concat(a, \" || {}\");\n  }).join(joinWith);\n};\n\nvar LibraryTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {string|string[]|LibraryCustomUmdObject} name name of library\n   * @param {string} target type of library\n   * @param {boolean} umdNamedDefine setting this to true will name the UMD module\n   * @param {string|TODO} auxiliaryComment comment in the UMD wrapper\n   * @param {string|string[]} exportProperty which export should be exposed as library\n   */\n  function LibraryTemplatePlugin(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {\n    _classCallCheck(this, LibraryTemplatePlugin);\n\n    this.name = name;\n    this.target = target;\n    this.umdNamedDefine = umdNamedDefine;\n    this.auxiliaryComment = auxiliaryComment;\n    this.exportProperty = exportProperty;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(LibraryTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"LibraryTemplatePlugin\", function (compilation) {\n        if (_this.exportProperty) {\n          var ExportPropertyMainTemplatePlugin = require(\"./ExportPropertyMainTemplatePlugin\");\n\n          new ExportPropertyMainTemplatePlugin(_this.exportProperty).apply(compilation);\n        }\n\n        switch (_this.target) {\n          case \"var\":\n            if (!_this.name || _typeof(_this.name) === \"object\" && !Array.isArray(_this.name)) {\n              throw new Error(\"library name must be set and not an UMD custom object for non-UMD target\");\n            }\n\n            new SetVarMainTemplatePlugin(\"var \".concat(accessorAccess(undefined, _this.name, \"root\")), false).apply(compilation);\n            break;\n\n          case \"assign\":\n            new SetVarMainTemplatePlugin(accessorAccess(undefined, _this.name, \"root\"), false).apply(compilation);\n            break;\n\n          case \"this\":\n          case \"self\":\n          case \"window\":\n            if (_this.name) {\n              new SetVarMainTemplatePlugin(accessorAccess(_this.target, _this.name, \"root\"), false).apply(compilation);\n            } else {\n              new SetVarMainTemplatePlugin(_this.target, true).apply(compilation);\n            }\n\n            break;\n\n          case \"global\":\n            if (_this.name) {\n              new SetVarMainTemplatePlugin(accessorAccess(compilation.runtimeTemplate.outputOptions.globalObject, _this.name, \"root\"), false).apply(compilation);\n            } else {\n              new SetVarMainTemplatePlugin(compilation.runtimeTemplate.outputOptions.globalObject, true).apply(compilation);\n            }\n\n            break;\n\n          case \"commonjs\":\n            if (_this.name) {\n              new SetVarMainTemplatePlugin(accessorAccess(\"exports\", _this.name, \"commonjs\"), false).apply(compilation);\n            } else {\n              new SetVarMainTemplatePlugin(\"exports\", true).apply(compilation);\n            }\n\n            break;\n\n          case \"commonjs2\":\n          case \"commonjs-module\":\n            new SetVarMainTemplatePlugin(\"module.exports\", false).apply(compilation);\n            break;\n\n          case \"amd\":\n          case \"amd-require\":\n            {\n              var AmdMainTemplatePlugin = require(\"./AmdMainTemplatePlugin\");\n\n              if (_this.name && typeof _this.name !== \"string\") {\n                throw new Error(\"library name must be a string for amd target\");\n              }\n\n              new AmdMainTemplatePlugin({\n                name: _this.name,\n                requireAsWrapper: _this.target === \"amd-require\"\n              }).apply(compilation);\n              break;\n            }\n\n          case \"umd\":\n          case \"umd2\":\n            {\n              var UmdMainTemplatePlugin = require(\"./UmdMainTemplatePlugin\");\n\n              new UmdMainTemplatePlugin(_this.name, {\n                optionalAmdExternalAsGlobal: _this.target === \"umd2\",\n                namedDefine: _this.umdNamedDefine,\n                auxiliaryComment: _this.auxiliaryComment\n              }).apply(compilation);\n              break;\n            }\n\n          case \"jsonp\":\n            {\n              var JsonpExportMainTemplatePlugin = require(\"./web/JsonpExportMainTemplatePlugin\");\n\n              if (typeof _this.name !== \"string\") throw new Error(\"library name must be a string for jsonp target\");\n              new JsonpExportMainTemplatePlugin(_this.name).apply(compilation);\n              break;\n            }\n\n          case \"system\":\n            {\n              var SystemMainTemplatePlugin = require(\"./SystemMainTemplatePlugin\");\n\n              new SystemMainTemplatePlugin({\n                name: _this.name\n              }).apply(compilation);\n              break;\n            }\n\n          default:\n            throw new Error(\"\".concat(_this.target, \" is not a valid Library target\"));\n        }\n      });\n    }\n  }]);\n\n  return LibraryTemplatePlugin;\n}();\n\nmodule.exports = LibraryTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}