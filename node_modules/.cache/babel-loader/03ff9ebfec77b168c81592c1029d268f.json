{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar base64VLQ = require(\"./base64-vlq\");\n\nvar SourceNode = require(\"./SourceNode\");\n\nvar CodeNode = require(\"./CodeNode\");\n\nvar SourceListMap = require(\"./SourceListMap\");\n\nmodule.exports = function fromStringWithSourceMap(code, map) {\n  var sources = map.sources;\n  var sourcesContent = map.sourcesContent;\n  var mappings = map.mappings.split(\";\");\n  var lines = code.split(\"\\n\");\n  var nodes = [];\n  var currentNode = null;\n  var currentLine = 1;\n  var currentSourceIdx = 0;\n  var currentSourceNodeLine;\n\n  function addCode(generatedCode) {\n    if (currentNode && currentNode instanceof CodeNode) {\n      currentNode.addGeneratedCode(generatedCode);\n    } else if (currentNode && currentNode instanceof SourceNode && !generatedCode.trim()) {\n      currentNode.addGeneratedCode(generatedCode);\n      currentSourceNodeLine++;\n    } else {\n      currentNode = new CodeNode(generatedCode);\n      nodes.push(currentNode);\n    }\n  }\n\n  function addSource(generatedCode, source, originalSource, linePosition) {\n    if (currentNode && currentNode instanceof SourceNode && currentNode.source === source && currentSourceNodeLine === linePosition) {\n      currentNode.addGeneratedCode(generatedCode);\n      currentSourceNodeLine++;\n    } else {\n      currentNode = new SourceNode(generatedCode, source, originalSource, linePosition);\n      currentSourceNodeLine = linePosition + 1;\n      nodes.push(currentNode);\n    }\n  }\n\n  mappings.forEach(function (mapping, idx) {\n    var line = lines[idx];\n    if (typeof line === 'undefined') return;\n    if (idx !== lines.length - 1) line += \"\\n\";\n    if (!mapping) return addCode(line);\n    mapping = {\n      value: 0,\n      rest: mapping\n    };\n    var lineAdded = false;\n\n    while (mapping.rest) {\n      lineAdded = processMapping(mapping, line, lineAdded) || lineAdded;\n    }\n\n    if (!lineAdded) addCode(line);\n  });\n\n  if (mappings.length < lines.length) {\n    var idx = mappings.length;\n\n    while (!lines[idx].trim() && idx < lines.length - 1) {\n      addCode(lines[idx] + \"\\n\");\n      idx++;\n    }\n\n    addCode(lines.slice(idx).join(\"\\n\"));\n  }\n\n  return new SourceListMap(nodes);\n\n  function processMapping(mapping, line, ignore) {\n    if (mapping.rest && mapping.rest[0] !== \",\") {\n      base64VLQ.decode(mapping.rest, mapping);\n    }\n\n    if (!mapping.rest) return false;\n\n    if (mapping.rest[0] === \",\") {\n      mapping.rest = mapping.rest.substr(1);\n      return false;\n    }\n\n    base64VLQ.decode(mapping.rest, mapping);\n    var sourceIdx = mapping.value + currentSourceIdx;\n    currentSourceIdx = sourceIdx;\n    var linePosition;\n\n    if (mapping.rest && mapping.rest[0] !== \",\") {\n      base64VLQ.decode(mapping.rest, mapping);\n      linePosition = mapping.value + currentLine;\n      currentLine = linePosition;\n    } else {\n      linePosition = currentLine;\n    }\n\n    if (mapping.rest) {\n      var next = mapping.rest.indexOf(\",\");\n      mapping.rest = next === -1 ? \"\" : mapping.rest.substr(next);\n    }\n\n    if (!ignore) {\n      addSource(line, sources ? sources[sourceIdx] : null, sourcesContent ? sourcesContent[sourceIdx] : null, linePosition);\n      return true;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}