{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Joel Denning @joeldenning\n */\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar Template = require(\"./Template\");\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} SystemMainTemplatePluginOptions\n * @param {string=} name the library name\n */\n\n\nvar SystemMainTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {SystemMainTemplatePluginOptions} options the plugin options\n   */\n  function SystemMainTemplatePlugin(options) {\n    _classCallCheck(this, SystemMainTemplatePlugin);\n\n    this.name = options.name;\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  _createClass(SystemMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compilation) {\n      var _this = this;\n\n      var mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate;\n\n      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {\n        var externals = chunk.getModules().filter(function (m) {\n          return m.external;\n        }); // The name this bundle should be registered as with System\n\n        var name = _this.name ? \"\".concat(JSON.stringify(mainTemplate.getAssetPath(_this.name, {\n          hash: hash,\n          chunk: chunk\n        })), \", \") : \"\"; // The array of dependencies that are external to webpack and will be provided by System\n\n        var systemDependencies = JSON.stringify(externals.map(function (m) {\n          return _typeof(m.request) === \"object\" ? m.request.amd : m.request;\n        })); // The name of the variable provided by System for exporting\n\n        var dynamicExport = \"__WEBPACK_DYNAMIC_EXPORT__\"; // An array of the internal variable names for the webpack externals\n\n        var externalWebpackNames = externals.map(function (m) {\n          return \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(m.id)), \"__\");\n        }); // Declaring variables for the internal variable names for the webpack externals\n\n        var externalVarDeclarations = externalWebpackNames.length > 0 ? \"var \".concat(externalWebpackNames.join(\", \"), \";\") : \"\"; // The system.register format requires an array of setter functions for externals.\n\n        var setters = externalWebpackNames.length === 0 ? \"\" : Template.asString([\"setters: [\", Template.indent(externalWebpackNames.map(function (external) {\n          return Template.asString([\"function(module) {\", Template.indent(\"\".concat(external, \" = module;\")), \"}\"]);\n        }).join(\",\\n\")), \"],\"]);\n        return new ConcatSource(Template.asString([\"System.register(\".concat(name).concat(systemDependencies, \", function(\").concat(dynamicExport, \") {\"), Template.indent([externalVarDeclarations, \"return {\", Template.indent([setters, \"execute: function() {\", Template.indent(\"\".concat(dynamicExport, \"(\"))])])]) + \"\\n\", source, \"\\n\" + Template.asString([Template.indent([Template.indent([Template.indent([\");\"]), \"}\"]), \"};\"]), \"})\"]));\n      };\n\n      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {\n        var template = _arr[_i];\n        template.hooks.renderWithEntry.tap(\"SystemMainTemplatePlugin\", onRenderWithEntry);\n      }\n\n      mainTemplate.hooks.globalHashPaths.tap(\"SystemMainTemplatePlugin\", function (paths) {\n        if (_this.name) {\n          paths.push(_this.name);\n        }\n\n        return paths;\n      });\n      mainTemplate.hooks.hash.tap(\"SystemMainTemplatePlugin\", function (hash) {\n        hash.update(\"exports system\");\n\n        if (_this.name) {\n          hash.update(_this.name);\n        }\n      });\n    }\n  }]);\n\n  return SystemMainTemplatePlugin;\n}();\n\nmodule.exports = SystemMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"module"}