{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar FlagIncludedChunksPlugin = /*#__PURE__*/function () {\n  function FlagIncludedChunksPlugin() {\n    _classCallCheck(this, FlagIncludedChunksPlugin);\n  }\n\n  _createClass(FlagIncludedChunksPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkIds.tap(\"FlagIncludedChunksPlugin\", function (chunks) {\n          // prepare two bit integers for each module\n          // 2^31 is the max number represented as SMI in v8\n          // we want the bits distributed this way:\n          // the bit 2^31 is pretty rar and only one module should get it\n          // so it has a probability of 1 / modulesCount\n          // the first bit (2^0) is the easiest and every module could get it\n          // if it doesn't get a better bit\n          // from bit 2^n to 2^(n+1) there is a probability of p\n          // so 1 / modulesCount == p^31\n          // <=> p = sqrt31(1 / modulesCount)\n          // so we use a modulo of 1 / sqrt31(1 / modulesCount)\n          var moduleBits = new WeakMap();\n          var modulesCount = compilation.modules.length; // precalculate the modulo values for each bit\n\n          var modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n          var modulos = Array.from({\n            length: 31\n          }, function (x, i) {\n            return Math.pow(modulo, i) | 0;\n          }); // iterate all modules to generate bit values\n\n          var i = 0;\n\n          var _iterator = _createForOfIteratorHelper(compilation.modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n              var bit = 30;\n\n              while (i % modulos[bit] !== 0) {\n                bit--;\n              }\n\n              moduleBits.set(_module, 1 << bit);\n              i++;\n            } // interate all chunks to generate bitmaps\n\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var chunkModulesHash = new WeakMap();\n\n          var _iterator2 = _createForOfIteratorHelper(chunks),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var chunk = _step2.value;\n              var hash = 0;\n\n              var _iterator4 = _createForOfIteratorHelper(chunk.modulesIterable),\n                  _step4;\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var _module2 = _step4.value;\n                  hash |= moduleBits.get(_module2);\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n\n              chunkModulesHash.set(chunk, hash);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          var _iterator3 = _createForOfIteratorHelper(chunks),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var chunkA = _step3.value;\n              var chunkAHash = chunkModulesHash.get(chunkA);\n              var chunkAModulesCount = chunkA.getNumberOfModules();\n              if (chunkAModulesCount === 0) continue;\n              var bestModule = undefined;\n\n              var _iterator5 = _createForOfIteratorHelper(chunkA.modulesIterable),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _module3 = _step5.value;\n                  if (bestModule === undefined || bestModule.getNumberOfChunks() > _module3.getNumberOfChunks()) bestModule = _module3;\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n\n              var _iterator6 = _createForOfIteratorHelper(bestModule.chunksIterable),\n                  _step6;\n\n              try {\n                loopB: for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var chunkB = _step6.value;\n                  // as we iterate the same iterables twice\n                  // skip if we find ourselves\n                  if (chunkA === chunkB) continue;\n                  var chunkBModulesCount = chunkB.getNumberOfModules(); // ids for empty chunks are not included\n\n                  if (chunkBModulesCount === 0) continue; // instead of swapping A and B just bail\n                  // as we loop twice the current A will be B and B then A\n\n                  if (chunkAModulesCount > chunkBModulesCount) continue; // is chunkA in chunkB?\n                  // we do a cheap check for the hash value\n\n                  var chunkBHash = chunkModulesHash.get(chunkB);\n                  if ((chunkBHash & chunkAHash) !== chunkAHash) continue; // compare all modules\n\n                  var _iterator7 = _createForOfIteratorHelper(chunkA.modulesIterable),\n                      _step7;\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var m = _step7.value;\n                      if (!chunkB.containsModule(m)) continue loopB;\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n\n                  chunkB.ids.push(chunkA.id);\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return FlagIncludedChunksPlugin;\n}();\n\nmodule.exports = FlagIncludedChunksPlugin;","map":null,"metadata":{},"sourceType":"module"}