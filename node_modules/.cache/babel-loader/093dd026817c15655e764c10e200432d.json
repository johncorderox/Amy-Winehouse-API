{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\n\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\nvar MultiModuleFactory = require(\"./MultiModuleFactory\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar MultiEntryPlugin = /*#__PURE__*/function () {\n  /**\n   * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n   * @param {string} context context path\n   * @param {string[]} entries array of entry paths\n   * @param {string} name entry key name\n   */\n  function MultiEntryPlugin(context, entries, name) {\n    _classCallCheck(this, MultiEntryPlugin);\n\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(MultiEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"MultiEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var multiModuleFactory = new MultiModuleFactory();\n        compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"MultiEntryPlugin\", function (compilation, callback) {\n        var context = _this.context,\n            entries = _this.entries,\n            name = _this.name;\n        var dep = MultiEntryPlugin.createDependency(entries, name);\n        compilation.addEntry(context, dep, name, callback);\n      });\n    }\n    /**\n     * @param {string[]} entries each entry path string\n     * @param {string} name name of the entry\n     * @returns {MultiEntryDependency} returns a constructed Dependency\n     */\n\n  }], [{\n    key: \"createDependency\",\n    value: function createDependency(entries, name) {\n      return new MultiEntryDependency(entries.map(function (e, idx) {\n        var dep = new SingleEntryDependency(e); // Because entrypoints are not dependencies found in an\n        // existing module, we give it a synthetic id\n\n        dep.loc = {\n          name: name,\n          index: idx\n        };\n        return dep;\n      }), name);\n    }\n  }]);\n\n  return MultiEntryPlugin;\n}();\n\nmodule.exports = MultiEntryPlugin;","map":null,"metadata":{},"sourceType":"module"}