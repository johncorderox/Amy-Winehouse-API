{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar mergeCache = new WeakMap();\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @example\n * // performs cleverMerge(first, second), stores the result in WeakMap and returns result\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\nvar cachedCleverMerge = function cachedCleverMerge(first, second) {\n  var innerCache = mergeCache.get(first);\n\n  if (innerCache === undefined) {\n    innerCache = new WeakMap();\n    mergeCache.set(first, innerCache);\n  }\n\n  var prevMerge = innerCache.get(second);\n  if (prevMerge !== undefined) return prevMerge;\n  var newMerge = cleverMerge(first, second);\n  innerCache.set(second, newMerge);\n  return newMerge;\n};\n/**\n * Merges two objects. Objects are not deeply merged.\n * TODO webpack 5: merge objects deeply clever.\n * Arrays might reference the old value with \"...\"\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\n\nvar cleverMerge = function cleverMerge(first, second) {\n  var newObject = Object.assign({}, first);\n\n  for (var _i = 0, _Object$keys = Object.keys(second); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (!(key in newObject)) {\n      newObject[key] = second[key];\n      continue;\n    }\n\n    var secondValue = second[key];\n\n    if (!Array.isArray(secondValue)) {\n      newObject[key] = secondValue;\n      continue;\n    }\n\n    var firstValue = newObject[key];\n\n    if (Array.isArray(firstValue)) {\n      var newArray = [];\n\n      var _iterator = _createForOfIteratorHelper(secondValue),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          if (item === \"...\") {\n            var _iterator2 = _createForOfIteratorHelper(firstValue),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _item = _step2.value;\n                newArray.push(_item);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            newArray.push(item);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      newObject[key] = newArray;\n    } else {\n      newObject[key] = secondValue;\n    }\n  }\n\n  return newObject;\n};\n\nexports.cachedCleverMerge = cachedCleverMerge;\nexports.cleverMerge = cleverMerge;","map":null,"metadata":{},"sourceType":"module"}