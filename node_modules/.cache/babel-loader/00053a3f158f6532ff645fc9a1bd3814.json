{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar identifierUtils = require(\"./util/identifier\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {Record<number, number>=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\n\n\nvar RecordIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options Options object\n   * @param {boolean=} options.portableIds true, when ids need to be portable\n   */\n  function RecordIdsPlugin(options) {\n    _classCallCheck(this, RecordIdsPlugin);\n\n    this.options = options || {};\n  }\n  /**\n   * @param {Compiler} compiler the Compiler\n   * @returns {void}\n   */\n\n\n  _createClass(RecordIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var portableIds = this.options.portableIds;\n      compiler.hooks.compilation.tap(\"RecordIdsPlugin\", function (compilation) {\n        compilation.hooks.recordModules.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Module[]} modules the modules array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (modules, records) {\n          if (!records.modules) records.modules = {};\n          if (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n          if (!records.modules.usedIds) records.modules.usedIds = {};\n\n          var _iterator = _createForOfIteratorHelper(modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n              if (typeof _module.id !== \"number\") continue;\n              var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module.identifier(), compilation.cache) : _module.identifier();\n              records.modules.byIdentifier[identifier] = _module.id;\n              records.modules.usedIds[_module.id] = _module.id;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n        compilation.hooks.reviveModules.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Module[]} modules the modules array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (modules, records) {\n          if (!records.modules) return;\n\n          if (records.modules.byIdentifier) {\n            /** @type {Set<number>} */\n            var usedIds = new Set();\n\n            var _iterator2 = _createForOfIteratorHelper(modules),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _module2 = _step2.value;\n                if (_module2.id !== null) continue;\n                var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module2.identifier(), compilation.cache) : _module2.identifier();\n                var id = records.modules.byIdentifier[identifier];\n                if (id === undefined) continue;\n                if (usedIds.has(id)) continue;\n                usedIds.add(id);\n                _module2.id = id;\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n\n          if (Array.isArray(records.modules.usedIds)) {\n            compilation.usedModuleIds = new Set(records.modules.usedIds);\n          }\n        });\n        /**\n         * @param {Module} module the module\n         * @returns {string} the (portable) identifier\n         */\n\n        var getModuleIdentifier = function getModuleIdentifier(module) {\n          if (portableIds) {\n            return identifierUtils.makePathsRelative(compiler.context, module.identifier(), compilation.cache);\n          }\n\n          return module.identifier();\n        };\n        /**\n         * @param {Chunk} chunk the chunk\n         * @returns {string[]} sources of the chunk\n         */\n\n\n        var getChunkSources = function getChunkSources(chunk) {\n          /** @type {string[]} */\n          var sources = [];\n\n          var _iterator3 = _createForOfIteratorHelper(chunk.groupsIterable),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var chunkGroup = _step3.value;\n              var index = chunkGroup.chunks.indexOf(chunk);\n\n              if (chunkGroup.name) {\n                sources.push(\"\".concat(index, \" \").concat(chunkGroup.name));\n              } else {\n                var _iterator4 = _createForOfIteratorHelper(chunkGroup.origins),\n                    _step4;\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var origin = _step4.value;\n\n                    if (origin.module) {\n                      if (origin.request) {\n                        sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(origin.request));\n                      } else if (typeof origin.loc === \"string\") {\n                        sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(origin.loc));\n                      } else if (origin.loc && _typeof(origin.loc) === \"object\" && origin.loc.start) {\n                        sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(JSON.stringify(origin.loc.start)));\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          return sources;\n        };\n\n        compilation.hooks.recordChunks.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Chunk[]} chunks the chunks array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (chunks, records) {\n          if (!records.chunks) records.chunks = {};\n          if (!records.chunks.byName) records.chunks.byName = {};\n          if (!records.chunks.bySource) records.chunks.bySource = {};\n          /** @type {Set<number>} */\n\n          var usedIds = new Set();\n\n          var _iterator5 = _createForOfIteratorHelper(chunks),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var chunk = _step5.value;\n              if (typeof chunk.id !== \"number\") continue;\n              var name = chunk.name;\n              if (name) records.chunks.byName[name] = chunk.id;\n              var sources = getChunkSources(chunk);\n\n              var _iterator6 = _createForOfIteratorHelper(sources),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var source = _step6.value;\n                  records.chunks.bySource[source] = chunk.id;\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n\n              usedIds.add(chunk.id);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          records.chunks.usedIds = Array.from(usedIds).sort();\n        });\n        compilation.hooks.reviveChunks.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Chunk[]} chunks the chunks array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (chunks, records) {\n          if (!records.chunks) return;\n          /** @type {Set<number>} */\n\n          var usedIds = new Set();\n\n          if (records.chunks.byName) {\n            var _iterator7 = _createForOfIteratorHelper(chunks),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var chunk = _step7.value;\n                if (chunk.id !== null) continue;\n                if (!chunk.name) continue;\n                var id = records.chunks.byName[chunk.name];\n                if (id === undefined) continue;\n                if (usedIds.has(id)) continue;\n                usedIds.add(id);\n                chunk.id = id;\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n\n          if (records.chunks.bySource) {\n            var _iterator8 = _createForOfIteratorHelper(chunks),\n                _step8;\n\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var _chunk = _step8.value;\n                var sources = getChunkSources(_chunk);\n\n                var _iterator9 = _createForOfIteratorHelper(sources),\n                    _step9;\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    var source = _step9.value;\n                    var _id = records.chunks.bySource[source];\n                    if (_id === undefined) continue;\n                    if (usedIds.has(_id)) continue;\n                    usedIds.add(_id);\n                    _chunk.id = _id;\n                    break;\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          }\n\n          if (Array.isArray(records.chunks.usedIds)) {\n            compilation.usedChunkIds = new Set(records.chunks.usedIds);\n          }\n        });\n      });\n    }\n  }]);\n\n  return RecordIdsPlugin;\n}();\n\nmodule.exports = RecordIdsPlugin;","map":null,"metadata":{},"sourceType":"module"}