{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar NullFactory = require(\"./NullFactory\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar CompatibilityPlugin = /*#__PURE__*/function () {\n  function CompatibilityPlugin() {\n    _classCallCheck(this, CompatibilityPlugin);\n  }\n\n  _createClass(CompatibilityPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler Webpack Compiler\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.compilation.tap(\"CompatibilityPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/auto\").tap(\"CompatibilityPlugin\", function (parser, parserOptions) {\n          if (parserOptions.browserify !== undefined && !parserOptions.browserify) return;\n          parser.hooks.call[\"for\"](\"require\").tap(\"CompatibilityPlugin\", function (expr) {\n            // support for browserify style require delegator: \"require(o, !0)\"\n            if (expr.arguments.length !== 2) return;\n            var second = parser.evaluateExpression(expr.arguments[1]);\n            if (!second.isBoolean()) return;\n            if (second.asBool() !== true) return;\n            var dep = new ConstDependency(\"require\", expr.callee.range);\n            dep.loc = expr.loc;\n\n            if (parser.state.current.dependencies.length > 1) {\n              var last = parser.state.current.dependencies[parser.state.current.dependencies.length - 1];\n              if (last.critical && last.options && last.options.request === \".\" && last.userRequest === \".\" && last.options.recursive) parser.state.current.dependencies.pop();\n            }\n\n            parser.state.current.addDependency(dep);\n            return true;\n          });\n        });\n      });\n    }\n  }]);\n\n  return CompatibilityPlugin;\n}();\n\nmodule.exports = CompatibilityPlugin;","map":null,"metadata":{},"sourceType":"module"}