{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\nvar PrefetchPlugin = /*#__PURE__*/function () {\n  function PrefetchPlugin(context, request) {\n    _classCallCheck(this, PrefetchPlugin);\n\n    if (!request) {\n      this.request = context;\n    } else {\n      this.context = context;\n      this.request = request;\n    }\n  }\n\n  _createClass(PrefetchPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"PrefetchPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"PrefetchPlugin\", function (compilation, callback) {\n        compilation.prefetch(_this.context || compiler.context, new PrefetchDependency(_this.request), callback);\n      });\n    }\n  }]);\n\n  return PrefetchPlugin;\n}();\n\nmodule.exports = PrefetchPlugin;","map":null,"metadata":{},"sourceType":"module"}