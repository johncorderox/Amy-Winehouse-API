{"ast":null,"code":"function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport * as t from \"@webassemblyjs/ast\";\n\nfunction findLastSection(ast, forSection) {\n  var targetSectionId = constants.sections[forSection]; // $FlowIgnore: metadata can not be empty\n\n  var moduleSections = ast.body[0].metadata.sections;\n  var lastSection;\n  var lastId = 0;\n\n  for (var i = 0, len = moduleSections.length; i < len; i++) {\n    var section = moduleSections[i]; // Ignore custom section since they can actually occur everywhere\n\n    if (section.section === \"custom\") {\n      continue;\n    }\n\n    var sectionId = constants.sections[section.section];\n\n    if (targetSectionId > lastId && targetSectionId < sectionId) {\n      return lastSection;\n    }\n\n    lastId = sectionId;\n    lastSection = section;\n  }\n\n  return lastSection;\n}\n\nexport function createEmptySection(ast, uint8Buffer, section) {\n  // previous section after which we are going to insert our section\n  var lastSection = findLastSection(ast, section);\n  var start, end;\n  /**\n   * It's the first section\n   */\n\n  if (lastSection == null || lastSection.section === \"custom\") {\n    start = 8\n    /* wasm header size */\n    ;\n    end = start;\n  } else {\n    start = lastSection.startOffset + lastSection.size.value + 1;\n    end = start;\n  } // section id\n\n\n  start += 1;\n  var sizeStartLoc = {\n    line: -1,\n    column: start\n  };\n  var sizeEndLoc = {\n    line: -1,\n    column: start + 1\n  }; // 1 byte for the empty vector\n\n  var size = t.withLoc(t.numberLiteralFromRaw(1), sizeEndLoc, sizeStartLoc);\n  var vectorOfSizeStartLoc = {\n    line: -1,\n    column: sizeEndLoc.column\n  };\n  var vectorOfSizeEndLoc = {\n    line: -1,\n    column: sizeEndLoc.column + 1\n  };\n  var vectorOfSize = t.withLoc(t.numberLiteralFromRaw(0), vectorOfSizeEndLoc, vectorOfSizeStartLoc);\n  var sectionMetadata = t.sectionMetadata(section, start, size, vectorOfSize);\n  var sectionBytes = encodeNode(sectionMetadata);\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start - 1, end, sectionBytes); // Add section into the AST for later lookups\n\n  if (_typeof(ast.body[0].metadata) === \"object\") {\n    // $FlowIgnore: metadata can not be empty\n    ast.body[0].metadata.sections.push(sectionMetadata);\n    t.sortSectionMetadata(ast.body[0]);\n  }\n  /**\n   * Update AST\n   */\n  // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var deltaBytes = +sectionBytes.length;\n  var encounteredSection = false;\n  t.traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        t.shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return {\n    uint8Buffer: uint8Buffer,\n    sectionMetadata: sectionMetadata\n  };\n}","map":null,"metadata":{},"sourceType":"module"}