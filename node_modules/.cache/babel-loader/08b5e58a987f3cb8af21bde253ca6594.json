{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar path = require(\"path\");\n\nvar ContextElementDependency = require(\"./dependencies/ContextElementDependency\");\n\nvar ContextReplacementPlugin = /*#__PURE__*/function () {\n  function ContextReplacementPlugin(resourceRegExp, newContentResource, newContentRecursive, newContentRegExp) {\n    _classCallCheck(this, ContextReplacementPlugin);\n\n    this.resourceRegExp = resourceRegExp;\n\n    if (typeof newContentResource === \"function\") {\n      this.newContentCallback = newContentResource;\n    } else if (typeof newContentResource === \"string\" && _typeof(newContentRecursive) === \"object\") {\n      this.newContentResource = newContentResource;\n\n      this.newContentCreateContextMap = function (fs, callback) {\n        callback(null, newContentRecursive);\n      };\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"function\") {\n      this.newContentResource = newContentResource;\n      this.newContentCreateContextMap = newContentRecursive;\n    } else {\n      if (typeof newContentResource !== \"string\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = newContentResource;\n        newContentResource = undefined;\n      }\n\n      if (typeof newContentRecursive !== \"boolean\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = undefined;\n      }\n\n      this.newContentResource = newContentResource;\n      this.newContentRecursive = newContentRecursive;\n      this.newContentRegExp = newContentRegExp;\n    }\n  }\n\n  _createClass(ContextReplacementPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var resourceRegExp = this.resourceRegExp;\n      var newContentCallback = this.newContentCallback;\n      var newContentResource = this.newContentResource;\n      var newContentRecursive = this.newContentRecursive;\n      var newContentRegExp = this.newContentRegExp;\n      var newContentCreateContextMap = this.newContentCreateContextMap;\n      compiler.hooks.contextModuleFactory.tap(\"ContextReplacementPlugin\", function (cmf) {\n        cmf.hooks.beforeResolve.tap(\"ContextReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.request)) {\n            if (newContentResource !== undefined) {\n              result.request = newContentResource;\n            }\n\n            if (newContentRecursive !== undefined) {\n              result.recursive = newContentRecursive;\n            }\n\n            if (newContentRegExp !== undefined) {\n              result.regExp = newContentRegExp;\n            }\n\n            if (typeof newContentCallback === \"function\") {\n              newContentCallback(result);\n            } else {\n              var _iterator = _createForOfIteratorHelper(result.dependencies),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var d = _step.value;\n                  if (d.critical) d.critical = false;\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n          }\n\n          return result;\n        });\n        cmf.hooks.afterResolve.tap(\"ContextReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.resource)) {\n            if (newContentResource !== undefined) {\n              result.resource = path.resolve(result.resource, newContentResource);\n            }\n\n            if (newContentRecursive !== undefined) {\n              result.recursive = newContentRecursive;\n            }\n\n            if (newContentRegExp !== undefined) {\n              result.regExp = newContentRegExp;\n            }\n\n            if (typeof newContentCreateContextMap === \"function\") {\n              result.resolveDependencies = createResolveDependenciesFromContextMap(newContentCreateContextMap);\n            }\n\n            if (typeof newContentCallback === \"function\") {\n              var origResource = result.resource;\n              newContentCallback(result);\n\n              if (result.resource !== origResource) {\n                result.resource = path.resolve(origResource, result.resource);\n              }\n            } else {\n              var _iterator2 = _createForOfIteratorHelper(result.dependencies),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var d = _step2.value;\n                  if (d.critical) d.critical = false;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n\n          return result;\n        });\n      });\n    }\n  }]);\n\n  return ContextReplacementPlugin;\n}();\n\nvar createResolveDependenciesFromContextMap = function createResolveDependenciesFromContextMap(createContextMap) {\n  var resolveDependenciesFromContextMap = function resolveDependenciesFromContextMap(fs, options, callback) {\n    createContextMap(fs, function (err, map) {\n      if (err) return callback(err);\n      var dependencies = Object.keys(map).map(function (key) {\n        return new ContextElementDependency(map[key] + options.resourceQuery, key);\n      });\n      callback(null, dependencies);\n    });\n  };\n\n  return resolveDependenciesFromContextMap;\n};\n\nmodule.exports = ContextReplacementPlugin;","map":null,"metadata":{},"sourceType":"module"}