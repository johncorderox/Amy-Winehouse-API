{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Template = require(\"./Template\");\n\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\n\nvar ParserHelpers = require(\"./ParserHelpers\");\n\nvar NullFactory = require(\"./NullFactory\");\n\nvar REPLACEMENTS = {\n  // eslint-disable-next-line camelcase\n  __webpack_hash__: \"__webpack_require__.h\",\n  // eslint-disable-next-line camelcase\n  __webpack_chunkname__: \"__webpack_require__.cn\"\n};\nvar REPLACEMENT_TYPES = {\n  // eslint-disable-next-line camelcase\n  __webpack_hash__: \"string\",\n  // eslint-disable-next-line camelcase\n  __webpack_chunkname__: \"string\"\n};\n\nvar ExtendedAPIPlugin = /*#__PURE__*/function () {\n  function ExtendedAPIPlugin() {\n    _classCallCheck(this, ExtendedAPIPlugin);\n  }\n\n  _createClass(ExtendedAPIPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"ExtendedAPIPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n        var mainTemplate = compilation.mainTemplate;\n        mainTemplate.hooks.requireExtensions.tap(\"ExtendedAPIPlugin\", function (source, chunk, hash) {\n          var buf = [source];\n          buf.push(\"\");\n          buf.push(\"// __webpack_hash__\");\n          buf.push(\"\".concat(mainTemplate.requireFn, \".h = \").concat(JSON.stringify(hash), \";\"));\n          buf.push(\"\");\n          buf.push(\"// __webpack_chunkname__\");\n          buf.push(\"\".concat(mainTemplate.requireFn, \".cn = \").concat(JSON.stringify(chunk.name), \";\"));\n          return Template.asString(buf);\n        });\n        mainTemplate.hooks.globalHash.tap(\"ExtendedAPIPlugin\", function () {\n          return true;\n        });\n\n        var handler = function handler(parser, parserOptions) {\n          Object.keys(REPLACEMENTS).forEach(function (key) {\n            parser.hooks.expression[\"for\"](key).tap(\"ExtendedAPIPlugin\", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, REPLACEMENTS[key]));\n            parser.hooks.evaluateTypeof[\"for\"](key).tap(\"ExtendedAPIPlugin\", ParserHelpers.evaluateToString(REPLACEMENT_TYPES[key]));\n          });\n        };\n\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/auto\").tap(\"ExtendedAPIPlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/dynamic\").tap(\"ExtendedAPIPlugin\", handler);\n        normalModuleFactory.hooks.parser[\"for\"](\"javascript/esm\").tap(\"ExtendedAPIPlugin\", handler);\n      });\n    }\n  }]);\n\n  return ExtendedAPIPlugin;\n}();\n\nmodule.exports = ExtendedAPIPlugin;","map":null,"metadata":{},"sourceType":"module"}