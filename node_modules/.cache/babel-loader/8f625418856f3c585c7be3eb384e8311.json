{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar LoaderLoadingError = require(\"./LoaderLoadingError\");\n\nmodule.exports = function loadLoader(loader, callback) {\n  if ((typeof System === \"undefined\" ? \"undefined\" : _typeof(System)) === \"object\" && typeof System[\"import\"] === \"function\") {\n    System[\"import\"](loader.path)[\"catch\"](callback).then(function (module) {\n      loader.normal = typeof module === \"function\" ? module : module[\"default\"];\n      loader.pitch = module.pitch;\n      loader.raw = module.raw;\n\n      if (typeof loader.normal !== \"function\" && typeof loader.pitch !== \"function\") {\n        return callback(new LoaderLoadingError(\"Module '\" + loader.path + \"' is not a loader (must have normal or pitch function)\"));\n      }\n\n      callback();\n    });\n  } else {\n    try {\n      var module = require(loader.path);\n    } catch (e) {\n      // it is possible for node to choke on a require if the FD descriptor\n      // limit has been reached. give it a chance to recover.\n      if (e instanceof Error && e.code === \"EMFILE\") {\n        var retry = loadLoader.bind(null, loader, callback);\n\n        if (typeof setImmediate === \"function\") {\n          // node >= 0.9.0\n          return setImmediate(retry);\n        } else {\n          // node < 0.9.0\n          return process.nextTick(retry);\n        }\n      }\n\n      return callback(e);\n    }\n\n    if (typeof module !== \"function\" && _typeof(module) !== \"object\") {\n      return callback(new LoaderLoadingError(\"Module '\" + loader.path + \"' is not a loader (export function or es6 module)\"));\n    }\n\n    loader.normal = typeof module === \"function\" ? module : module[\"default\"];\n    loader.pitch = module.pitch;\n    loader.raw = module.raw;\n\n    if (typeof loader.normal !== \"function\" && typeof loader.pitch !== \"function\") {\n      return callback(new LoaderLoadingError(\"Module '\" + loader.path + \"' is not a loader (must have normal or pitch function)\"));\n    }\n\n    callback();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}