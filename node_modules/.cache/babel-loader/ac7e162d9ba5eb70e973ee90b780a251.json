{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SortableSet = require(\"./SortableSet\");\n/**\n * @template T\n * @template K\n * Multi layer bucket sorted set\n * Supports adding non-existing items (DO NOT ADD ITEM TWICE)\n * Supports removing exiting items (DO NOT REMOVE ITEM NOT IN SET)\n * Supports popping the first items according to defined order\n * Supports iterating all items without order\n * Supports updating an item in an efficient way\n * Supports size property, which is the number of items\n * Items are lazy partially sorted when needed\n */\n\n\nvar LazyBucketSortedSet = /*#__PURE__*/function () {\n  /**\n   * @param {function(T): K} getKey function to get key from item\n   * @param {function(K, K): number} comparator comparator to sort keys\n   * @param  {...((function(T): any) | (function(any, any): number))} args more pairs of getKey and comparator plus optional final comparator for the last layer\n   */\n  function LazyBucketSortedSet(getKey, comparator) {\n    _classCallCheck(this, LazyBucketSortedSet);\n\n    this._getKey = getKey;\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    this._innerArgs = args;\n    this._leaf = args.length <= 1;\n    this._keys = new SortableSet(undefined, comparator);\n    /** @type {Map<K, LazyBucketSortedSet<T, any> | SortableSet<T>>} */\n\n    this._map = new Map();\n    this._unsortedItems = new Set();\n    this.size = 0;\n  }\n  /**\n   * @param {T} item an item\n   * @returns {void}\n   */\n\n\n  _createClass(LazyBucketSortedSet, [{\n    key: \"add\",\n    value: function add(item) {\n      this.size++;\n\n      this._unsortedItems.add(item);\n    }\n    /**\n     * @param {K} key key of item\n     * @param {T} item the item\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_addInternal\",\n    value: function _addInternal(key, item) {\n      var entry = this._map.get(key);\n\n      if (entry === undefined) {\n        entry = this._leaf ? new SortableSet(undefined, this._innerArgs[0]) : _construct(\n        /** @type {any} */\n        LazyBucketSortedSet, _toConsumableArray(this._innerArgs));\n\n        this._keys.add(key);\n\n        this._map.set(key, entry);\n      }\n\n      entry.add(item);\n    }\n    /**\n     * @param {T} item an item\n     * @returns {void}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(item) {\n      this.size--;\n\n      if (this._unsortedItems.has(item)) {\n        this._unsortedItems[\"delete\"](item);\n\n        return;\n      }\n\n      var key = this._getKey(item);\n\n      var entry = this._map.get(key);\n\n      entry[\"delete\"](item);\n\n      if (entry.size === 0) {\n        this._deleteKey(key);\n      }\n    }\n    /**\n     * @param {K} key key to be removed\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_deleteKey\",\n    value: function _deleteKey(key) {\n      this._keys[\"delete\"](key);\n\n      this._map[\"delete\"](key);\n    }\n    /**\n     * @returns {T | undefined} an item\n     */\n\n  }, {\n    key: \"popFirst\",\n    value: function popFirst() {\n      if (this.size === 0) return undefined;\n      this.size--;\n\n      if (this._unsortedItems.size > 0) {\n        var _iterator = _createForOfIteratorHelper(this._unsortedItems),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n\n            var _key2 = this._getKey(item);\n\n            this._addInternal(_key2, item);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._unsortedItems.clear();\n      }\n\n      this._keys.sort();\n\n      var key = this._keys.values().next().value;\n\n      var entry = this._map.get(key);\n\n      if (this._leaf) {\n        var leafEntry =\n        /** @type {SortableSet<T>} */\n        entry;\n        leafEntry.sort();\n        var _item = leafEntry.values().next().value;\n        leafEntry[\"delete\"](_item);\n\n        if (leafEntry.size === 0) {\n          this._deleteKey(key);\n        }\n\n        return _item;\n      } else {\n        var nodeEntry =\n        /** @type {LazyBucketSortedSet<T, any>} */\n        entry;\n\n        var _item2 = nodeEntry.popFirst();\n\n        if (nodeEntry.size === 0) {\n          this._deleteKey(key);\n        }\n\n        return _item2;\n      }\n    }\n    /**\n     * @param {T} item to be updated item\n     * @returns {function(true=): void} finish update\n     */\n\n  }, {\n    key: \"startUpdate\",\n    value: function startUpdate(item) {\n      var _this = this;\n\n      if (this._unsortedItems.has(item)) {\n        return function (remove) {\n          if (remove) {\n            _this._unsortedItems[\"delete\"](item);\n\n            _this.size--;\n            return;\n          }\n        };\n      }\n\n      var key = this._getKey(item);\n\n      if (this._leaf) {\n        var oldEntry =\n        /** @type {SortableSet<T>} */\n        this._map.get(key);\n\n        return function (remove) {\n          if (remove) {\n            _this.size--;\n            oldEntry[\"delete\"](item);\n\n            if (oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            return;\n          }\n\n          var newKey = _this._getKey(item);\n\n          if (key === newKey) {\n            // This flags the sortable set as unordered\n            oldEntry.add(item);\n          } else {\n            oldEntry[\"delete\"](item);\n\n            if (oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            _this._addInternal(newKey, item);\n          }\n        };\n      } else {\n        var _oldEntry =\n        /** @type {LazyBucketSortedSet<T, any>} */\n        this._map.get(key);\n\n        var finishUpdate = _oldEntry.startUpdate(item);\n\n        return function (remove) {\n          if (remove) {\n            _this.size--;\n            finishUpdate(true);\n\n            if (_oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            return;\n          }\n\n          var newKey = _this._getKey(item);\n\n          if (key === newKey) {\n            finishUpdate();\n          } else {\n            finishUpdate(true);\n\n            if (_oldEntry.size === 0) {\n              _this._deleteKey(key);\n            }\n\n            _this._addInternal(newKey, item);\n          }\n        };\n      }\n    }\n    /**\n     * @param {Iterator<T>[]} iterators list of iterators to append to\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_appendIterators\",\n    value: function _appendIterators(iterators) {\n      if (this._unsortedItems.size > 0) iterators.push(this._unsortedItems[Symbol.iterator]());\n\n      var _iterator2 = _createForOfIteratorHelper(this._keys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n\n          var entry = this._map.get(key);\n\n          if (this._leaf) {\n            var leafEntry =\n            /** @type {SortableSet<T>} */\n            entry;\n            var iterator = leafEntry[Symbol.iterator]();\n            iterators.push(iterator);\n          } else {\n            var nodeEntry =\n            /** @type {LazyBucketSortedSet<T, any>} */\n            entry;\n\n            nodeEntry._appendIterators(iterators);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * @returns {Iterator<T>} the iterator\n     */\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      var iterators = [];\n\n      this._appendIterators(iterators);\n\n      iterators.reverse();\n      var currentIterator = iterators.pop();\n      return {\n        next: function next() {\n          var res = currentIterator.next();\n\n          if (res.done) {\n            if (iterators.length === 0) return res;\n            currentIterator = iterators.pop();\n            return currentIterator.next();\n          }\n\n          return res;\n        }\n      };\n    }\n  }]);\n\n  return LazyBucketSortedSet;\n}();\n\nmodule.exports = LazyBucketSortedSet;","map":null,"metadata":{},"sourceType":"module"}