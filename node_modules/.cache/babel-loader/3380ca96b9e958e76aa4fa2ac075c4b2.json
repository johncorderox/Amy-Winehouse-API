{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/IgnorePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/IgnorePlugin\").IgnorePluginOptions} IgnorePluginOptions */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar IgnorePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {IgnorePluginOptions} options IgnorePlugin options\n   */\n  function IgnorePlugin(options) {\n    _classCallCheck(this, IgnorePlugin);\n\n    // TODO webpack 5 remove this compat-layer\n    if (arguments.length > 1 || options instanceof RegExp) {\n      options = {\n        resourceRegExp: arguments[0],\n        contextRegExp: arguments[1]\n      };\n    }\n\n    validateOptions(schema, options, \"IgnorePlugin\");\n    this.options = options;\n    /** @private @type {Function} */\n\n    this.checkIgnore = this.checkIgnore.bind(this);\n  }\n  /**\n   * Note that if \"contextRegExp\" is given, both the \"resourceRegExp\"\n   * and \"contextRegExp\" have to match.\n   *\n   * @param {TODO} result result\n   * @returns {TODO|null} returns result or null if result should be ignored\n   */\n\n\n  _createClass(IgnorePlugin, [{\n    key: \"checkIgnore\",\n    value: function checkIgnore(result) {\n      if (!result) return result;\n\n      if (\"checkResource\" in this.options && this.options.checkResource && this.options.checkResource(result.request, result.context)) {\n        // TODO webpack 5 remove checkContext, as checkResource already gets context\n        if (\"checkContext\" in this.options && this.options.checkContext) {\n          if (this.options.checkContext(result.context)) {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n\n      if (\"resourceRegExp\" in this.options && this.options.resourceRegExp && this.options.resourceRegExp.test(result.request)) {\n        if (\"contextRegExp\" in this.options && this.options.contextRegExp) {\n          // if \"contextRegExp\" is given,\n          // both the \"resourceRegExp\" and \"contextRegExp\" have to match.\n          if (this.options.contextRegExp.test(result.context)) {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * @param {Compiler} compiler Webpack Compiler\n     * @returns {void}\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.normalModuleFactory.tap(\"IgnorePlugin\", function (nmf) {\n        nmf.hooks.beforeResolve.tap(\"IgnorePlugin\", _this.checkIgnore);\n      });\n      compiler.hooks.contextModuleFactory.tap(\"IgnorePlugin\", function (cmf) {\n        cmf.hooks.beforeResolve.tap(\"IgnorePlugin\", _this.checkIgnore);\n      });\n    }\n  }]);\n\n  return IgnorePlugin;\n}();\n\nmodule.exports = IgnorePlugin;","map":null,"metadata":{},"sourceType":"module"}