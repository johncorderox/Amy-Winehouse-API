{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Queue = require(\"./util/Queue\");\n\nvar addToSet = function addToSet(a, b) {\n  var _iterator = _createForOfIteratorHelper(b),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      a.add(item);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar FlagDependencyExportsPlugin = /*#__PURE__*/function () {\n  function FlagDependencyExportsPlugin() {\n    _classCallCheck(this, FlagDependencyExportsPlugin);\n  }\n\n  _createClass(FlagDependencyExportsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"FlagDependencyExportsPlugin\", function (compilation) {\n        compilation.hooks.finishModules.tap(\"FlagDependencyExportsPlugin\", function (modules) {\n          var dependencies = new Map();\n          var queue = new Queue();\n          var module;\n          var moduleWithExports;\n          var moduleProvidedExports;\n          var providedExportsAreTemporary;\n\n          var processDependenciesBlock = function processDependenciesBlock(depBlock) {\n            var _iterator2 = _createForOfIteratorHelper(depBlock.dependencies),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var dep = _step2.value;\n                if (processDependency(dep)) return true;\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            var _iterator3 = _createForOfIteratorHelper(depBlock.variables),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var variable = _step3.value;\n\n                var _iterator5 = _createForOfIteratorHelper(variable.dependencies),\n                    _step5;\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var _dep = _step5.value;\n                    if (processDependency(_dep)) return true;\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            var _iterator4 = _createForOfIteratorHelper(depBlock.blocks),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var block = _step4.value;\n                if (processDependenciesBlock(block)) return true;\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n\n            return false;\n          };\n\n          var processDependency = function processDependency(dep) {\n            var exportDesc = dep.getExports && dep.getExports();\n            if (!exportDesc) return;\n            moduleWithExports = true;\n            var exports = exportDesc.exports; // break early if it's only in the worst state\n\n            if (module.buildMeta.providedExports === true) {\n              return true;\n            } // break if it should move to the worst state\n\n\n            if (exports === true) {\n              module.buildMeta.providedExports = true;\n              return true;\n            } // merge in new exports\n\n\n            if (Array.isArray(exports)) {\n              addToSet(moduleProvidedExports, exports);\n            } // store dependencies\n\n\n            var exportDeps = exportDesc.dependencies;\n\n            if (exportDeps) {\n              providedExportsAreTemporary = true;\n\n              var _iterator6 = _createForOfIteratorHelper(exportDeps),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var exportDependency = _step6.value;\n                  // add dependency for this module\n                  var set = dependencies.get(exportDependency);\n\n                  if (set === undefined) {\n                    dependencies.set(exportDependency, new Set([module]));\n                  } else {\n                    set.add(module);\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            }\n\n            return false;\n          };\n\n          var notifyDependencies = function notifyDependencies() {\n            var deps = dependencies.get(module);\n\n            if (deps !== undefined) {\n              var _iterator7 = _createForOfIteratorHelper(deps),\n                  _step7;\n\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  var dep = _step7.value;\n                  queue.enqueue(dep);\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n            }\n          };\n\n          var notifyDependenciesIfDifferent = function notifyDependenciesIfDifferent(set, array) {\n            var deps = dependencies.get(module);\n\n            if (deps !== undefined) {\n              if (set.size === array.length) {\n                var i = 0;\n                var different = false;\n\n                var _iterator8 = _createForOfIteratorHelper(set),\n                    _step8;\n\n                try {\n                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                    var item = _step8.value;\n\n                    if (item !== array[i++]) {\n                      different = true;\n                      break;\n                    }\n                  }\n                } catch (err) {\n                  _iterator8.e(err);\n                } finally {\n                  _iterator8.f();\n                }\n\n                if (!different) return;\n              }\n\n              var _iterator9 = _createForOfIteratorHelper(deps),\n                  _step9;\n\n              try {\n                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                  var dep = _step9.value;\n                  queue.enqueue(dep);\n                }\n              } catch (err) {\n                _iterator9.e(err);\n              } finally {\n                _iterator9.f();\n              }\n            }\n          }; // Start with all modules without provided exports\n\n\n          var _iterator10 = _createForOfIteratorHelper(modules),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var _module = _step10.value;\n\n              if (_module.buildInfo.temporaryProvidedExports) {\n                // Clear exports when they are temporary\n                // and recreate them\n                _module.buildMeta.providedExports = null;\n                queue.enqueue(_module);\n              } else if (!_module.buildMeta.providedExports) {\n                queue.enqueue(_module);\n              }\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n\n          while (queue.length > 0) {\n            module = queue.dequeue();\n\n            if (module.buildMeta.providedExports !== true) {\n              moduleWithExports = module.buildMeta && module.buildMeta.exportsType;\n              moduleProvidedExports = new Set();\n              providedExportsAreTemporary = false;\n              processDependenciesBlock(module);\n              module.buildInfo.temporaryProvidedExports = providedExportsAreTemporary;\n\n              if (!moduleWithExports) {\n                notifyDependencies();\n                module.buildMeta.providedExports = true;\n              } else if (module.buildMeta.providedExports === true) {\n                notifyDependencies();\n              } else if (!module.buildMeta.providedExports) {\n                notifyDependencies();\n                module.buildMeta.providedExports = Array.from(moduleProvidedExports);\n              } else {\n                notifyDependenciesIfDifferent(moduleProvidedExports, module.buildMeta.providedExports);\n                module.buildMeta.providedExports = Array.from(moduleProvidedExports);\n              }\n            }\n          }\n        });\n        var providedExportsCache = new WeakMap();\n        compilation.hooks.rebuildModule.tap(\"FlagDependencyExportsPlugin\", function (module) {\n          providedExportsCache.set(module, module.buildMeta.providedExports);\n        });\n        compilation.hooks.finishRebuildingModule.tap(\"FlagDependencyExportsPlugin\", function (module) {\n          module.buildMeta.providedExports = providedExportsCache.get(module);\n        });\n      });\n    }\n  }]);\n\n  return FlagDependencyExportsPlugin;\n}();\n\nmodule.exports = FlagDependencyExportsPlugin;","map":null,"metadata":{},"sourceType":"module"}