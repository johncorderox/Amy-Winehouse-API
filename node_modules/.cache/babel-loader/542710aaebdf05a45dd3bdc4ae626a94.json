{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function ModuleAppendPlugin(source, appending, target) {\n    _classCallCheck(this, ModuleAppendPlugin);\n\n    this.source = source;\n    this.appending = appending;\n    this.target = target;\n  }\n\n  _createClass(ModuleAppendPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"ModuleAppendPlugin\", function (request, resolveContext, callback) {\n        var i = request.request.indexOf(\"/\"),\n            j = request.request.indexOf(\"\\\\\");\n        var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;\n        var moduleName, remainingRequest;\n\n        if (p < 0) {\n          moduleName = request.request;\n          remainingRequest = \"\";\n        } else {\n          moduleName = request.request.substr(0, p);\n          remainingRequest = request.request.substr(p);\n        }\n\n        if (moduleName === \".\" || moduleName === \"..\") return callback();\n        var moduleFinalName = moduleName + _this.appending;\n        var obj = Object.assign({}, request, {\n          request: moduleFinalName + remainingRequest\n        });\n        resolver.doResolve(target, obj, \"module variation \" + moduleFinalName, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return ModuleAppendPlugin;\n}();","map":null,"metadata":{},"sourceType":"module"}