{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar RequireResolveDependency = require(\"./RequireResolveDependency\");\n\nvar RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\n\nvar RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar RequireResolveDependencyParserPlugin = /*#__PURE__*/function () {\n  function RequireResolveDependencyParserPlugin(options) {\n    _classCallCheck(this, RequireResolveDependencyParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(RequireResolveDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var options = this.options;\n\n      var process = function process(expr, weak) {\n        if (expr.arguments.length !== 1) return;\n        var param = parser.evaluateExpression(expr.arguments[0]);\n\n        if (param.isConditional()) {\n          var _iterator = _createForOfIteratorHelper(param.options),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var option = _step.value;\n              var result = processItem(expr, option, weak);\n\n              if (result === undefined) {\n                processContext(expr, option, weak);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var dep = new RequireResolveHeaderDependency(expr.callee.range);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          return true;\n        } else {\n          var _result = processItem(expr, param, weak);\n\n          if (_result === undefined) {\n            processContext(expr, param, weak);\n          }\n\n          var _dep = new RequireResolveHeaderDependency(expr.callee.range);\n\n          _dep.loc = expr.loc;\n          parser.state.current.addDependency(_dep);\n          return true;\n        }\n      };\n\n      var processItem = function processItem(expr, param, weak) {\n        if (param.isString()) {\n          var dep = new RequireResolveDependency(param.string, param.range);\n          dep.loc = expr.loc;\n          dep.optional = !!parser.scope.inTry;\n          dep.weak = weak;\n          parser.state.current.addDependency(dep);\n          return true;\n        }\n      };\n\n      var processContext = function processContext(expr, param, weak) {\n        var dep = ContextDependencyHelpers.create(RequireResolveContextDependency, param.range, param, expr, options, {\n          mode: weak ? \"weak\" : \"sync\"\n        }, parser);\n        if (!dep) return;\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      };\n\n      parser.hooks.call[\"for\"](\"require.resolve\").tap(\"RequireResolveDependencyParserPlugin\", function (expr) {\n        return process(expr, false);\n      });\n      parser.hooks.call[\"for\"](\"require.resolveWeak\").tap(\"RequireResolveDependencyParserPlugin\", function (expr) {\n        return process(expr, true);\n      });\n    }\n  }]);\n\n  return RequireResolveDependencyParserPlugin;\n}();\n\nmodule.exports = RequireResolveDependencyParserPlugin;","map":null,"metadata":{},"sourceType":"module"}