{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ModuleReason = /*#__PURE__*/function () {\n  /**\n   * @param {Module} module the referencing module\n   * @param {Dependency} dependency the referencing dependency\n   * @param {string=} explanation some extra detail\n   */\n  function ModuleReason(module, dependency, explanation) {\n    _classCallCheck(this, ModuleReason);\n\n    this.module = module;\n    this.dependency = dependency;\n    this.explanation = explanation;\n    this._chunks = null;\n  }\n\n  _createClass(ModuleReason, [{\n    key: \"hasChunk\",\n    value: function hasChunk(chunk) {\n      if (this._chunks) {\n        if (this._chunks.has(chunk)) return true;\n      } else if (this.module && this.module._chunks.has(chunk)) return true;\n\n      return false;\n    }\n  }, {\n    key: \"rewriteChunks\",\n    value: function rewriteChunks(oldChunk, newChunks) {\n      if (!this._chunks) {\n        if (this.module) {\n          if (!this.module._chunks.has(oldChunk)) return;\n          this._chunks = new Set(this.module._chunks);\n        } else {\n          this._chunks = new Set();\n        }\n      }\n\n      if (this._chunks.has(oldChunk)) {\n        this._chunks[\"delete\"](oldChunk);\n\n        for (var i = 0; i < newChunks.length; i++) {\n          this._chunks.add(newChunks[i]);\n        }\n      }\n    }\n  }]);\n\n  return ModuleReason;\n}();\n\nmodule.exports = ModuleReason;","map":null,"metadata":{},"sourceType":"module"}