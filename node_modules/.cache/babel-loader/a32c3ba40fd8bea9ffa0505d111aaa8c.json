{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar WebpackError = require(\"./WebpackError\");\n/** @typedef {import(\"./Module\")} Module */\n\n\nvar ModuleParseError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(ModuleParseError, _WebpackError);\n\n  var _super = _createSuper(ModuleParseError);\n\n  /**\n   * @param {Module} module the errored module\n   * @param {string} source source code\n   * @param {Error&any} err the parse error\n   * @param {string[]} loaders the loaders used\n   */\n  function ModuleParseError(module, source, err, loaders) {\n    var _this;\n\n    _classCallCheck(this, ModuleParseError);\n\n    var message = \"Module parse failed: \" + err.message;\n    var loc = undefined;\n\n    if (loaders.length >= 1) {\n      message += \"\\nFile was processed with these loaders:\".concat(loaders.map(function (loader) {\n        return \"\\n * \".concat(loader);\n      }).join(\"\"));\n      message += \"\\nYou may need an additional loader to handle the result of these loaders.\";\n    } else {\n      message += \"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n    }\n\n    if (err.loc && _typeof(err.loc) === \"object\" && typeof err.loc.line === \"number\") {\n      var lineNumber = err.loc.line;\n\n      if (/[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)) {\n        // binary file\n        message += \"\\n(Source code omitted for this binary file)\";\n      } else {\n        var sourceLines = source.split(/\\r?\\n/);\n        var start = Math.max(0, lineNumber - 3);\n        var linesBefore = sourceLines.slice(start, lineNumber - 1);\n        var theLine = sourceLines[lineNumber - 1];\n        var linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n        message += linesBefore.map(function (l) {\n          return \"\\n| \".concat(l);\n        }).join(\"\") + \"\\n> \".concat(theLine) + linesAfter.map(function (l) {\n          return \"\\n| \".concat(l);\n        }).join(\"\");\n      }\n\n      loc = err.loc;\n    } else {\n      message += \"\\n\" + err.stack;\n    }\n\n    _this = _super.call(this, message);\n    _this.name = \"ModuleParseError\";\n    _this.module = module;\n    _this.loc = loc;\n    _this.error = err;\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n\n  return ModuleParseError;\n}(WebpackError);\n\nmodule.exports = ModuleParseError;","map":null,"metadata":{},"sourceType":"module"}