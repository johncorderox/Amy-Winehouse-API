{"ast":null,"code":"var cache = new Map();\n\nvar fs = require('fs');\n\nvar _require = require('path'),\n    dirname = _require.dirname,\n    resolve = _require.resolve;\n\nvar lstat = function lstat(path) {\n  return new Promise(function (res, rej) {\n    return fs.lstat(path, function (er, st) {\n      return er ? rej(er) : res(st);\n    });\n  });\n};\n\nvar inferOwner = function inferOwner(path) {\n  path = resolve(path);\n  if (cache.has(path)) return Promise.resolve(cache.get(path));\n\n  var statThen = function statThen(st) {\n    var uid = st.uid,\n        gid = st.gid;\n    cache.set(path, {\n      uid: uid,\n      gid: gid\n    });\n    return {\n      uid: uid,\n      gid: gid\n    };\n  };\n\n  var parent = dirname(path);\n  var parentTrap = parent === path ? null : function (er) {\n    return inferOwner(parent).then(function (owner) {\n      cache.set(path, owner);\n      return owner;\n    });\n  };\n  return lstat(path).then(statThen, parentTrap);\n};\n\nvar inferOwnerSync = function inferOwnerSync(path) {\n  path = resolve(path);\n  if (cache.has(path)) return cache.get(path);\n  var parent = dirname(path); // avoid obscuring call site by re-throwing\n  // \"catch\" the error by returning from a finally,\n  // only if we're not at the root, and the parent call works.\n\n  var threw = true;\n\n  try {\n    var st = fs.lstatSync(path);\n    threw = false;\n    var uid = st.uid,\n        gid = st.gid;\n    cache.set(path, {\n      uid: uid,\n      gid: gid\n    });\n    return {\n      uid: uid,\n      gid: gid\n    };\n  } finally {\n    if (threw && parent !== path) {\n      var owner = inferOwnerSync(parent);\n      cache.set(path, owner);\n      return owner; // eslint-disable-line no-unsafe-finally\n    }\n  }\n};\n\nvar inflight = new Map();\n\nmodule.exports = function (path) {\n  path = resolve(path);\n  if (inflight.has(path)) return Promise.resolve(inflight.get(path));\n  var p = inferOwner(path).then(function (owner) {\n    inflight[\"delete\"](path);\n    return owner;\n  });\n  inflight.set(path, p);\n  return p;\n};\n\nmodule.exports.sync = inferOwnerSync;\n\nmodule.exports.clearCache = function () {\n  cache.clear();\n  inflight.clear();\n};","map":null,"metadata":{},"sourceType":"module"}