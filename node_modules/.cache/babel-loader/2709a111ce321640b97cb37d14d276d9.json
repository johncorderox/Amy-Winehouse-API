{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar WebpackError = require(\"../WebpackError\");\n\nvar SizeFormatHelpers = require(\"../SizeFormatHelpers\");\n\nmodule.exports = /*#__PURE__*/function (_WebpackError) {\n  _inherits(AssetsOverSizeLimitWarning, _WebpackError);\n\n  var _super = _createSuper(AssetsOverSizeLimitWarning);\n\n  function AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetLimit) {\n    var _this;\n\n    _classCallCheck(this, AssetsOverSizeLimitWarning);\n\n    var assetLists = assetsOverSizeLimit.map(function (asset) {\n      return \"\\n  \".concat(asset.name, \" (\").concat(SizeFormatHelpers.formatSize(asset.size), \")\");\n    }).join(\"\");\n    _this = _super.call(this, \"asset size limit: The following asset(s) exceed the recommended size limit (\".concat(SizeFormatHelpers.formatSize(assetLimit), \").\\nThis can impact web performance.\\nAssets: \").concat(assetLists));\n    _this.name = \"AssetsOverSizeLimitWarning\";\n    _this.assets = assetsOverSizeLimit;\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n\n  return AssetsOverSizeLimitWarning;\n}(WebpackError);","map":null,"metadata":{},"sourceType":"module"}