{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint vars:false, bitwise:true*/\n\n/*jshint indent:4*/\n\n/*global exports:true*/\n(function clone(exports) {\n  'use strict';\n\n  var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;\n\n  function deepCopy(obj) {\n    var ret = {},\n        key,\n        val;\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        val = obj[key];\n\n        if (_typeof(val) === 'object' && val !== null) {\n          ret[key] = deepCopy(val);\n        } else {\n          ret[key] = val;\n        }\n      }\n    }\n\n    return ret;\n  } // based on LLVM libc++ upper_bound / lower_bound\n  // MIT License\n\n\n  function upperBound(array, func) {\n    var diff, len, i, current;\n    len = array.length;\n    i = 0;\n\n    while (len) {\n      diff = len >>> 1;\n      current = i + diff;\n\n      if (func(array[current])) {\n        len = diff;\n      } else {\n        i = current + 1;\n        len -= diff + 1;\n      }\n    }\n\n    return i;\n  }\n\n  Syntax = {\n    AssignmentExpression: 'AssignmentExpression',\n    AssignmentPattern: 'AssignmentPattern',\n    ArrayExpression: 'ArrayExpression',\n    ArrayPattern: 'ArrayPattern',\n    ArrowFunctionExpression: 'ArrowFunctionExpression',\n    AwaitExpression: 'AwaitExpression',\n    // CAUTION: It's deferred to ES7.\n    BlockStatement: 'BlockStatement',\n    BinaryExpression: 'BinaryExpression',\n    BreakStatement: 'BreakStatement',\n    CallExpression: 'CallExpression',\n    CatchClause: 'CatchClause',\n    ClassBody: 'ClassBody',\n    ClassDeclaration: 'ClassDeclaration',\n    ClassExpression: 'ClassExpression',\n    ComprehensionBlock: 'ComprehensionBlock',\n    // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: 'ComprehensionExpression',\n    // CAUTION: It's deferred to ES7.\n    ConditionalExpression: 'ConditionalExpression',\n    ContinueStatement: 'ContinueStatement',\n    DebuggerStatement: 'DebuggerStatement',\n    DirectiveStatement: 'DirectiveStatement',\n    DoWhileStatement: 'DoWhileStatement',\n    EmptyStatement: 'EmptyStatement',\n    ExportAllDeclaration: 'ExportAllDeclaration',\n    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n    ExportNamedDeclaration: 'ExportNamedDeclaration',\n    ExportSpecifier: 'ExportSpecifier',\n    ExpressionStatement: 'ExpressionStatement',\n    ForStatement: 'ForStatement',\n    ForInStatement: 'ForInStatement',\n    ForOfStatement: 'ForOfStatement',\n    FunctionDeclaration: 'FunctionDeclaration',\n    FunctionExpression: 'FunctionExpression',\n    GeneratorExpression: 'GeneratorExpression',\n    // CAUTION: It's deferred to ES7.\n    Identifier: 'Identifier',\n    IfStatement: 'IfStatement',\n    ImportExpression: 'ImportExpression',\n    ImportDeclaration: 'ImportDeclaration',\n    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n    ImportSpecifier: 'ImportSpecifier',\n    Literal: 'Literal',\n    LabeledStatement: 'LabeledStatement',\n    LogicalExpression: 'LogicalExpression',\n    MemberExpression: 'MemberExpression',\n    MetaProperty: 'MetaProperty',\n    MethodDefinition: 'MethodDefinition',\n    ModuleSpecifier: 'ModuleSpecifier',\n    NewExpression: 'NewExpression',\n    ObjectExpression: 'ObjectExpression',\n    ObjectPattern: 'ObjectPattern',\n    Program: 'Program',\n    Property: 'Property',\n    RestElement: 'RestElement',\n    ReturnStatement: 'ReturnStatement',\n    SequenceExpression: 'SequenceExpression',\n    SpreadElement: 'SpreadElement',\n    Super: 'Super',\n    SwitchStatement: 'SwitchStatement',\n    SwitchCase: 'SwitchCase',\n    TaggedTemplateExpression: 'TaggedTemplateExpression',\n    TemplateElement: 'TemplateElement',\n    TemplateLiteral: 'TemplateLiteral',\n    ThisExpression: 'ThisExpression',\n    ThrowStatement: 'ThrowStatement',\n    TryStatement: 'TryStatement',\n    UnaryExpression: 'UnaryExpression',\n    UpdateExpression: 'UpdateExpression',\n    VariableDeclaration: 'VariableDeclaration',\n    VariableDeclarator: 'VariableDeclarator',\n    WhileStatement: 'WhileStatement',\n    WithStatement: 'WithStatement',\n    YieldExpression: 'YieldExpression'\n  };\n  VisitorKeys = {\n    AssignmentExpression: ['left', 'right'],\n    AssignmentPattern: ['left', 'right'],\n    ArrayExpression: ['elements'],\n    ArrayPattern: ['elements'],\n    ArrowFunctionExpression: ['params', 'body'],\n    AwaitExpression: ['argument'],\n    // CAUTION: It's deferred to ES7.\n    BlockStatement: ['body'],\n    BinaryExpression: ['left', 'right'],\n    BreakStatement: ['label'],\n    CallExpression: ['callee', 'arguments'],\n    CatchClause: ['param', 'body'],\n    ClassBody: ['body'],\n    ClassDeclaration: ['id', 'superClass', 'body'],\n    ClassExpression: ['id', 'superClass', 'body'],\n    ComprehensionBlock: ['left', 'right'],\n    // CAUTION: It's deferred to ES7.\n    ComprehensionExpression: ['blocks', 'filter', 'body'],\n    // CAUTION: It's deferred to ES7.\n    ConditionalExpression: ['test', 'consequent', 'alternate'],\n    ContinueStatement: ['label'],\n    DebuggerStatement: [],\n    DirectiveStatement: [],\n    DoWhileStatement: ['body', 'test'],\n    EmptyStatement: [],\n    ExportAllDeclaration: ['source'],\n    ExportDefaultDeclaration: ['declaration'],\n    ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n    ExportSpecifier: ['exported', 'local'],\n    ExpressionStatement: ['expression'],\n    ForStatement: ['init', 'test', 'update', 'body'],\n    ForInStatement: ['left', 'right', 'body'],\n    ForOfStatement: ['left', 'right', 'body'],\n    FunctionDeclaration: ['id', 'params', 'body'],\n    FunctionExpression: ['id', 'params', 'body'],\n    GeneratorExpression: ['blocks', 'filter', 'body'],\n    // CAUTION: It's deferred to ES7.\n    Identifier: [],\n    IfStatement: ['test', 'consequent', 'alternate'],\n    ImportExpression: ['source'],\n    ImportDeclaration: ['specifiers', 'source'],\n    ImportDefaultSpecifier: ['local'],\n    ImportNamespaceSpecifier: ['local'],\n    ImportSpecifier: ['imported', 'local'],\n    Literal: [],\n    LabeledStatement: ['label', 'body'],\n    LogicalExpression: ['left', 'right'],\n    MemberExpression: ['object', 'property'],\n    MetaProperty: ['meta', 'property'],\n    MethodDefinition: ['key', 'value'],\n    ModuleSpecifier: [],\n    NewExpression: ['callee', 'arguments'],\n    ObjectExpression: ['properties'],\n    ObjectPattern: ['properties'],\n    Program: ['body'],\n    Property: ['key', 'value'],\n    RestElement: ['argument'],\n    ReturnStatement: ['argument'],\n    SequenceExpression: ['expressions'],\n    SpreadElement: ['argument'],\n    Super: [],\n    SwitchStatement: ['discriminant', 'cases'],\n    SwitchCase: ['test', 'consequent'],\n    TaggedTemplateExpression: ['tag', 'quasi'],\n    TemplateElement: [],\n    TemplateLiteral: ['quasis', 'expressions'],\n    ThisExpression: [],\n    ThrowStatement: ['argument'],\n    TryStatement: ['block', 'handler', 'finalizer'],\n    UnaryExpression: ['argument'],\n    UpdateExpression: ['argument'],\n    VariableDeclaration: ['declarations'],\n    VariableDeclarator: ['id', 'init'],\n    WhileStatement: ['test', 'body'],\n    WithStatement: ['object', 'body'],\n    YieldExpression: ['argument']\n  }; // unique id\n\n  BREAK = {};\n  SKIP = {};\n  REMOVE = {};\n  VisitorOption = {\n    Break: BREAK,\n    Skip: SKIP,\n    Remove: REMOVE\n  };\n\n  function Reference(parent, key) {\n    this.parent = parent;\n    this.key = key;\n  }\n\n  Reference.prototype.replace = function replace(node) {\n    this.parent[this.key] = node;\n  };\n\n  Reference.prototype.remove = function remove() {\n    if (Array.isArray(this.parent)) {\n      this.parent.splice(this.key, 1);\n      return true;\n    } else {\n      this.replace(null);\n      return false;\n    }\n  };\n\n  function Element(node, path, wrap, ref) {\n    this.node = node;\n    this.path = path;\n    this.wrap = wrap;\n    this.ref = ref;\n  }\n\n  function Controller() {} // API:\n  // return property path array from root to current node\n\n\n  Controller.prototype.path = function path() {\n    var i, iz, j, jz, result, element;\n\n    function addToPath(result, path) {\n      if (Array.isArray(path)) {\n        for (j = 0, jz = path.length; j < jz; ++j) {\n          result.push(path[j]);\n        }\n      } else {\n        result.push(path);\n      }\n    } // root node\n\n\n    if (!this.__current.path) {\n      return null;\n    } // first node is sentinel, second node is root element\n\n\n    result = [];\n\n    for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n      element = this.__leavelist[i];\n      addToPath(result, element.path);\n    }\n\n    addToPath(result, this.__current.path);\n    return result;\n  }; // API:\n  // return type of current node\n\n\n  Controller.prototype.type = function () {\n    var node = this.current();\n    return node.type || this.__current.wrap;\n  }; // API:\n  // return array of parent elements\n\n\n  Controller.prototype.parents = function parents() {\n    var i, iz, result; // first node is sentinel\n\n    result = [];\n\n    for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n      result.push(this.__leavelist[i].node);\n    }\n\n    return result;\n  }; // API:\n  // return current node\n\n\n  Controller.prototype.current = function current() {\n    return this.__current.node;\n  };\n\n  Controller.prototype.__execute = function __execute(callback, element) {\n    var previous, result;\n    result = undefined;\n    previous = this.__current;\n    this.__current = element;\n    this.__state = null;\n\n    if (callback) {\n      result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n    }\n\n    this.__current = previous;\n    return result;\n  }; // API:\n  // notify control skip / break\n\n\n  Controller.prototype.notify = function notify(flag) {\n    this.__state = flag;\n  }; // API:\n  // skip child nodes of current node\n\n\n  Controller.prototype.skip = function () {\n    this.notify(SKIP);\n  }; // API:\n  // break traversals\n\n\n  Controller.prototype['break'] = function () {\n    this.notify(BREAK);\n  }; // API:\n  // remove node\n\n\n  Controller.prototype.remove = function () {\n    this.notify(REMOVE);\n  };\n\n  Controller.prototype.__initialize = function (root, visitor) {\n    this.visitor = visitor;\n    this.root = root;\n    this.__worklist = [];\n    this.__leavelist = [];\n    this.__current = null;\n    this.__state = null;\n    this.__fallback = null;\n\n    if (visitor.fallback === 'iteration') {\n      this.__fallback = Object.keys;\n    } else if (typeof visitor.fallback === 'function') {\n      this.__fallback = visitor.fallback;\n    }\n\n    this.__keys = VisitorKeys;\n\n    if (visitor.keys) {\n      this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n    }\n  };\n\n  function isNode(node) {\n    if (node == null) {\n      return false;\n    }\n\n    return _typeof(node) === 'object' && typeof node.type === 'string';\n  }\n\n  function isProperty(nodeType, key) {\n    return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n  }\n\n  Controller.prototype.traverse = function traverse(root, visitor) {\n    var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;\n\n    this.__initialize(root, visitor);\n\n    sentinel = {}; // reference\n\n    worklist = this.__worklist;\n    leavelist = this.__leavelist; // initialize\n\n    worklist.push(new Element(root, null, null, null));\n    leavelist.push(new Element(null, null, null, null));\n\n    while (worklist.length) {\n      element = worklist.pop();\n\n      if (element === sentinel) {\n        element = leavelist.pop();\n        ret = this.__execute(visitor.leave, element);\n\n        if (this.__state === BREAK || ret === BREAK) {\n          return;\n        }\n\n        continue;\n      }\n\n      if (element.node) {\n        ret = this.__execute(visitor.enter, element);\n\n        if (this.__state === BREAK || ret === BREAK) {\n          return;\n        }\n\n        worklist.push(sentinel);\n        leavelist.push(element);\n\n        if (this.__state === SKIP || ret === SKIP) {\n          continue;\n        }\n\n        node = element.node;\n        nodeType = node.type || element.wrap;\n        candidates = this.__keys[nodeType];\n\n        if (!candidates) {\n          if (this.__fallback) {\n            candidates = this.__fallback(node);\n          } else {\n            throw new Error('Unknown node type ' + nodeType + '.');\n          }\n        }\n\n        current = candidates.length;\n\n        while ((current -= 1) >= 0) {\n          key = candidates[current];\n          candidate = node[key];\n\n          if (!candidate) {\n            continue;\n          }\n\n          if (Array.isArray(candidate)) {\n            current2 = candidate.length;\n\n            while ((current2 -= 1) >= 0) {\n              if (!candidate[current2]) {\n                continue;\n              }\n\n              if (isProperty(nodeType, candidates[current])) {\n                element = new Element(candidate[current2], [key, current2], 'Property', null);\n              } else if (isNode(candidate[current2])) {\n                element = new Element(candidate[current2], [key, current2], null, null);\n              } else {\n                continue;\n              }\n\n              worklist.push(element);\n            }\n          } else if (isNode(candidate)) {\n            worklist.push(new Element(candidate, key, null, null));\n          }\n        }\n      }\n    }\n  };\n\n  Controller.prototype.replace = function replace(root, visitor) {\n    var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;\n\n    function removeElem(element) {\n      var i, key, nextElem, parent;\n\n      if (element.ref.remove()) {\n        // When the reference is an element of an array.\n        key = element.ref.key;\n        parent = element.ref.parent; // If removed from array, then decrease following items' keys.\n\n        i = worklist.length;\n\n        while (i--) {\n          nextElem = worklist[i];\n\n          if (nextElem.ref && nextElem.ref.parent === parent) {\n            if (nextElem.ref.key < key) {\n              break;\n            }\n\n            --nextElem.ref.key;\n          }\n        }\n      }\n    }\n\n    this.__initialize(root, visitor);\n\n    sentinel = {}; // reference\n\n    worklist = this.__worklist;\n    leavelist = this.__leavelist; // initialize\n\n    outer = {\n      root: root\n    };\n    element = new Element(root, null, null, new Reference(outer, 'root'));\n    worklist.push(element);\n    leavelist.push(element);\n\n    while (worklist.length) {\n      element = worklist.pop();\n\n      if (element === sentinel) {\n        element = leavelist.pop();\n        target = this.__execute(visitor.leave, element); // node may be replaced with null,\n        // so distinguish between undefined and null in this place\n\n        if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n          // replace\n          element.ref.replace(target);\n        }\n\n        if (this.__state === REMOVE || target === REMOVE) {\n          removeElem(element);\n        }\n\n        if (this.__state === BREAK || target === BREAK) {\n          return outer.root;\n        }\n\n        continue;\n      }\n\n      target = this.__execute(visitor.enter, element); // node may be replaced with null,\n      // so distinguish between undefined and null in this place\n\n      if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n        // replace\n        element.ref.replace(target);\n        element.node = target;\n      }\n\n      if (this.__state === REMOVE || target === REMOVE) {\n        removeElem(element);\n        element.node = null;\n      }\n\n      if (this.__state === BREAK || target === BREAK) {\n        return outer.root;\n      } // node may be null\n\n\n      node = element.node;\n\n      if (!node) {\n        continue;\n      }\n\n      worklist.push(sentinel);\n      leavelist.push(element);\n\n      if (this.__state === SKIP || target === SKIP) {\n        continue;\n      }\n\n      nodeType = node.type || element.wrap;\n      candidates = this.__keys[nodeType];\n\n      if (!candidates) {\n        if (this.__fallback) {\n          candidates = this.__fallback(node);\n        } else {\n          throw new Error('Unknown node type ' + nodeType + '.');\n        }\n      }\n\n      current = candidates.length;\n\n      while ((current -= 1) >= 0) {\n        key = candidates[current];\n        candidate = node[key];\n\n        if (!candidate) {\n          continue;\n        }\n\n        if (Array.isArray(candidate)) {\n          current2 = candidate.length;\n\n          while ((current2 -= 1) >= 0) {\n            if (!candidate[current2]) {\n              continue;\n            }\n\n            if (isProperty(nodeType, candidates[current])) {\n              element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n            } else if (isNode(candidate[current2])) {\n              element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n            } else {\n              continue;\n            }\n\n            worklist.push(element);\n          }\n        } else if (isNode(candidate)) {\n          worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n        }\n      }\n    }\n\n    return outer.root;\n  };\n\n  function traverse(root, visitor) {\n    var controller = new Controller();\n    return controller.traverse(root, visitor);\n  }\n\n  function replace(root, visitor) {\n    var controller = new Controller();\n    return controller.replace(root, visitor);\n  }\n\n  function extendCommentRange(comment, tokens) {\n    var target;\n    target = upperBound(tokens, function search(token) {\n      return token.range[0] > comment.range[0];\n    });\n    comment.extendedRange = [comment.range[0], comment.range[1]];\n\n    if (target !== tokens.length) {\n      comment.extendedRange[1] = tokens[target].range[0];\n    }\n\n    target -= 1;\n\n    if (target >= 0) {\n      comment.extendedRange[0] = tokens[target].range[1];\n    }\n\n    return comment;\n  }\n\n  function attachComments(tree, providedComments, tokens) {\n    // At first, we should calculate extended comment ranges.\n    var comments = [],\n        comment,\n        len,\n        i,\n        cursor;\n\n    if (!tree.range) {\n      throw new Error('attachComments needs range information');\n    } // tokens array is empty, we attach comments to tree as 'leadingComments'\n\n\n    if (!tokens.length) {\n      if (providedComments.length) {\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n          comment = deepCopy(providedComments[i]);\n          comment.extendedRange = [0, tree.range[0]];\n          comments.push(comment);\n        }\n\n        tree.leadingComments = comments;\n      }\n\n      return tree;\n    }\n\n    for (i = 0, len = providedComments.length; i < len; i += 1) {\n      comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n    } // This is based on John Freeman's implementation.\n\n\n    cursor = 0;\n    traverse(tree, {\n      enter: function enter(node) {\n        var comment;\n\n        while (cursor < comments.length) {\n          comment = comments[cursor];\n\n          if (comment.extendedRange[1] > node.range[0]) {\n            break;\n          }\n\n          if (comment.extendedRange[1] === node.range[0]) {\n            if (!node.leadingComments) {\n              node.leadingComments = [];\n            }\n\n            node.leadingComments.push(comment);\n            comments.splice(cursor, 1);\n          } else {\n            cursor += 1;\n          }\n        } // already out of owned node\n\n\n        if (cursor === comments.length) {\n          return VisitorOption.Break;\n        }\n\n        if (comments[cursor].extendedRange[0] > node.range[1]) {\n          return VisitorOption.Skip;\n        }\n      }\n    });\n    cursor = 0;\n    traverse(tree, {\n      leave: function leave(node) {\n        var comment;\n\n        while (cursor < comments.length) {\n          comment = comments[cursor];\n\n          if (node.range[1] < comment.extendedRange[0]) {\n            break;\n          }\n\n          if (node.range[1] === comment.extendedRange[0]) {\n            if (!node.trailingComments) {\n              node.trailingComments = [];\n            }\n\n            node.trailingComments.push(comment);\n            comments.splice(cursor, 1);\n          } else {\n            cursor += 1;\n          }\n        } // already out of owned node\n\n\n        if (cursor === comments.length) {\n          return VisitorOption.Break;\n        }\n\n        if (comments[cursor].extendedRange[0] > node.range[1]) {\n          return VisitorOption.Skip;\n        }\n      }\n    });\n    return tree;\n  }\n\n  exports.version = require('./package.json').version;\n  exports.Syntax = Syntax;\n  exports.traverse = traverse;\n  exports.replace = replace;\n  exports.attachComments = attachComments;\n  exports.VisitorKeys = VisitorKeys;\n  exports.VisitorOption = VisitorOption;\n  exports.Controller = Controller;\n\n  exports.cloneEnvironment = function () {\n    return clone({});\n  };\n\n  return exports;\n})(exports);\n/* vim: set sw=4 ts=4 et tw=80 : */","map":null,"metadata":{},"sourceType":"module"}