{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DelegatedModule = require(\"./DelegatedModule\"); // options.source\n// options.type\n// options.context\n// options.scope\n// options.content\n\n\nvar DelegatedModuleFactoryPlugin = /*#__PURE__*/function () {\n  function DelegatedModuleFactoryPlugin(options) {\n    _classCallCheck(this, DelegatedModuleFactoryPlugin);\n\n    this.options = options;\n    options.type = options.type || \"require\";\n    options.extensions = options.extensions || [\"\", \".wasm\", \".mjs\", \".js\", \".json\"];\n  }\n\n  _createClass(DelegatedModuleFactoryPlugin, [{\n    key: \"apply\",\n    value: function apply(normalModuleFactory) {\n      var _this = this;\n\n      var scope = this.options.scope;\n\n      if (scope) {\n        normalModuleFactory.hooks.factory.tap(\"DelegatedModuleFactoryPlugin\", function (factory) {\n          return function (data, callback) {\n            var dependency = data.dependencies[0];\n            var request = dependency.request;\n\n            if (request && request.indexOf(scope + \"/\") === 0) {\n              var innerRequest = \".\" + request.substr(scope.length);\n              var resolved;\n\n              if (innerRequest in _this.options.content) {\n                resolved = _this.options.content[innerRequest];\n                return callback(null, new DelegatedModule(_this.options.source, resolved, _this.options.type, innerRequest, request));\n              }\n\n              for (var i = 0; i < _this.options.extensions.length; i++) {\n                var extension = _this.options.extensions[i];\n                var requestPlusExt = innerRequest + extension;\n\n                if (requestPlusExt in _this.options.content) {\n                  resolved = _this.options.content[requestPlusExt];\n                  return callback(null, new DelegatedModule(_this.options.source, resolved, _this.options.type, requestPlusExt, request + extension));\n                }\n              }\n            }\n\n            return factory(data, callback);\n          };\n        });\n      } else {\n        normalModuleFactory.hooks.module.tap(\"DelegatedModuleFactoryPlugin\", function (module) {\n          if (module.libIdent) {\n            var request = module.libIdent(_this.options);\n\n            if (request && request in _this.options.content) {\n              var resolved = _this.options.content[request];\n              return new DelegatedModule(_this.options.source, resolved, _this.options.type, request, module);\n            }\n          }\n\n          return module;\n        });\n      }\n    }\n  }]);\n\n  return DelegatedModuleFactoryPlugin;\n}();\n\nmodule.exports = DelegatedModuleFactoryPlugin;","map":null,"metadata":{},"sourceType":"module"}