{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\n\nvar NodeOutputFileSystem = require(\"./NodeOutputFileSystem\");\n\nvar NodeJsInputFileSystem = require(\"enhanced-resolve/lib/NodeJsInputFileSystem\");\n\nvar CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\n\nvar createConsoleLogger = require(\"../logging/createConsoleLogger\");\n\nvar nodeConsole = require(\"./nodeConsole\");\n\nvar NodeEnvironmentPlugin = /*#__PURE__*/function () {\n  function NodeEnvironmentPlugin(options) {\n    _classCallCheck(this, NodeEnvironmentPlugin);\n\n    this.options = options || {};\n  }\n\n  _createClass(NodeEnvironmentPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.infrastructureLogger = createConsoleLogger(Object.assign({\n        level: \"info\",\n        debug: false,\n        console: nodeConsole\n      }, this.options.infrastructureLogging));\n      compiler.inputFileSystem = new CachedInputFileSystem(new NodeJsInputFileSystem(), 60000);\n      var inputFileSystem = compiler.inputFileSystem;\n      compiler.outputFileSystem = new NodeOutputFileSystem();\n      compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);\n      compiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", function (compiler) {\n        if (compiler.inputFileSystem === inputFileSystem) inputFileSystem.purge();\n      });\n    }\n  }]);\n\n  return NodeEnvironmentPlugin;\n}();\n\nmodule.exports = NodeEnvironmentPlugin;","map":null,"metadata":{},"sourceType":"module"}