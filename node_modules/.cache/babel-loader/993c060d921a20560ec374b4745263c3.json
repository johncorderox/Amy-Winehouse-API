{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar path = require(\"path\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function MainFieldPlugin(source, options, target) {\n    _classCallCheck(this, MainFieldPlugin);\n\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n\n  _createClass(MainFieldPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"MainFieldPlugin\", function (request, resolveContext, callback) {\n        if (request.path !== request.descriptionFileRoot) return callback();\n        if (request.alreadyTriedMainField === request.descriptionFilePath) return callback();\n        var content = request.descriptionFileData;\n        var filename = path.basename(request.descriptionFilePath);\n        var mainModule;\n        var field = _this.options.name;\n\n        if (Array.isArray(field)) {\n          var current = content;\n\n          for (var j = 0; j < field.length; j++) {\n            if (current === null || _typeof(current) !== \"object\") {\n              current = null;\n              break;\n            }\n\n            current = current[field[j]];\n          }\n\n          if (typeof current === \"string\") {\n            mainModule = current;\n          }\n        } else {\n          if (typeof content[field] === \"string\") {\n            mainModule = content[field];\n          }\n        }\n\n        if (!mainModule) return callback();\n        if (_this.options.forceRelative && !/^\\.\\.?\\//.test(mainModule)) mainModule = \"./\" + mainModule;\n        var obj = Object.assign({}, request, {\n          request: mainModule,\n          alreadyTriedMainField: request.descriptionFilePath\n        });\n        return resolver.doResolve(target, obj, \"use \" + mainModule + \" from \" + _this.options.name + \" in \" + filename, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return MainFieldPlugin;\n}();","map":null,"metadata":{},"sourceType":"module"}