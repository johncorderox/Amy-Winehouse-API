{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar HarmonyCompatibilityDependency = require(\"./HarmonyCompatibilityDependency\");\n\nvar HarmonyInitDependency = require(\"./HarmonyInitDependency\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function HarmonyDetectionParserPlugin() {\n    _classCallCheck(this, HarmonyDetectionParserPlugin);\n  }\n\n  _createClass(HarmonyDetectionParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.program.tap(\"HarmonyDetectionParserPlugin\", function (ast) {\n        var isStrictHarmony = parser.state.module.type === \"javascript/esm\";\n        var isHarmony = isStrictHarmony || ast.body.some(function (statement) {\n          return statement.type === \"ImportDeclaration\" || statement.type === \"ExportDefaultDeclaration\" || statement.type === \"ExportNamedDeclaration\" || statement.type === \"ExportAllDeclaration\";\n        });\n\n        if (isHarmony) {\n          var _module = parser.state.module;\n          var compatDep = new HarmonyCompatibilityDependency(_module);\n          compatDep.loc = {\n            start: {\n              line: -1,\n              column: 0\n            },\n            end: {\n              line: -1,\n              column: 0\n            },\n            index: -3\n          };\n\n          _module.addDependency(compatDep);\n\n          var initDep = new HarmonyInitDependency(_module);\n          initDep.loc = {\n            start: {\n              line: -1,\n              column: 0\n            },\n            end: {\n              line: -1,\n              column: 0\n            },\n            index: -2\n          };\n\n          _module.addDependency(initDep);\n\n          parser.state.harmonyParserScope = parser.state.harmonyParserScope || {};\n          parser.scope.isStrict = true;\n          _module.buildMeta.exportsType = \"namespace\";\n          _module.buildInfo.strict = true;\n          _module.buildInfo.exportsArgument = \"__webpack_exports__\";\n\n          if (isStrictHarmony) {\n            _module.buildMeta.strictHarmonyModule = true;\n            _module.buildInfo.moduleArgument = \"__webpack_module__\";\n          }\n        }\n      });\n\n      var skipInHarmony = function skipInHarmony() {\n        var module = parser.state.module;\n\n        if (module && module.buildMeta && module.buildMeta.exportsType) {\n          return true;\n        }\n      };\n\n      var nullInHarmony = function nullInHarmony() {\n        var module = parser.state.module;\n\n        if (module && module.buildMeta && module.buildMeta.exportsType) {\n          return null;\n        }\n      };\n\n      var nonHarmonyIdentifiers = [\"define\", \"exports\"];\n\n      for (var _i = 0, _nonHarmonyIdentifier = nonHarmonyIdentifiers; _i < _nonHarmonyIdentifier.length; _i++) {\n        var identifer = _nonHarmonyIdentifier[_i];\n        parser.hooks.evaluateTypeof[\"for\"](identifer).tap(\"HarmonyDetectionParserPlugin\", nullInHarmony);\n        parser.hooks[\"typeof\"][\"for\"](identifer).tap(\"HarmonyDetectionParserPlugin\", skipInHarmony);\n        parser.hooks.evaluate[\"for\"](identifer).tap(\"HarmonyDetectionParserPlugin\", nullInHarmony);\n        parser.hooks.expression[\"for\"](identifer).tap(\"HarmonyDetectionParserPlugin\", skipInHarmony);\n        parser.hooks.call[\"for\"](identifer).tap(\"HarmonyDetectionParserPlugin\", skipInHarmony);\n      }\n    }\n  }]);\n\n  return HarmonyDetectionParserPlugin;\n}();","map":null,"metadata":{},"sourceType":"module"}