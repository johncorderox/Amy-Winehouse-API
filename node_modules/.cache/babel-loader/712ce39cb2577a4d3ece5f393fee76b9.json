{"ast":null,"code":"/*global window, global*/\nvar util = require(\"util\");\n\nvar assert = require(\"assert\");\n\nfunction now() {\n  return new Date().getTime();\n}\n\nvar slice = Array.prototype.slice;\nvar console;\nvar times = {};\n\nif (typeof global !== \"undefined\" && global.console) {\n  console = global.console;\n} else if (typeof window !== \"undefined\" && window.console) {\n  console = window.console;\n} else {\n  console = {};\n}\n\nvar functions = [[log, \"log\"], [info, \"info\"], [warn, \"warn\"], [error, \"error\"], [time, \"time\"], [timeEnd, \"timeEnd\"], [trace, \"trace\"], [dir, \"dir\"], [consoleAssert, \"assert\"]];\n\nfor (var i = 0; i < functions.length; i++) {\n  var tuple = functions[i];\n  var f = tuple[0];\n  var name = tuple[1];\n\n  if (!console[name]) {\n    console[name] = f;\n  }\n}\n\nmodule.exports = console;\n\nfunction log() {}\n\nfunction info() {\n  console.log.apply(console, arguments);\n}\n\nfunction warn() {\n  console.log.apply(console, arguments);\n}\n\nfunction error() {\n  console.warn.apply(console, arguments);\n}\n\nfunction time(label) {\n  times[label] = now();\n}\n\nfunction timeEnd(label) {\n  var time = times[label];\n\n  if (!time) {\n    throw new Error(\"No such label: \" + label);\n  }\n\n  delete times[label];\n  var duration = now() - time;\n  console.log(label + \": \" + duration + \"ms\");\n}\n\nfunction trace() {\n  var err = new Error();\n  err.name = \"Trace\";\n  err.message = util.format.apply(null, arguments);\n  console.error(err.stack);\n}\n\nfunction dir(object) {\n  console.log(util.inspect(object) + \"\\n\");\n}\n\nfunction consoleAssert(expression) {\n  if (!expression) {\n    var arr = slice.call(arguments, 1);\n    assert.ok(false, util.format.apply(null, arr));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}